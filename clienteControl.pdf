<?php 

namespace Conts;
use Illuminate\Support\Facades\Storage;

// Importar as classes 
/*use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\Exception;
// Carregar o autoloader do composer
require 'vendor/autoload.php';
*/

use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\Exception;

require 'vendor/PHPMailer-master/src/Exception.php';
require 'vendor/PHPMailer-master/src/PHPMailer.php';
require 'vendor/PHPMailer-master/src/SMTP.php';

use model\usuarioModel;
//use model\banksModel;
//use model\banksportModel;
use model\aporteModel;
use model\investimentoModel;
//use model\estadosModel;
//use model\cidadesModel;
use model\bonusModel;
use model\cashbackModel;
use model\saqueModel;
use model\logspinModel;
use model\sistemaModel;
use model\extratoModel;
use model\pontosModel;
use model\pontos2Model;
use model\rendimentoModel;
use model\pagamentoModel;
use model\paisModel;
use model\ticketModel;
use model\mensagemModel;


class clienteControl {
	function __construct($view,$router){
		$this->view = $view;
		$this->router = $router;
	}

    
	// ========================================= 
	function confirmar_pagamento($req,$res,$args){
	    $now = date('Y-m-d H:i:s');
		$usuario_id    = $_SESSION['id'];

		$aporte_id     = $args['id'];

		$pagamento     = $args['retorno'];
		parse_str($pagamento, $pagamento_dados);
		$pagamento_id  = $pagamento_dados['transacao'];

		if(is_null($usuario_id)):
			// faz a validação caso não esteja logado
			$url = $this->router->pathFor('login');
			return $res->withStatus(200)->withHeader('Location', $url);
		else:
			// pega dados do usuário.
			$usuario_dados = usuarioModel::where('usuario_id', $usuario_id)->get()[0];

			if(empty($usuario_dados->mibank)):
		   		$url = $this->router->pathFor('dados-bancarios');
		   		return $res->withStatus(200)->withHeader('Location', $url);
            else:            	
                // pesquisa se existe este aporte
                $aporte_count = aporteModel::where('aporte_id', $aporte_id)->where('usuario_id', $usuario_id)->get()->count();

                $ap = aporteModel::where('aporte_id', $aporte_id)->get()[0];
                $Dusuario = usuarioModel::where('usuario_id', $usuario_id)->get()[0];
                $pratDate = usuarioModel::where('usuario', $usuario_dados->patrocinador)->get()[0];
                
                if($aporte_count === 1):
                    $data0 = gmdate('d/m/Y',strtotime('+45 hour',strtotime($now)));
                    $data = str_replace("/", "-", $data0);
            		$data_proximo = date('Y-m-d H:i:s', strtotime($data));
			            
			        $data01 = gmdate('d/m/Y',strtotime('+16 day',strtotime($now)));
                    $data1 = str_replace("/", "-", $data01);
            		$data_recebimento = date('Y-m-d H:i:s', strtotime($data1));
			            
			        $recebimento = $ap->recebimento + ($ap->recebimento * 1);
		            //$ciclo = 0;
		                
		            $valor = $ap->investimento;
		                
		            if($valor == 50){
                        $pontos = 1;
                        $val = 1.00;
                    }else if($valor == 100){
                        $pontos = 2;
                        $val = 2.00;
                    }else if($valor == 200){
                        $pontos = 3;
                        $val = 3.00;
                    }else if($valor == 400){
                        $pontos = 4;
                        $val = 4.00;
                    }else if($valor == 800){
                        $pontos = 6;
                        $val = 6.00;
                    }else if($valor == 1000){
                        $pontos = 8;
                        $val = 8.00;
                    }
		            
		            $bonusValor = (0.05 * $valor);
		                
		            
                    if($ap->status == 'Reentrada'){
                        
		                $teste = aporteModel::where('aporte_id',$aporte_id)->get()[0];
                    
                        if($teste->antigo_id != ''){
                            $ap_id = $teste->antigo_id;
                        }else{
                            $ap_id = $aporte_id;
                        }
                        
		                $patro = usuarioModel::where('usuario', $Dusuario->patrocinador)->get()[0];
			
                        $aporte = aporteModel::create(array('usuario_id'=>$usuario_id,'investimento'=>$ap->investimento,'recebimento'=>$recebimento,'data_investimento'=>$now,'data_proximo'=>$data_proximo,'data_recebimento'=>$data_recebimento,'pagamento_id'=>$pagamento_id,'status'=>'Ativo','patrocinador'=>$patro->usuario_id,'ciclo'=>0,'antigo_id'=>$ap_id));
            			//extratoModel::insert(array('pat_id'=>$patro->usuario_id,'usuario_id'=>$Dusuario->usuario_id,'tipo'=>'Aporte','aporte_id'=>$aporte->id));
            			$bonus = bonusModel::create(array('aporte_id'=>$aporte->id,'usuario_id'=>$Dusuario->usuario_id,'patrocinador'=>$patro->usuario_id,'valor'=>$bonusValor,'status'=>'Pendente'));
            			//extratoModel::insert(array('pat_id'=>$patro->usuario_id,'usuario_id'=>$Dusuario->usuario_id,'tipo'=>'Bônus','bonus_id'=>$bonus->id));
            			$p = pontosModel::create(array('usuario_id'=>$Dusuario->usuario_id,'investidor_id'=>$aporte->id,'pontos'=>$pontos,'valor'=>$val,'data'=>$now,'patrocinador_id'=>$patro->usuario_id));
            			//extratoModel::insert(array('pat_id'=>$patro->usuario_id,'usuario_id'=>$Dusuario->usuario_id,'tipo'=>'Pontos','pontos_id'=>$p->id));
            			$b = bonusModel::where('bonus_id', $bonus->id)->get()[0];
            			$confirm = aporteModel::where('aporte_id', $aporte_id)->update(array('pagamento_id' => $pagamento_id, 'status' => 'Ativo'));
            			
            			$val = $Dusuario->carteira + ($valor * 0.30);
                        usuarioModel::where('usuario_id', $usuario_id)->update(array('carteira'=>$val));
            		    
            		    $val2 = $pratDate->carteira_pontos + $p->valor;
            		    usuarioModel::where('usuario_id', $pratDate->usuario_id)->update(array('carteira_pontos'=>$val2));	
            		    
                    }else if($ap->status == 'Taxa'){
                        $confirm = aporteModel::where('aporte_id', $aporte_id)->update(array('pagamento_id' => $pagamento_id, 'status' => 'Ativo'));
                        $val = $Dusuario->carteira + ($valor * 0.30);
                        usuarioModel::where('usuario_id', $usuario_id)->update(array('carteira'=>$val));
                    }else{
                	    $confirm = aporteModel::where('aporte_id', $aporte_id)->update(array('pagamento_id' => $pagamento_id, 'status' => 'Ativo'));
                	    usuarioModel::where('usuario_id', $usuario_dados)->update(array('status_cadastro' => 'Ativo'));
                	    $b = bonusModel::where('aporte_id', $aporte_id)->get()[0];
            		}
                	
                	
                    $chave_transferencia = "{217AA41B-93FC-4C88-A393-E7EEBCF42B4C}";
                    $descricao = "Bônus de Indicação";
                    $bonusValor = $b->valor;
                    //$bonusValor = 1.00;
                    $num = $b->bonus_id + 1000;
                    
                    $mibp = str_replace("-", "", $pratDate->mibank);
                    //$mibp = "42215804";
                    $link_do_site = "https://www.uniaogold.com";
                    
                    $curl2 = curl_init();
                    curl_setopt_array($curl2, array(
                        CURLOPT_URL => "https://api.mibank.solutions/api/transferencia/transferir-por-chave",
                        CURLOPT_RETURNTRANSFER => true,
                        CURLOPT_ENCODING => "",
                        CURLOPT_MAXREDIRS => 10,
                        CURLOPT_TIMEOUT => 30,
                        CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                        CURLOPT_CUSTOMREQUEST => "POST",
                        CURLOPT_POSTFIELDS => "{\n  \"chave_transferencia\": \"".$chave_transferencia."\",\n  \"valor\": ".$bonusValor.",\n  \"descricao\": \"".$descricao."\",\n  \"callback_url_success\": \"".$link_do_site."\",\n  \"callback_url_fail\": \"".$link_do_site."\",\n  \"conta_beneficiario\": \"".$mibp."\",\n  \"numero_controle\": \"".$num."\"\n}",
                    
                        CURLOPT_HTTPHEADER => array(
                            "Content-Type: application/json"
                        ),
                    ));
                  
                    $response2 = curl_exec($curl2);
                    $err2 = curl_error($curl2);
                    curl_close($curl2);
            
                    if (!$err2) {
                        bonusModel::where('aporte_id', $aporte_id)->update(array('status' => 'Pago','data_bonus'=>$now));
                    }else{
                        echo "Erro: ".$err2;
                    }

                    
                    
                	$url = $this->router->pathFor('investimentos_ativos');
                	return $res->withStatus(200)->withHeader('Location', $url);
                else:
                	$url = $this->router->pathFor('investimentos_pendentes');
                	return $res->withStatus(200)->withHeader('Location', $url);
                endif;

            endif;
		endif;
	}
	
	
	/*function pagar_bitcoin($req,$res,$args){
	    $message = '';
		$usuario_id    =  $_SESSION['id'];
	    //$aporte_id     =  $_POST['id'];
	    $aporte_id     =  $args['id'];
	    $dados['id_inv'] = $aporte_id;
        $ap = aporteModel::where('aporte_id', $aporte_id)->get()[0];
        
        $valid_mbk_c = curl_init();
			curl_setopt_array($valid_mbk_c, array(
			    CURLOPT_URL => "https://blockchain.info/tobtc?currency=BRL&value=".$ap->investimento,
			    CURLOPT_RETURNTRANSFER => true,
			    CURLOPT_ENCODING => "",
			    CURLOPT_MAXREDIRS => 10,
			    CURLOPT_TIMEOUT => 0,
			    CURLOPT_FOLLOWLOCATION => false,
			    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
			    CURLOPT_CUSTOMREQUEST => "GET",
			    CURLOPT_HTTPHEADER => array(
			        "Content-Type: application/json"
			        ),
			    ));

			    $valid_mbk_r = curl_exec($valid_mbk_c);
			    $valid_mbk_e = curl_error($valid_mbk_c);
			    curl_close($valid_mbk_c);
			    $valid_mbk_x = json_decode($valid_mbk_r, true);

        $now = date('Y-m-d H:i:s');
                
        if($ap->investimento_bitcoin == ''){
            aporteModel::where('aporte_id', $aporte_id)->update(array('investimento_bitcoin' => $valid_mbk_x,'data_proximo'=>$now));
        }
        
        $agora = floor((strtotime($now) - strtotime($ap->data_investimento) ) / 3600) ;
        if($agora == 1 ){
            aporteModel::where('aporte_id', $aporte_id)->update(array('investimento_bitcoin' => $valid_mbk_x,'data_proximo'=>$now));
        }
        
        
	    if(is_null($usuario_id)):
			$url = $this->router->pathFor('login');
			return $res->withStatus(200)->withHeader('Location', $url);
		else:
			$aporte_count = aporteModel::where('aporte_id', $aporte_id)->where('pagamento_id',0)->get()->count();
			if($aporte_count == 0):
				$url = $this->router->pathFor('aportes_pendentes');
				return $res->withStatus(200)->withHeader('Location', $url);
			else:
				
				// verificação do pagamento
				if(isset($_POST['pagar-bitcoin'])):
				    $pagamento_id = isset($_POST['transacao']) ? stripslashes(trim($_POST['transacao'])): '';
				    
				    if($_POST['transacao'] == ''){
				        $message = '<div class="alert alert-danger"><center>ERRO: Código de transação vazio!</center></div>';
				    }else{
				        $code_exist = aporteModel::where('pagamento_id', $pagamento_id)->get()->count();
    					if($code_exist == 0):
    					    
            					$dados_aport = aporteModel::where('aporte_id', $aporte_id)->get()[0];
        						
        						$usuario_dados = usuarioModel::where('usuario_id', $usuario_id)->get()[0];
        						$ap = aporteModel::where('aporte_id', $aporte_id)->get()[0];
        						$Dusuario = usuarioModel::where('usuario_id', $usuario_id)->get()[0];
        										
        							            
        					    $confirm = aporteModel::where('aporte_id', $aporte_id)->update(array('pagamento_id' => $pagamento_id,'tipo'=>'Bitcoin'));
        					                	
                                $message = '<div class="alert alert-success" role="alert"><center><strong> Successo:</strong> Pagamento feito com sucesso.</center></div>';
                                
                                header("Refresh:2; url=../aportes-pendentes");
    					    
    					else:
    					    $u_transacao = isset($_POST['transacao']) ? stripslashes(trim($_POST['transacao'])): '';
			
                			if(aporteModel::where('pagamento_id', $u_transacao)->get()->count() > 0):
                				$message = '<div class="alert alert-danger" role="alert"><center><strong> Erro:</strong> Código de transação já cadastrado no sistema.</center></div>';
    					    endif;
    					endif;
				    }
				endif;

				$dados_aport = aporteModel::where('aporte_id', $aporte_id)->get()[0];

                $dados['Aporte_Val']  =  $dados_aport->investimento;
                $dados['Bitcoin_Val'] = $valid_mbk_x;

				return $this->view->render($res,'cliente/pagar_bitcoin.html',array('baseurl'=>base_url, 'message'=> $message, 'dados' => $dados));
			endif;
		endif;
	}*/
	
	
    function inicio($req,$res,$args){
        $valid_mbk_c = curl_init();
		curl_setopt_array($valid_mbk_c, array(
		    CURLOPT_URL => "https://api.bitcointrade.com.br/v3/public/BRLBTC/ticker/",
		    CURLOPT_RETURNTRANSFER => true,
		    CURLOPT_ENCODING => "",
		    CURLOPT_MAXREDIRS => 10,
		    CURLOPT_TIMEOUT => 0,
		    CURLOPT_FOLLOWLOCATION => false,
		    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
		    CURLOPT_CUSTOMREQUEST => "GET",
		    CURLOPT_HTTPHEADER => array(
		        "Content-Type: application/json"
	        ),
	    ));

	    $valid_mbk_r = curl_exec($valid_mbk_c);
	    $valid_mbk_e = curl_error($valid_mbk_c);
	    curl_close($valid_mbk_c);
	    $valid_mbk_x = json_decode($valid_mbk_r, true);
        
        $dados['Btc_valor'] = $valid_mbk_x['data']['last'];
        
        $valid_mbk_c2 = curl_init();
		curl_setopt_array($valid_mbk_c2, array(
		    CURLOPT_URL => "https://api.bitcointrade.com.br/v3/public/BRLETH/ticker/",
		    CURLOPT_RETURNTRANSFER => true,
		    CURLOPT_ENCODING => "",
		    CURLOPT_MAXREDIRS => 10,
		    CURLOPT_TIMEOUT => 0,
		    CURLOPT_FOLLOWLOCATION => false,
		    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
		    CURLOPT_CUSTOMREQUEST => "GET",
		    CURLOPT_HTTPHEADER => array(
		        "Content-Type: application/json"
	        ),
	    ));

	    $valid_mbk_r2 = curl_exec($valid_mbk_c2);
	    $valid_mbk_e2 = curl_error($valid_mbk_c2);
	    curl_close($valid_mbk_c2);
	    $valid_mbk_x2 = json_decode($valid_mbk_r2, true);
        
        $dados['Eth_valor'] = $valid_mbk_x2['data']['last'];
        
        $valid_mbk_c3 = curl_init();
		curl_setopt_array($valid_mbk_c3, array(
		    CURLOPT_URL => "https://api.bitcointrade.com.br/v3/public/BRLLTC/ticker/",
		    CURLOPT_RETURNTRANSFER => true,
		    CURLOPT_ENCODING => "",
		    CURLOPT_MAXREDIRS => 10,
		    CURLOPT_TIMEOUT => 0,
		    CURLOPT_FOLLOWLOCATION => false,
		    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
		    CURLOPT_CUSTOMREQUEST => "GET",
		    CURLOPT_HTTPHEADER => array(
		        "Content-Type: application/json"
	        ),
	    ));

	    $valid_mbk_r3 = curl_exec($valid_mbk_c3);
	    $valid_mbk_e3 = curl_error($valid_mbk_c3);
	    curl_close($valid_mbk_c3);
	    $valid_mbk_x3 = json_decode($valid_mbk_r3, true);
	    
        $dados['Ltc_valor'] = $valid_mbk_x3['data']['last'];
        
        
        //https://api.bitcointrade.com.br/v2/public/BTC/ticker/
        
		return $this->view->render($res,'cliente/inicio.html',array('baseurl'=>base_url ,'dados'=> $dados));
	}
    
	function login($req,$res,$args){
	    $sistema = sistemaModel::where('sistema_id', 1)->get()[0];
	    $dados['Logo'] = $sistema->logo;
	    $dados['Termos'] = $sistema->termos;
	    
		$message = '';
		$now = date('Y-m-d H:i:s');
		
        //if(isset($_POST['entrar'])){
        if(isset($_POST['_csrf'])){	
            
			$usuario = $_POST['usuario'];
			$u_usuario = isset($_POST['usuario']) ? htmlspecialchars(stripslashes(trim($_POST['usuario']))): '';
			$senha = md5($_POST['senha']);
			$u_senha = isset($_POST['senha']) ? htmlspecialchars(stripslashes(trim($_POST['senha']))): '';
			
			if(usuarioModel::where('usuario',$u_usuario)->where('senha',md5($u_senha))->get()->count() > 0 ){
			    $content = [
                    "secret" => "6LdKAocaAAAAAK3EaLJ122y1JRc8VgTv28ptTtf_",
                    "response" => $_POST["g-recaptcha-response"] ?? "",
                    "remoteip" => $_SERVER["REMOTE_ADDR"] ?? null,
                ];
                
                $curl = curl_init("https://www.google.com/recaptcha/api/siteverify");
                curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
                curl_setopt($curl, CURLOPT_POST, true);
                curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);
                curl_setopt($curl, CURLOPT_POSTFIELDS, $content);
                $validation = curl_exec($curl);
                curl_close($curl);
                
                $response = json_decode($validation);
                
                if($response->success) {
                    $usuario = usuarioModel::select('usuario_id','nome','status_cadastro','acesso')->where('usuario',$u_usuario)->where('senha',md5($u_senha))->get()[0];
                    
                    if($usuario->usuario_id != 8){
                        if($usuario->acesso == 'Admin'){
                            $resp['msg']    = "sem permissão";
                            echo json_encode($resp);
                            exit;    
                        }else{    
                            if($usuario->status_cadastro == 'Bloqueado'){
                                $resp['msg']    = "bloqueado";
                                echo json_encode($resp);
                                exit;
                            }else{
                				session_start();
                				$_SESSION['id'] = $usuario->usuario_id;
                				$_SESSION['Nome'] = $usuario->nome;
                				
                				usuarioModel::where('usuario_id', $usuario->usuario_id)->update(array('data_ultimo_login'=>$now,'ip'=>$_SERVER["REMOTE_ADDR"]));
                					
                            	$resp['msg']    = "sucesso";
                                echo json_encode($resp);
                                exit;
                            }
                        }
                    }else{
                        if($usuario->status_cadastro == 'Bloqueado'){
                            $resp['msg']    = "bloqueado";
                            echo json_encode($resp);
                            exit;
                        }else{
                			session_start();
                			$_SESSION['id'] = $usuario->usuario_id;
                			$_SESSION['Nome'] = $usuario->nome;
                				
                			usuarioModel::where('usuario_id', $usuario->usuario_id)->update(array('data_ultimo_login'=>$now,'ip'=>$_SERVER["REMOTE_ADDR"]));
                			
                			$resp['msg']    = "sucesso";
                            echo json_encode($resp);
                            exit;
                        }
                    }
                }else{
                    $resp['msg']    = "captcha inválido";
                    echo json_encode($resp);
                    exit;
                }
			}else{
                $resp['msg']    = "errado";
                echo json_encode($resp);
                exit;
			}
		}

		return $this->view->render($res,'cliente/login.html',array('baseurl'=>base_url ,'message'=> $message));
	}
	
	function login2($req,$res,$args){
	    $sistema = sistemaModel::where('sistema_id', 1)->get()[0];
	    $dados['Logo'] = $sistema->logo;
	    $dados['Termos'] = $sistema->termos;
	    
		$message = '';
		$now = date('Y-m-d H:i:s');
		$data = date('d-m-Y');
		$hora = date('H:i:s');
		
        //if(isset($_POST['entrar'])){
        if(isset($_POST['_csrf'])){	
            
			$usuario = $_POST['usuario'];
			$u_usuario = isset($_POST['usuario']) ? stripslashes(trim($_POST['usuario'])): '';
			$senha = md5($_POST['senha']);
			$u_senha = isset($_POST['senha']) ? stripslashes(trim($_POST['senha'])): '';
			
			if(usuarioModel::where('usuario',$u_usuario)->where('senha',md5($u_senha))->get()->count() > 0 ){
			    $content = [
                    "secret" => "6LdKAocaAAAAAK3EaLJ122y1JRc8VgTv28ptTtf_",
                    "response" => $_POST["g-recaptcha-response"] ?? "",
                    "remoteip" => $_SERVER["REMOTE_ADDR"] ?? null,
                ];
                
                $curl = curl_init("https://www.google.com/recaptcha/api/siteverify");
                curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
                curl_setopt($curl, CURLOPT_POST, true);
                curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);
                curl_setopt($curl, CURLOPT_POSTFIELDS, $content);
                $validation = curl_exec($curl);
                curl_close($curl);
                
                $response = json_decode($validation);
                
                if($response->success) {
                    $usuario = usuarioModel::select('usuario_id','nome','email','status_cadastro')->where('usuario',$u_usuario)->where('senha',md5($u_senha))->get()[0];
                    if($usuario->status_cadastro == 'Bloqueado'){
                        $resp['msg']    = "bloqueado";
                        echo json_encode($resp);
                        exit;
                    }else{
        				//session_start();
        				$_SESSION['id'] = $usuario->usuario_id;
        				//$_SESSION['Nome'] = $usuario->nome;
        				
        				
        				/*$numero = 4;
                        $resultado = random_bytes($numero);
                        $final = substr(bin2hex($resultado),0,-2);
                        
                        if($usuario->usuario_id == 6 || $usuario->usuario_id == 1013){*/
                		    usuarioModel::where('usuario_id', $usuario->usuario_id)->update(array('data_ultimo_login'=>$now,'ip'=>$_SERVER["REMOTE_ADDR"]));
        				
                			$resp['msg']    = "sucesso";
                            echo json_encode($resp);
                            exit;
                        /*}else{
                            usuarioModel::where('usuario_id', $usuario->usuario_id)->update(array('login_code'=>$final));
        				
            				$ip = $_SERVER["REMOTE_ADDR"];
            				$dispositivo = $_SERVER['HTTP_USER_AGENT'];
    		                $nome = $usuario->nome;
		                
		
        
        //echo 'CÓDIGO: '.$final.'<br>';

        $arquivo = "<html>
<body>
  <center>
    <div style='background-color:#007acc;'>
    	<img style='width:50%' src='https://speedinvest.investtrade.com.br/public/images/logo-speed-invest-min.png'/>
    </div>

    
      <br>
      <h2 style='color:red;'>AUTENTICAÇÃO DE 2 FATORES</h2>
    <small style='color:gray;'>ESTE EMAIL CONTÉM O CÓDIGO PARA VOCÊ ACESSAR SEU ESCRITÓRIO.</small>
      
      <h1><b>Olá $nome,</b></h1>
      <br>
      Você fez login no dia $data às $hora pelo $dispositivo?
      <br>Seu IP: <b>$ip</b>
      <br>
    <div style='margin-top:13px;border:3px solid;color:gray;width:50%;'>
        <br>
        Código:
        <br>
        <h1 style='color:blue;'>$final</h1>
      </div>
    <br>
    <div style='background-color:#d9e2e8;'>
      <br>
      <i style='color:gray'>Caso não tenha feito login, favor desconsiderar esse email.</i>
    	<br><br>
      <b>Abraços Equipe Speed Invest.</b>
      <br><br>
      <span style='color:red;'><i>Não responda este email.</i></span>
      <br><br>
    </div>
    
  </center>
</body>
</html>";
        
                //enviar
       
                // emails para quem será enviado o formulário
                //$emailenviar = "priscilabispo1993@gmail.com";
                $emailenviar = $usuario->email;
                $destino = $emailenviar;
                $assunto = "Acesso ao Login";
             
                // É necessário indicar que o formato do e-mail é html
                $headers  = 'MIME-Version: 1.0' . "\r\n";
                $headers .= 'Content-type: text/html; charset=iso-8859-1' . "\r\n";
                $headers .= 'From: Speed Invest <naoresponda@speedinvest.investtrade.com.br>';
                //$headers .= "Bcc: $EmailPadrao\r\n";
               
                $enviaremail = mail($destino, $assunto, $arquivo, $headers);
				
    		    
                            $resp['msg']    = "enviado";
                            echo json_encode($resp);
                            exit;
                        }*/
                    }
                }else{
                    $resp['msg']    = "captcha inválido";
                    echo json_encode($resp);
                    exit;
                }
			}else{
                $resp['msg']    = "errado";
                echo json_encode($resp);
                exit;
			}
		}
        

		return $this->view->render($res,'cliente/login2.html',array('baseurl'=>base_url ,'message'=> $message));
	}
	
	
	function confirmar_acesso($req,$res,$args){
	    $id = $_SESSION['id'];	
	    $now = date('Y-m-d H:i:s');
	    
	    $usuario = usuarioModel::select('usuario_id','nome','email','login_code')->where('usuario_id',$id)->get()[0];
	    
	    if(isset($_POST['_csrf'])){
		    $codigo   =  isset($_POST['codigo']) ? htmlspecialchars(stripslashes(trim($_POST['codigo']))): null;
		    
			if($codigo == $usuario->login_code){
    	        session_start();
        		$_SESSION['id'] = $usuario->usuario_id;
        		$_SESSION['Nome'] = $usuario->nome;
        				
    	        usuarioModel::where('usuario_id', $usuario->usuario_id)->update(array('data_ultimo_login'=>$now,'ip'=>$_SERVER["REMOTE_ADDR"]));
    			
    			$resp['msg']    = "sucesso";
                echo json_encode($resp);
                exit;    
		    }else{
	   	        $resp['msg']    = "errado";
                echo json_encode($resp);
                exit;    
			}
		}
		
		
		return $this->view->render($res,'cliente/confirmar_acesso.html',array('baseurl'=>base_url ,'message'=>$message,'dados'=>$dados));
	}
	
	
    /*---------------------------------------------------------*/

    
    function perfil($req,$res,$args){
		$message = '';
		$usuario = $_SESSION['id'];
		$Dusuario = usuarioModel::where('usuario_id', $usuario)->get()[0];
		$now = date('Y-m-d H:i:s');
		
        if($usuario == ''){
            $url = $this->router->pathFor('login');
		    return $res->withStatus(200)->withHeader('Location', $url);
        }

        if($Dusuario->pin == ''){
           $url = $this->router->pathFor('pin');
		   return $res->withStatus(200)->withHeader('Location', $url);
        }
    		
        $dados['Usuario'] = $Dusuario->usuario; 
		$dados['Foto'] = $Dusuario->foto; 
		$dados['Nome'] = $Dusuario->nome; 
		$dados['Patrocinador'] = $Dusuario->patrocinador; 
		$dados['Email'] = $Dusuario->email; 
		$dados['Cpf'] = $Dusuario->cpf; 
		$dados['Whatsapp'] = $Dusuario->whatsapp; 
		$dados['Cadastro'] = date("d/m/Y H:i:s", strtotime($Dusuario->data_cadastro));
		$dados['Acesso'] = $Dusuario->acesso;
		$dados['Status_cadastro'] = $Dusuario->status_cadastro;
		$dados['Genero'] = $Dusuario->genero;
		$dados['Nascimento'] = $Dusuario->nascimento;
		$dados['Estado_civil'] = $Dusuario->estado_civil;
		$dados['Ip'] = $Dusuario->ip;
	    $dados['Documento_status'] = $Dusuario->documento_status;
	    	
		$dados['Rua'] = $Dusuario->rua;
		$dados['Numero'] = $Dusuario->numero;
		$dados['Bairro'] = $Dusuario->bairro;
		$dados['Estado'] = $Dusuario->estado;
		$dados['Cidade'] = $Dusuario->cidade;
		$dados['Cep'] = $Dusuario->cep;
		$dados['Pais'] = $Dusuario->pais;
		
		$dados['Agencia'] = $Dusuario->agencia;
		$dados['Conta'] = $Dusuario->conta;
		$dados['Tipo'] = $Dusuario->tipo;
		$dados['Banco'] = $Dusuario->banco;
		$dados['Pessoa'] = $Dusuario->pessoa;
		
		$dados['Selfie'] = $Dusuario->selfie;
		$dados['Rg_frente'] = $Dusuario->rg_frente;
		$dados['Rg_verso'] = $Dusuario->rg_verso;
		$dados['Cnh_frente'] = $Dusuario->cnh_frente;
		$dados['Cnh_verso'] = $Dusuario->cnh_verso;
		

        if(isset($_POST['_csrf'])){
            $nome   =  isset($_POST['nome']) ? htmlspecialchars(stripslashes(trim($_POST['nome']))): null;
            //$cpf   =  isset($_POST['cpf']) ? htmlspecialchars(stripslashes(trim($_POST['cpf']))): null;
            //$email   =  isset($_POST['email']) ? htmlspecialchars(stripslashes(trim($_POST['email']))): null;
            $whatsapp   =  isset($_POST['whatsapp']) ? htmlspecialchars(stripslashes(trim($_POST['whatsapp']))): null;
            $genero   =  isset($_POST['genero']) ? htmlspecialchars(stripslashes(trim($_POST['genero']))): null;
            $nascimento   =  isset($_POST['nascimento']) ? htmlspecialchars(stripslashes(trim($_POST['nascimento']))): null;
            $estado_civil   =  isset($_POST['estado_civil']) ? htmlspecialchars(stripslashes(trim($_POST['estado_civil']))): null;
			
			if($Dusuario->nome == $nome && $Dusuario->whatsapp == $whatsapp && $Dusuario->genero == $genero && $Dusuario->nascimento == $nascimento && $Dusuario->estado_civil == $estado_civil){
			    
			    $resp['msg']    = "sem alteração";
                echo json_encode($resp);
                exit;   
			}else{
			    usuarioModel::where('usuario_id', $usuario)->update(array('genero'=>$genero,'nascimento'=>$nascimento,'estado_civil'=>$estado_civil));
    			
    			$resp['msg']    = "sucesso";
                echo json_encode($resp);
                exit;   
    		}
		}

        if(isset($_POST['_csrfe'])){
            $pais   =  isset($_POST['pais']) ? htmlspecialchars(stripslashes(trim($_POST['pais']))): null;
            $estado   =  isset($_POST['estado']) ? htmlspecialchars(stripslashes(trim($_POST['estado']))): null;
            $cidade   =  isset($_POST['cidade']) ? htmlspecialchars(stripslashes(trim($_POST['cidade']))): null;
            $cep   =  isset($_POST['cep']) ? htmlspecialchars(stripslashes(trim($_POST['cep']))): null;
            $rua   =  isset($_POST['rua']) ? htmlspecialchars(stripslashes(trim($_POST['rua']))): null;
            //$numero   =  isset($_POST['numero']) ? htmlspecialchars(stripslashes(trim($_POST['numero']))): null;
            $bairro   =  isset($_POST['bairro']) ? htmlspecialchars(stripslashes(trim($_POST['bairro']))): null;
            
		
			if($Dusuario->rua == $rua && $Dusuario->bairro == $bairro && $Dusuario->cidade == $cidade && $Dusuario->estado == $estado&& $Dusuario->pais == $pais && $Dusuario->cep == $cep){
			    
			    $resp['msg']    = "sem alteração";
                echo json_encode($resp);
                exit;   
			}else{
			    if($rua != ''){
			        usuarioModel::where('usuario_id', $usuario)->update(array('rua'=>$rua));
			    }
			    
			    if($pais != ''){
			        usuarioModel::where('usuario_id', $usuario)->update(array('pais'=>$pais));
			    }
			    
			    if($bairro != ''){
			        usuarioModel::where('usuario_id', $usuario)->update(array('bairro'=>$bairro));
			    }
			    
			    if($cidade != ''){
			        usuarioModel::where('usuario_id', $usuario)->update(array('cidade'=>$cidade));
			    }
			    
			    if($estado != ''){
			        usuarioModel::where('usuario_id', $usuario)->update(array('estado'=>$estado));
			    }
			    
			    if($cep != ''){
			        usuarioModel::where('usuario_id', $usuario)->update(array('cep'=>$cep));
			    }
			    
			    
			    $resp['msg']    = "sucesso";
                echo json_encode($resp);
                exit;
			}
		}
		
		if(isset($_POST['_csrfc'])){
			$u_conta = isset($_POST['conta']) ? htmlspecialchars(stripslashes(trim($_POST['conta']))): '';
			$u_agencia = isset($_POST['agencia']) ? htmlspecialchars(stripslashes(trim($_POST['agencia']))): '';
			$u_tipo = isset($_POST['tipo']) ? htmlspecialchars(stripslashes(trim($_POST['tipo']))): '';
			$u_banco = isset($_POST['banco']) ? htmlspecialchars(stripslashes(trim($_POST['banco']))): '';
			$u_pessoa = isset($_POST['pessoa']) ? htmlspecialchars(stripslashes(trim($_POST['pessoa']))): '';
			
			if($u_banco == 'nada'){
			    $message = '<div class="alert alert-danger"><center><b>ERRO: Selecione um Banco.</b></center></div>'; 
			}else if($u_conta == ''){
			    $resp['msg']    = "sem conta";
                echo json_encode($resp);
                exit;
			}else if($u_agencia == ''){
			    $resp['msg']    = "sem agencia";
                echo json_encode($resp);
                exit;   
			}else{
    		    usuarioModel::where('usuario_id', $usuario)->update(array('banco'=>$u_banco,'agencia'=>$u_agencia,'conta'=>$u_conta,'tipo'=>$u_tipo,'pessoa'=>$u_pessoa));
                
			    $resp['msg']    = "sucesso";
                echo json_encode($resp);
                exit;   
			}
			
		}

        if(isset($_POST['_csrfs'])){
			$senhaatual   =  isset($_POST['senhaatual']) ? htmlspecialchars(stripslashes(trim($_POST['senhaatual']))): null;
			$senha   =  isset($_POST['senha']) ? htmlspecialchars(stripslashes(trim($_POST['senha']))): null;
			$senha2   =  isset($_POST['csenha']) ? htmlspecialchars(stripslashes(trim($_POST['csenha']))): null;
			
			if(md5($senhaatual) != $Dusuario->senha){
			    $resp['msg']    = "senha atual incorreta";
                echo json_encode($resp);
                exit;   
            }else if($senha != $senha2){
                $resp['msg']    = "senhas diferentes";
                echo json_encode($resp);
                exit;   
            }else{
			    usuarioModel::where('usuario_id', $usuario)->update(array('senha'=>md5($senha)));
			    
			    $resp['msg']    = "sucesso";
                echo json_encode($resp);
                exit;   
            }		
		}
	
	    if(isset($_POST['_csrfp'])){
	        $senhaatual   =  isset($_POST['senhaatual']) ? htmlspecialchars(stripslashes(trim($_POST['senhaatual']))): null;
			$pin   =  isset($_POST['pin']) ? htmlspecialchars(stripslashes(trim($_POST['pin']))): null;
			$pin2   =  isset($_POST['cpin']) ? htmlspecialchars(stripslashes(trim($_POST['cpin']))): null;
			
			if(md5($senhaatual) != $Dusuario->senha){
			    $resp['msg']    = "senha atual incorreta";
                echo json_encode($resp);
                exit;   
            }else if($pin != $pin2){
                $resp['msg']    = "pin diferente";
                echo json_encode($resp);
                exit;   
            }else{
			    usuarioModel::where('usuario_id', $usuario)->update(array('pin'=>md5($pin),'data_pin'=>$now));
			    
			    $resp['msg']    = "sucesso";
                echo json_encode($resp);
                exit;   
            }		
		}
	
	    if(isset($_POST['_csrfi'])):
            if(isset($_FILES)){
            	$foto = $_FILES["file"];
                        
                if (empty($foto["name"])) {
                    $resp['msg']    = "sem foto";
                    echo json_encode($resp);
                    exit;
                }else{
                 	//if (!empty($foto["name"])) {
                   	if(!preg_match("/^image\/(pjpeg|jpeg|png|gif|bmp)$/", $_FILES['file']["type"])){
              	   	    $resp['msg']    = "formato inválido";
                        echo json_encode($resp);
                        exit;
             		}else if($foto['size'] > 2097152){   
                		$resp['msg']    = "arquivo grande";
                        echo json_encode($resp);
                        exit;
             		}else{
    					preg_match("/\.(gif|bmp|png|jpg|jpeg){1}$/i", $_FILES['file']["name"], $ext);
                		$nome_imagem = md5(uniqid(time())) . "." . $ext[1];
                		$caminho_imagem = "perfil/" . $nome_imagem;
                		move_uploaded_file($_FILES['file']["tmp_name"], $caminho_imagem);
                            	
                        usuarioModel::where('usuario_id', $usuario)->update(array('foto'=>$nome_imagem));
            				                	
                        //header("Refresh:2");
                        
                        $resp['msg']    = "sucesso";
                        echo json_encode($resp);
                        exit;
             		}
                }
			}
		endif;
	
	    $dados['Pais'] = paisModel::select('nome_pt','sigla')->get();
	    //$dados['Estados'] = estadosModel::get();
	    //$dados['Cidades'] = cidadesModel::get();
		//$dados['Bancos'] = banksModel::orderby('nome','asc')->get();
		
		return $this->view->render($res,'cliente/perfil.html',array('baseurl'=>base_url ,'message'=> $message,'dados'=>$dados));
	}

    function compressImage($source_path, $destination_path, $quality) {
        $info = getimagesize($source_path);
    
        if ($info['mime'] == 'image/jpeg') {
            $image = imagecreatefromjpeg($source_path);
        } elseif ($info['mime'] == 'image/png') {
            $image = imagecreatefrompng($source_path);
        }
    
        imagejpeg($image, $destination_path, $quality);
    
        return $destination_path;
    }

    function verificar_conta($req,$res,$args){
		$message = '';
		$usuario = $_SESSION['id'];
		$Dusuario = usuarioModel::where('usuario_id', $usuario)->get()[0];
		$now = date("Y-m-d H:i:s");
		
        if($usuario == ''){
            $url = $this->router->pathFor('login');
		    return $res->withStatus(200)->withHeader('Location', $url);
        }
        
        if($Dusuario->pin == ''){
           $url = $this->router->pathFor('pin');
		   return $res->withStatus(200)->withHeader('Location', $url);
        }

    		
        //$dados['Carteira'] = $Dusuario->carteira;
		$dados['Usuario'] = $Dusuario->usuario; 
		$dados['Foto'] = $Dusuario->foto; 
		$dados['Nome'] = $Dusuario->nome; 
		$dados['Patrocinador'] = $Dusuario->patrocinador; 
		$dados['Email'] = $Dusuario->email; 
		$dados['Cpf'] = $Dusuario->cpf; 
		$dados['Whatsapp'] = $Dusuario->whatsapp; 
		$dados['Cadastro'] = date("d/m/Y H:i:s", strtotime($Dusuario->data_cadastro));
		$dados['Acesso'] = $Dusuario->acesso;
		$dados['Status_cadastro'] = $Dusuario->status_cadastro;
		$dados['Genero'] = $Dusuario->genero;
		$dados['Nascimento'] = $Dusuario->nascimento;
		$dados['Estado_civil'] = $Dusuario->estado_civil;
		$dados['Ip'] = $Dusuario->ip;
	    $dados['Documento_status'] = $Dusuario->documento_status;
	    $dados['Documento_motivo'] = $Dusuario->documento_motivo;
	    
		$dados['Selfie'] = $Dusuario->selfie;
		$dados['Comprovante'] = $Dusuario->comprovante_residencia;
		$dados['Comprovante_completo'] = $Dusuario->comprovante_residencia_completo;
		$dados['Rg_frente'] = $Dusuario->rg_frente;
		$dados['Rg_verso'] = $Dusuario->rg_verso;
		$dados['Cnh_frente'] = $Dusuario->cnh_frente;
		$dados['Cnh_verso'] = $Dusuario->cnh_verso;
		
		$dados['Desabilita'] = 0;
		
        // Variável que recebe o dia da semana (0 = Domingo, 1 = Segunda ...)
        $dias_da_semana = date('w', strtotime($now));
        if($dias_da_semana <> 0 && $dias_da_semana <> 6){
            $dados['Desabilita'] = 1;    
        }else{
            $dados['Desabilita'] = 0;
        }
		
		
		if(isset($_POST['reenviar'])){
	        usuarioModel::where('usuario_id', $usuario)->update(array('documento_status'=>'Pendente','documento_motivo'=>NULL));
                        
            //$message = '<div class="alert alert-success" role="alert"><center><b>Foto alterada com sucesso.</b></center></div>';
            header("Refresh:0");            
            
            //$resp['msg']    = "sucesso";
            //echo json_encode($resp);
            //exit;
	    }
		
	    if(isset($_POST['_csrfselfie'])){
	        if(isset($_FILES)){
	            $foto = $_FILES["selfie"];
	            //$rg_frente = $_FILES["rg_frente"];
	            //$rg_verso = $_FILES["rg_verso"];
	            
	            if(empty($foto["name"])) {
                    //$message = '<div class="alert alert-danger" role="alert"><center>Erro: <b>Nenhuma imagem selecionada.</b></center></div>';
                    $resp['msg']    = "sem foto";
                    echo json_encode($resp);
                    exit;
                }else{
                    if(!preg_match("/^image\/(pjpeg|jpeg|png|gif|bmp)$/", $foto["type"])){
              	   	    //$message = '<div class="alert alert-danger" role="alert"><center>Erro: <b>Formato de imagem inválido.</b></center></div>';
              	   	    $resp['msg']    = "formato inválido";
                        echo json_encode($resp);
                        exit;
                    //}else if($foto['size'] > 2097152){   
                    }else if($foto['size'] > 20971520){   
                		//$message = '<div class="alert alert-danger" role="alert"><center>Erro: <b>Tamanho de imagem muito grande.</b></center></div>';
                		$resp['msg']    = "arquivo grande";
                        echo json_encode($resp);
                        exit;
             		}else{
                     	// Verifica extensão do arquivo
                        //$extensao = strrchr($foto["type"], '.');
                        $extensao = pathinfo($foto["name"], PATHINFO_EXTENSION);
                        
                        //if($resultado){
                            //preg_match("/\.(gif|bmp|png|jpg|jpeg){1}$/i", $foto["name"], $ext);
                    		$nome_imagem = md5(uniqid(time())) . "." . $extensao;
                    		$caminho_imagem = "documentos/" . $nome_imagem;
                    		//$caminho_imagem = "documentos/" . $resultado;
                    		
                    		
                    		if($Dusuario->selfie != ''){
                                unlink('documentos/'.$Dusuario->selfie);
                            }
                    		
                    		move_uploaded_file($foto["tmp_name"], $caminho_imagem);
            
                            if($Dusuario->rg_frente != '' && $Dusuario->rg_verso != '' && $Dusuario->comprovante_residencia != '' && $Dusuario->comprovante_residencia_completo){
                    	        $status = 'Em Análise';
                            }else if($Dusuario->cnh_frente != '' && $Dusuario->cnh_verso != '' && $Dusuario->comprovante_residencia != '' && $Dusuario->comprovante_residencia_completo){
                    	        $status = 'Em Análise';    
                    	    }else{
                    	        $status = 'Pendente';
                    	    }
                    	    
                                	
                            usuarioModel::where('usuario_id', $usuario)->update(array('selfie'=>$nome_imagem,'documento_status'=>$status,'documento_data'=>$now));
                            
                            //$message = '<div class="alert alert-success" role="alert"><center>Sucesso! <b>Selfie enviada com sucesso.</b></center></div>';
                            
                            $resp['msg']    = "sucesso";
                            echo json_encode($resp);
                            exit;
                        /*}else{
                            $resp['msg']    = "erro";
                            echo json_encode($resp);
                            exit;    
                        }*/
             		}
                }
			}
	    }
	    
	    if(isset($_POST['_csrfcompc'])){
	        if(isset($_FILES)){
	            $foto = $_FILES["comprovante_completo"];
	            
	            if(empty($foto["name"])) {
                    //$message = '<div class="alert alert-danger" role="alert"><center>Erro: <b>Nenhuma imagem selecionada.</b></center></div>';
                    $resp['msg']    = "sem foto";
                    echo json_encode($resp);
                    exit;
                }else{
                    if(!preg_match("/^image\/(pjpeg|jpeg|png|gif|bmp)$/", $foto["type"])){
              	   	    //$message = '<div class="alert alert-danger" role="alert"><center>Erro: <b>Formato de imagem inválido.</b></center></div>';
              	   	    $resp['msg']    = "formato inválido";
                        echo json_encode($resp);
                        exit;
                    }else if($foto['size'] > 2097152){   
                		$resp['msg']    = "arquivo grande";
                        echo json_encode($resp);
                        exit;
                        
                        /*$source_path = $foto;
                        $destination_path = "uploads";
                        $quality = 6;
                        
                        $info = getimagesize($source_path);
    
                        if ($info['mime'] == 'image/jpeg') {
                            $image = imagecreatefromjpeg($source_path);
                        } elseif ($info['mime'] == 'image/png') {
                            $image = imagecreatefrompng($source_path);
                        }
                    
                        imagejpeg($image, $destination_path, $quality);
                    
                        //$img = $destination_path;
                        
                        //$img = compressImage($foto["name"], "uploads/compressed_praia.jpg", 6);

                        
                        $message = '<div class="alert alert-danger" role="alert">'.$info.'</div>';
                        */
                        //$message = '<div class="alert alert-danger" role="alert"><center>Erro: <b>Tamanho de imagem muito grande - COMPROVANTE COMPLETO.</b></center></div>';
                		
                		
             		}else{
                     	// Verifica extensão do arquivo
                        //$extensao = strrchr($foto["type"], '.');
                        $extensao = pathinfo($foto["name"], PATHINFO_EXTENSION);
                        
                        //if($resultado){
                            //preg_match("/\.(gif|bmp|png|jpg|jpeg){1}$/i", $foto["name"], $ext);
                    		$nome_imagem = md5(uniqid(time())) . "." . $extensao;
                    		$caminho_imagem = "documentos/" . $nome_imagem;
                    		//$caminho_imagem = "documentos/" . $resultado;
                    		
                    		if($Dusuario->comprovante_residencia_completo != ''){
                                unlink('documentos/'.$Dusuario->comprovante_residencia_completo);
                            }
                            
                    		move_uploaded_file($foto["tmp_name"], $caminho_imagem);
            
                            if($Dusuario->rg_frente != '' && $Dusuario->rg_verso != '' && $Dusuario->selfie != '' && $Dusuario->comprovante_residencia != ''){
                    	        $status = 'Em Análise';
                            }else if($Dusuario->cnh_frente != '' && $Dusuario->cnh_verso != '' && $Dusuario->selfie != '' && $Dusuario->comprovante_residencia){
                    	        $status = 'Em Análise';    
                    	    }else{
                    	        $status = 'Pendente';
                    	    }
                    	    
                                	
                            usuarioModel::where('usuario_id', $usuario)->update(array('comprovante_residencia_completo'=>$nome_imagem,'documento_status'=>$status,'documento_data'=>$now));
                            
                            //$message = '<div class="alert alert-success" role="alert"><center>Sucesso! <b>Comprovante de Residência (Completo) enviado com sucesso.</b></center></div>';
                            $resp['msg']    = "sucesso";
                            echo json_encode($resp);
                            exit;
                        /*}else{
                            $resp['msg']    = "erro";
                            echo json_encode($resp);
                            exit;    
                        }*/
             		}
                }
			}
	    }
	    
	    if(isset($_POST['_csrfcomp'])){
	        if(isset($_FILES)){
	            $foto = $_FILES["comprovante"];
	            
	            if(empty($foto["name"])) {
                    //$message = '<div class="alert alert-danger" role="alert"><center>Erro: <b>Nenhuma imagem selecionada.</b></center></div>';
                    $resp['msg']    = "sem foto";
                    echo json_encode($resp);
                    exit;
                }else{
                    if(!preg_match("/^image\/(pjpeg|jpeg|png|gif|bmp)$/", $foto["type"])){
              	   	    //$message = '<div class="alert alert-danger" role="alert"><center>Erro: <b>Formato de imagem inválido.</b></center></div>';
              	   	    $resp['msg']    = "formato inválido";
                        echo json_encode($resp);
                        exit;
                    }else if($foto['size'] > 2097152){   
                		//$message = '<div class="alert alert-danger" role="alert"><center>Erro: <b>Tamanho de imagem muito grande.</b></center></div>';
                		$resp['msg']    = "arquivo grande";
                        echo json_encode($resp);
                        exit;
             		}else{
                     	// Verifica extensão do arquivo
                        //$extensao = strrchr($foto["type"], '.');
                        $extensao = pathinfo($foto["name"], PATHINFO_EXTENSION);
                        
                        //if($resultado){
                            //preg_match("/\.(gif|bmp|png|jpg|jpeg){1}$/i", $foto["name"], $ext);
                    		$nome_imagem = md5(uniqid(time())) . "." . $extensao;
                    		$caminho_imagem = "documentos/" . $nome_imagem;
                    		//$caminho_imagem = "documentos/" . $resultado;
                    		
                    		if($Dusuario->comprovante_residencia != ''){
                                unlink('documentos/'.$Dusuario->comprovante_residencia);
                            }
                            
                    		move_uploaded_file($foto["tmp_name"], $caminho_imagem);
            
                            if($Dusuario->rg_frente != '' && $Dusuario->rg_verso != '' && $Dusuario->selfie != '' && $Dusuario->comprovante_residencia_completo){
                    	        $status = 'Em Análise';
                            }else if($Dusuario->cnh_frente != '' && $Dusuario->cnh_verso != '' && $Dusuario->selfie != '' && $Dusuario->comprovante_residencia_completo){
                    	        $status = 'Em Análise';    
                    	    }else{
                    	        $status = 'Pendente';
                    	    }
                    	    
                                	
                            usuarioModel::where('usuario_id', $usuario)->update(array('comprovante_residencia'=>$nome_imagem,'documento_status'=>$status,'documento_data'=>$now));
                            
                            
                            //$message = '<div class="alert alert-success" role="alert"><center>Sucesso! <b>Comprovante de Residência (Endereço) enviado com sucesso.</b></center></div>';
                            $resp['msg']    = "sucesso";
                            echo json_encode($resp);
                            exit;
                        /*}else{
                            $resp['msg']    = "erro";
                            echo json_encode($resp);
                            exit;    
                        }*/
             		}
                }
			}
	    }
	    
	    if(isset($_POST['_csrfrgf'])){
	        if(isset($_FILES)){
	            $foto = $_FILES["rg_frente"];
	                  
                if(empty($foto["name"])) {
                    //$message = '<div class="alert alert-danger" role="alert"><center><b>Nenhuma imagem selecionada.</b></center></div>';
                    $resp['msg']    = "sem foto";
                    echo json_encode($resp);
                    exit;
                }else{
                    if(!preg_match("/^image\/(pjpeg|jpeg|png|gif|bmp)$/", $foto["type"])){
              	   	    //$message = '<div class="alert alert-danger" role="alert"><center>Erro: <b>Formato de imagem inválido.</b></center></div>';
              	   	    $resp['msg']    = "formato inválido";
                        echo json_encode($resp);
                        exit;
                    }else if($foto['size'] > 2097152){   
                		//$message = '<div class="alert alert-danger" role="alert"><center>Erro: <b>Tamanho de imagem muito grande.</b></center></div>';
                		$resp['msg']    = "arquivo grande";
                        echo json_encode($resp);
                        exit;
             		}else{
                     	// Verifica extensão do arquivo
                        $extensao = pathinfo($foto["name"], PATHINFO_EXTENSION);
                        
                        /*if($extensao == 'png'){
                            $funcao_cria_imagem = 'imagecreatefrompng';
                            $funcao_salva_imagem = 'imagepng';
                        }else if($extensao == 'gif'){
                            $funcao_cria_imagem = 'imagecreatefromgif';
                            $funcao_salva_imagem = 'imagegif';
                        }else if($extensao == 'jpg'){
                            $funcao_cria_imagem = 'imagecreatefromjpeg';
                            $funcao_salva_imagem = 'imagejpeg';
                        }else{
                            $resp['msg']    = "formato inválido";
                            echo json_encode($resp);
                            exit;
                        }
                        
                        $largura = 114;
                        $altura = 45;
                        
                        // Cria um identificador para nova imagem
                        $imagem_original = $funcao_cria_imagem($foto["name"]);
                            
                        // Salva o tamanho antigo da imagem
                        list($largura_antiga, $altura_antiga) = getimagesize($foto["name"]);
                            
                        // Cria uma nova imagem com o tamanho indicado
                        // Esta imagem servirá de base para a imagem a ser reduzida
                        $imagem_tmp = imagecreatetruecolor($largura, $altura);
                            
                        // Faz a interpolação da imagem base com a imagem original
                        imagecopyresampled($imagem_tmp, $imagem_original, 0, 0, 0, 0, $largura, $altura, $largura_antiga, $altura_antiga);
                            
                        // Salva a nova imagem
                        $resultado = $funcao_salva_imagem($imagem_tmp, "imagem_nova$extensao");
                            
                        // Libera memoria
                        imagedestroy($imagem_original);
                        imagedestroy($imagem_tmp);
                            
                        if($resultado){*/
                            //preg_match("/\.(gif|bmp|png|jpg|jpeg){1}$/i", $foto["name"], $ext);
                    		$nome_imagem = md5(uniqid(time())) . "." . $extensao;
                    		$caminho_imagem = "documentos/" . $nome_imagem;
                    		
                    		if($Dusuario->rg_frente != ''){
                                unlink('documentos/'.$Dusuario->rg_frente);
                            }
                            
                    		move_uploaded_file($foto["tmp_name"], $caminho_imagem);
                             
                            if($Dusuario->selfie != '' && $Dusuario->rg_verso != '' && $Dusuario->comprovante_residencia != '' && $Dusuario->comprovante_residencia_completo){
                    	        $status = 'Em Análise';    
                    	    }else{
                    	        $status = 'Pendente';
                    	    } 
                                	
                            usuarioModel::where('usuario_id', $usuario)->update(array('rg_frente'=>$nome_imagem,'documento_status'=>$status,'documento_data'=>$now));
                        	
                        	
                        	//$message = '<div class="alert alert-success" role="alert"><center>Sucesso! <b>RG Frente enviado com sucesso.</b></center></div>';
                            $resp['msg']    = "sucesso";
                            echo json_encode($resp);
                            exit;
                        /*}else{
                            $resp['msg']    = "erro";
                            echo json_encode($resp);
                            exit;    
                        }*/
                    }
                }
			}
	    }
	    
	    if(isset($_POST['_csrfrgv'])){
	        if(isset($_FILES)){
	            $foto = $_FILES["rg_verso"];
	                  
                if(empty($foto["name"])) {
                    //$message = '<div class="alert alert-danger" role="alert"><center><b>Nenhuma imagem selecionada.</b></center></div>';
                    $resp['msg']    = "sem foto";
                    echo json_encode($resp);
                    exit;
                }else{
                    if(!preg_match("/^image\/(pjpeg|jpeg|png|gif|bmp)$/", $foto["type"])){
              	   	    //$message = '<div class="alert alert-danger" role="alert"><center>Erro: <b>Formato de imagem inválido.</b></center></div>';
              	   	    $resp['msg']    = "formato inválido";
                        echo json_encode($resp);
                        exit;
                    }else if($foto['size'] > 2097152){   
                		//$message = '<div class="alert alert-danger" role="alert"><center>Erro: <b>Tamanho de imagem muito grande.</b></center></div>';
                		$resp['msg']    = "arquivo grande";
                        echo json_encode($resp);
                        exit;
             		}else{
                     	// Verifica extensão do arquivo
                        $extensao = pathinfo($foto["name"], PATHINFO_EXTENSION);
                        
                            
                        //if($resultado){
                            //preg_match("/\.(gif|bmp|png|jpg|jpeg){1}$/i", $foto["name"], $ext);
                    		$nome_imagem = md5(uniqid(time())) . "." . $extensao;
                    		$caminho_imagem = "documentos/" . $nome_imagem;
                    		
                    		if($Dusuario->rg_verso != ''){
                                unlink('documentos/'.$Dusuario->rg_verso);
                            }
                            
                    		move_uploaded_file($foto["tmp_name"], $caminho_imagem);
                            
                            if($Dusuario->selfie != '' && $Dusuario->rg_frente != '' && $Dusuario->comprovante_residencia != '' && $Dusuario->comprovante_residencia_completo){
                    	        $status = 'Em Análise';    
                    	    }else{
                    	        $status = 'Pendente';
                    	    } 
                                	
                            usuarioModel::where('usuario_id', $usuario)->update(array('rg_verso'=>$nome_imagem,'documento_status'=>$status,'documento_data'=>$now));
                        	
                        	
                        	//$message = '<div class="alert alert-success" role="alert"><center>Sucesso! <b>RG Verso enviado com sucesso.</b></center></div>';
                        		                	
                            $resp['msg']    = "sucesso";
                            echo json_encode($resp);
                            exit;
                        /*}else{
                            $resp['msg']    = "erro";
                            echo json_encode($resp);
                            exit;    
                        }*/
             		}
                }
			}
	    }
	    
	    if(isset($_POST['_csrfcnhf'])){
	        if(isset($_FILES)){
	            $foto = $_FILES["cnh_frente"];
	                  
                if(empty($foto["name"])) {
                    //$message = '<div class="alert alert-danger" role="alert"><center><b>Nenhuma imagem selecionada.</b></center></div>';
                    $resp['msg']    = "sem foto";
                    echo json_encode($resp);
                    exit;
                }else{
                    if(!preg_match("/^image\/(pjpeg|jpeg|png|gif|bmp)$/", $foto["type"])){
              	   	    //$message = '<div class="alert alert-danger" role="alert"><center>Erro: <b>Formato de imagem inválido.</b></center></div>';
              	   	    $resp['msg']    = "formato inválido";
                        echo json_encode($resp);
                        exit;
                    }else if($foto['size'] > 2097152){   
                		//$message = '<div class="alert alert-danger" role="alert"><center>Erro: <b>Tamanho de imagem muito grande.</b></center></div>';
                		$resp['msg']    = "arquivo grande";
                        echo json_encode($resp);
                        exit;
             		}else{
                     	// Verifica extensão do arquivo
                        $extensao = pathinfo($foto["name"], PATHINFO_EXTENSION);
                    
                            
                        //if($resultado){
                            //preg_match("/\.(gif|bmp|png|jpg|jpeg){1}$/i", $foto["name"], $ext);
                    		$nome_imagem = md5(uniqid(time())) . "." . $extensao;
                    		$caminho_imagem = "documentos/" . $nome_imagem;
                    		
                    		if($Dusuario->cnh_frente != ''){
                                unlink('documentos/'.$Dusuario->cnh_frente);
                            }
                    		
                    		move_uploaded_file($foto["tmp_name"], $caminho_imagem);
                            
                            if($Dusuario->selfie != '' && $Dusuario->cnh_verso != '' && $Dusuario->comprovante_residencia != '' && $Dusuario->comprovante_residencia_completo){
                    	        $status = 'Em Análise';    
                    	    }else{
                    	        $status = 'Pendente';
                    	    } 
                                	
                            usuarioModel::where('usuario_id', $usuario)->update(array('cnh_frente'=>$nome_imagem,'documento_status'=>$status,'documento_data'=>$now));
                        	
                        	
                        	//$message = '<div class="alert alert-success" role="alert"><center>Sucesso! <b>CNH Frente enviado com sucesso.</b></center></div>';
                        	
                            $resp['msg']    = "sucesso";
                            echo json_encode($resp);
                            exit;
                        /*}else{
                            $resp['msg']    = "erro";
                            echo json_encode($resp);
                            exit;    
                        }*/
                    }
                }
			}
	    }
	    
	    if(isset($_POST['_csrfcnhv'])){
	        if(isset($_FILES)){
	            $foto = $_FILES["cnh_verso"];
	                  
                if(empty($foto["name"])) {
                    //$message = '<div class="alert alert-danger" role="alert"><center><b>Nenhuma imagem selecionada.</b></center></div>';
                    $resp['msg']    = "sem foto";
                    echo json_encode($resp);
                    exit;
                }else{
                    if(!preg_match("/^image\/(pjpeg|jpeg|png|gif|bmp)$/", $foto["type"])){
              	   	    //$message = '<div class="alert alert-danger" role="alert"><center>Erro: <b>Formato de imagem inválido.</b></center></div>';
              	   	    $resp['msg']    = "formato inválido";
                        echo json_encode($resp);
                        exit;
                    }else if($foto['size'] > 2097152){   
                		//$message = '<div class="alert alert-danger" role="alert"><center>Erro: <b>Tamanho de imagem muito grande.</b></center></div>';
                		$resp['msg']    = "arquivo grande";
                        echo json_encode($resp);
                        exit;
             		}else{
                     	// Verifica extensão do arquivo
                        $extensao = pathinfo($foto["name"], PATHINFO_EXTENSION);
                        
                        //if($resultado){
                            //preg_match("/\.(gif|bmp|png|jpg|jpeg){1}$/i", $foto["name"], $ext);
                    		$nome_imagem = md5(uniqid(time())) . "." . $extensao;
                    		$caminho_imagem = "documentos/" . $nome_imagem;
                    		
                    		if($Dusuario->cnh_verso != ''){
                                unlink('documentos/'.$Dusuario->cnh_verso);
                            }
                    		
                    		move_uploaded_file($foto["tmp_name"], $caminho_imagem);
                            
                            if($Dusuario->selfie != '' && $Dusuario->cnh_frente != '' && $Dusuario->comprovante_residencia != '' && $Dusuario->comprovante_residencia_completo){
                    	        $status = 'Em Análise';    
                    	    }else{
                    	        $status = 'Pendente';
                    	    } 
                                	
                            usuarioModel::where('usuario_id', $usuario)->update(array('cnh_verso'=>$nome_imagem,'documento_status'=>$status,'documento_data'=>$now));
                        	
                        	//$message = '<div class="alert alert-success" role="alert"><center>Sucesso! <b>CNH Verso enviado com sucesso.</b></center></div>';
                        		                	
                            $resp['msg']    = "sucesso";
                            echo json_encode($resp);
                            exit;
                        /*}else{
                            $resp['msg']    = "erro";
                            echo json_encode($resp);
                            exit;    
                        }*/
                    }
                }
			}
	    }
	
	    if(isset($_POST['_csrfi'])):
            if(isset($_FILES)){
            	$foto = $_FILES["file"];
                        
                if (empty($foto["name"])) {
                    //$message = '<div class="alert alert-danger" role="alert"><center><b>Nenhuma imagem selecionada.</b></center></div>';
                    $resp['msg']    = "sem foto";
                    echo json_encode($resp);
                    exit;
                }else{
                 	if(!preg_match("/^image\/(pjpeg|jpeg|png|gif|bmp)$/", $foto["type"])){
              	   	    $resp['msg']    = "formato inválido";
                        echo json_encode($resp);
                        exit;
                    }else if($foto['size'] > 2097152){   
                		$resp['msg']    = "arquivo grande";
                        echo json_encode($resp);
                        exit;
             		}else{
    					preg_match("/\.(gif|bmp|png|jpg|jpeg){1}$/i", $_FILES['file']["name"], $ext);
                		$nome_imagem = md5(uniqid(time())) . "." . $ext[1];
                		$caminho_imagem = "perfil/" . $nome_imagem;
                		move_uploaded_file($_FILES['file']["tmp_name"], $caminho_imagem);
                            	
                        usuarioModel::where('usuario_id', $usuario)->update(array('foto'=>$nome_imagem));
            				                	
                        //$message = '<div class="alert alert-success" role="alert"><center><b>Foto alterada com sucesso.</b></center></div>';
                        header("Refresh:2");
                        
                        $resp['msg']    = "sucesso";
                        echo json_encode($resp);
                        exit;
             		}
                }
			}
		endif;
		
	
		return $this->view->render($res,'cliente/verificar_conta.html',array('baseurl'=>base_url ,'message'=> $message,'dados'=>$dados));
	}
	
	function alterar_carteira($req,$res,$args){
		$message = '';
		$usuario = $_SESSION['id'];
		$Dusuario = usuarioModel::where('usuario_id', $usuario)->get()[0];
		
        if($usuario == ''){
            $url = $this->router->pathFor('login');
		    return $res->withStatus(200)->withHeader('Location', $url);
        }
        
        if($Dusuario->pin == ''){
           $url = $this->router->pathFor('pin');
		   return $res->withStatus(200)->withHeader('Location', $url);
        }

    		
        //$dados['Carteira'] = $Dusuario->carteira;
		$dados['Usuario'] = $Dusuario->usuario; 
		$dados['Foto'] = $Dusuario->foto; 
		$dados['Nome'] = $Dusuario->nome; 
		$dados['Patrocinador'] = $Dusuario->patrocinador; 
		$dados['Email'] = $Dusuario->email; 
		$dados['Cpf'] = $Dusuario->cpf; 
		$dados['Whatsapp'] = $Dusuario->whatsapp; 
		$dados['Cadastro'] = date("d/m/Y H:i:s", strtotime($Dusuario->data_cadastro));
		$dados['Acesso'] = $Dusuario->acesso;
		$dados['Status_cadastro'] = $Dusuario->status_cadastro;
		$dados['Genero'] = $Dusuario->genero;
		$dados['Nascimento'] = $Dusuario->nascimento;
		$dados['Estado_civil'] = $Dusuario->estado_civil;
		$dados['Ip'] = $Dusuario->ip;
	    $dados['Documento_status'] = $Dusuario->documento_status;
	    $dados['Documento_motivo'] = $Dusuario->documento_motivo;
	    
		$dados['Selfie'] = $Dusuario->selfie;
		$dados['Comprovante'] = $Dusuario->comprovante_residencia;
		$dados['Comprovante_completo'] = $Dusuario->comprovante_residencia_completo;
		$dados['Rg_frente'] = $Dusuario->rg_frente;
		$dados['Rg_verso'] = $Dusuario->rg_verso;
		$dados['Cnh_frente'] = $Dusuario->cnh_frente;
		$dados['Cnh_verso'] = $Dusuario->cnh_verso;
		
		
		if(isset($_POST['reenviar'])){
	        usuarioModel::where('usuario_id', $usuario)->update(array('documento_status'=>'Pendente','documento_motivo'=>NULL));
                        
            //$message = '<div class="alert alert-success" role="alert"><center><b>Foto alterada com sucesso.</b></center></div>';
            header("Refresh:0");            
            
            //$resp['msg']    = "sucesso";
            //echo json_encode($resp);
            //exit;
	    }
		
	    if(isset($_POST['_csrfselfie'])){
	        if(isset($_FILES)){
	            $foto = $_FILES["selfie"];
	            //$rg_frente = $_FILES["rg_frente"];
	            //$rg_verso = $_FILES["rg_verso"];
	            
	            if(empty($foto["name"])) {
                    $resp['msg']    = "sem foto";
                    echo json_encode($resp);
                    exit;
                }else{
                    if(!preg_match("/^image\/(pjpeg|jpeg|png|gif|bmp)$/", $foto["type"])){
              	   	    $resp['msg']    = "formato inválido";
                        echo json_encode($resp);
                        exit;
                    //}else if($foto['size'] > 2097152){   
                    }else if($foto['size'] > 20971520){   
                		$resp['msg']    = "arquivo grande";
                        echo json_encode($resp);
                        exit;
             		}else{
                     	// Verifica extensão do arquivo
                        //$extensao = strrchr($foto["type"], '.');
                        $extensao = pathinfo($foto["name"], PATHINFO_EXTENSION);
                        
                        //if($resultado){
                            //preg_match("/\.(gif|bmp|png|jpg|jpeg){1}$/i", $foto["name"], $ext);
                    		$nome_imagem = md5(uniqid(time())) . "." . $extensao;
                    		$caminho_imagem = "documentos/" . $nome_imagem;
                    		//$caminho_imagem = "documentos/" . $resultado;
                    		
                    		
                    		if($Dusuario->selfie != ''){
                                unlink('documentos/'.$Dusuario->selfie);
                            }
                    		
                    		move_uploaded_file($foto["tmp_name"], $caminho_imagem);
            
                            if($Dusuario->rg_frente != '' && $Dusuario->rg_verso != '' && $Dusuario->comprovante_residencia != '' && $Dusuario->comprovante_residencia_completo){
                    	        $status = 'Em Análise';
                            }else if($Dusuario->cnh_frente != '' && $Dusuario->cnh_verso != '' && $Dusuario->comprovante_residencia != '' && $Dusuario->comprovante_residencia_completo){
                    	        $status = 'Em Análise';    
                    	    }else{
                    	        $status = 'Pendente';
                    	    }
                    	    
                                	
                            usuarioModel::where('usuario_id', $usuario)->update(array('selfie'=>$nome_imagem,'documento_status'=>$status,'documento_data'=>$now));
                        
                            $resp['msg']    = "sucesso";
                            echo json_encode($resp);
                            exit;
                        /*}else{
                            $resp['msg']    = "erro";
                            echo json_encode($resp);
                            exit;    
                        }*/
             		}
                }
			}
	    }
	    
	    if(isset($_POST['_csrfrgf'])){
	        if(isset($_FILES)){
	            $foto = $_FILES["rg_frente"];
	                  
                if(empty($foto["name"])) {
                    $resp['msg']    = "sem foto";
                    echo json_encode($resp);
                    exit;
                }else{
                    if(!preg_match("/^image\/(pjpeg|jpeg|png|gif|bmp)$/", $foto["type"])){
              	   	    $resp['msg']    = "formato inválido";
                        echo json_encode($resp);
                        exit;
                    }else if($foto['size'] > 2097152){   
                		$resp['msg']    = "arquivo grande";
                        echo json_encode($resp);
                        exit;
             		}else{
                     	// Verifica extensão do arquivo
                        $extensao = pathinfo($foto["name"], PATHINFO_EXTENSION);
                        
                            //preg_match("/\.(gif|bmp|png|jpg|jpeg){1}$/i", $foto["name"], $ext);
                    		$nome_imagem = md5(uniqid(time())) . "." . $extensao;
                    		$caminho_imagem = "documentos/" . $nome_imagem;
                    		
                    		if($Dusuario->rg_frente != ''){
                                unlink('documentos/'.$Dusuario->rg_frente);
                            }
                            
                    		move_uploaded_file($foto["tmp_name"], $caminho_imagem);
                             
                            if($Dusuario->selfie != '' && $Dusuario->rg_verso != '' && $Dusuario->comprovante_residencia != '' && $Dusuario->comprovante_residencia_completo){
                    	        $status = 'Em Análise';    
                    	    }else{
                    	        $status = 'Pendente';
                    	    } 
                                	
                            usuarioModel::where('usuario_id', $usuario)->update(array('rg_frente'=>$nome_imagem,'documento_status'=>$status,'documento_data'=>$now));
                        	
                            $resp['msg']    = "sucesso";
                            echo json_encode($resp);
                            exit;
                    }
                }
			}
	    }
	    
	    if(isset($_POST['_csrfrgv'])){
	        if(isset($_FILES)){
	            $foto = $_FILES["rg_verso"];
	                  
                if(empty($foto["name"])) {
                    $resp['msg']    = "sem foto";
                    echo json_encode($resp);
                    exit;
                }else{
                    if(!preg_match("/^image\/(pjpeg|jpeg|png|gif|bmp)$/", $foto["type"])){
              	   	    $resp['msg']    = "formato inválido";
                        echo json_encode($resp);
                        exit;
                    }else if($foto['size'] > 2097152){   
                		$resp['msg']    = "arquivo grande";
                        echo json_encode($resp);
                        exit;
             		}else{
                     	// Verifica extensão do arquivo
                        $extensao = pathinfo($foto["name"], PATHINFO_EXTENSION);
                        
                            //preg_match("/\.(gif|bmp|png|jpg|jpeg){1}$/i", $foto["name"], $ext);
                    		$nome_imagem = md5(uniqid(time())) . "." . $extensao;
                    		$caminho_imagem = "documentos/" . $nome_imagem;
                    		
                    		if($Dusuario->rg_verso != ''){
                                unlink('documentos/'.$Dusuario->rg_verso);
                            }
                            
                    		move_uploaded_file($foto["tmp_name"], $caminho_imagem);
                            
                            if($Dusuario->selfie != '' && $Dusuario->rg_frente != '' && $Dusuario->comprovante_residencia != '' && $Dusuario->comprovante_residencia_completo){
                    	        $status = 'Em Análise';    
                    	    }else{
                    	        $status = 'Pendente';
                    	    } 
                                	
                            usuarioModel::where('usuario_id', $usuario)->update(array('rg_verso'=>$nome_imagem,'documento_status'=>$status,'documento_data'=>$now));
                        		                	
                            $resp['msg']    = "sucesso";
                            echo json_encode($resp);
                            exit;
             		}
                }
			}
	    }
	    
	    if(isset($_POST['_csrfcnhf'])){
	        if(isset($_FILES)){
	            $foto = $_FILES["cnh_frente"];
	                  
                if(empty($foto["name"])) {
                    $resp['msg']    = "sem foto";
                    echo json_encode($resp);
                    exit;
                }else{
                    if(!preg_match("/^image\/(pjpeg|jpeg|png|gif|bmp)$/", $foto["type"])){
              	   	    $resp['msg']    = "formato inválido";
                        echo json_encode($resp);
                        exit;
                    }else if($foto['size'] > 2097152){   
                		$resp['msg']    = "arquivo grande";
                        echo json_encode($resp);
                        exit;
             		}else{
                     	// Verifica extensão do arquivo
                        $extensao = pathinfo($foto["name"], PATHINFO_EXTENSION);
                    
                            
                            //preg_match("/\.(gif|bmp|png|jpg|jpeg){1}$/i", $foto["name"], $ext);
                    		$nome_imagem = md5(uniqid(time())) . "." . $extensao;
                    		$caminho_imagem = "documentos/" . $nome_imagem;
                    		
                    		if($Dusuario->cnh_frente != ''){
                                unlink('documentos/'.$Dusuario->cnh_frente);
                            }
                    		
                    		move_uploaded_file($foto["tmp_name"], $caminho_imagem);
                            
                            if($Dusuario->selfie != '' && $Dusuario->cnh_verso != '' && $Dusuario->comprovante_residencia != '' && $Dusuario->comprovante_residencia_completo){
                    	        $status = 'Em Análise';    
                    	    }else{
                    	        $status = 'Pendente';
                    	    } 
                                	
                            usuarioModel::where('usuario_id', $usuario)->update(array('cnh_frente'=>$nome_imagem,'documento_status'=>$status,'documento_data'=>$now));
                        		                	
                            $resp['msg']    = "sucesso";
                            echo json_encode($resp);
                            exit;
                    }
                }
			}
	    }
	    
	    if(isset($_POST['_csrfcnhv'])){
	        if(isset($_FILES)){
	            $foto = $_FILES["cnh_verso"];
	                  
                if(empty($foto["name"])) {
                    $resp['msg']    = "sem foto";
                    echo json_encode($resp);
                    exit;
                }else{
                    if(!preg_match("/^image\/(pjpeg|jpeg|png|gif|bmp)$/", $foto["type"])){
              	   	    $resp['msg']    = "formato inválido";
                        echo json_encode($resp);
                        exit;
                    }else if($foto['size'] > 2097152){   
                		$resp['msg']    = "arquivo grande";
                        echo json_encode($resp);
                        exit;
             		}else{
                     	// Verifica extensão do arquivo
                        $extensao = pathinfo($foto["name"], PATHINFO_EXTENSION);
                        
                            //preg_match("/\.(gif|bmp|png|jpg|jpeg){1}$/i", $foto["name"], $ext);
                    		$nome_imagem = md5(uniqid(time())) . "." . $extensao;
                    		$caminho_imagem = "documentos/" . $nome_imagem;
                    		
                    		if($Dusuario->cnh_verso != ''){
                                unlink('documentos/'.$Dusuario->cnh_verso);
                            }
                    		
                    		move_uploaded_file($foto["tmp_name"], $caminho_imagem);
                            
                            if($Dusuario->selfie != '' && $Dusuario->cnh_frente != '' && $Dusuario->comprovante_residencia != '' && $Dusuario->comprovante_residencia_completo){
                    	        $status = 'Em Análise';    
                    	    }else{
                    	        $status = 'Pendente';
                    	    } 
                                	
                            usuarioModel::where('usuario_id', $usuario)->update(array('cnh_verso'=>$nome_imagem,'documento_status'=>$status,'documento_data'=>$now));
                        		                	
                            $resp['msg']    = "sucesso";
                            echo json_encode($resp);
                            exit;
                    }
                }
			}
	    }
	
	    if(isset($_POST['_csrfi'])):
            if(isset($_FILES)){
            	$foto = $_FILES["file"];
                        
                if (empty($foto["name"])) {
                    //$message = '<div class="alert alert-danger" role="alert"><center><b>Nenhuma imagem selecionada.</b></center></div>';
                    $resp['msg']    = "sem foto";
                    echo json_encode($resp);
                    exit;
                }else{
                 	if(!preg_match("/^image\/(pjpeg|jpeg|png|gif|bmp)$/", $foto["type"])){
              	   	    $resp['msg']    = "formato inválido";
                        echo json_encode($resp);
                        exit;
                    }else if($foto['size'] > 2097152){   
                		$resp['msg']    = "arquivo grande";
                        echo json_encode($resp);
                        exit;
             		}else{
    					preg_match("/\.(gif|bmp|png|jpg|jpeg){1}$/i", $_FILES['file']["name"], $ext);
                		$nome_imagem = md5(uniqid(time())) . "." . $ext[1];
                		$caminho_imagem = "perfil/" . $nome_imagem;
                		move_uploaded_file($_FILES['file']["tmp_name"], $caminho_imagem);
                            	
                        usuarioModel::where('usuario_id', $usuario)->update(array('foto'=>$nome_imagem));
            				                	
                        //$message = '<div class="alert alert-success" role="alert"><center><b>Foto alterada com sucesso.</b></center></div>';
                        header("Refresh:2");
                        
                        $resp['msg']    = "sucesso";
                        echo json_encode($resp);
                        exit;
             		}
                }
			}
		endif;
		
	
		return $this->view->render($res,'cliente/alterar_carteira.html',array('baseurl'=>base_url ,'message'=> $message,'dados'=>$dados));
	}

	function alterar_senha($req,$res,$args){
		$message = '';
		$usuario = $_SESSION['id'];
		$Dusuario = usuarioModel::where('usuario_id', $usuario)->get()[0];
	
        if($Dusuario->acesso == 'Investidor'){
	        if($_SESSION['admin_id'] != $_SESSION['id']){
    	        $dados['Acesso_admin'] = 'Sim';
    	    }
	    }

        if($usuario == ''){
            $url = $this->router->pathFor('login');
		    return $res->withStatus(200)->withHeader('Location', $url);
        }

        
		$dados['Carteira'] = $Dusuario->carteira;
		$dados['Usuario'] = $Dusuario->usuario; 
		$dados['Foto'] = $Dusuario->foto; 
		$dados['Nome'] = $Dusuario->nome; 
		$dados['Patrocinador'] = $Dusuario->patrocinador; 
		$dados['Email'] = $Dusuario->email; 
		$dados['Cpf'] = $Dusuario->cpf; 
		$dados['Whatsapp'] = $Dusuario->whatsapp; 
		$dados['Cadastro'] = date("d/m/Y H:i:s", strtotime($Dusuario->data_cadastro));
		$dados['Acesso'] = $Dusuario->acesso;
		$dados['Status_cadastro'] = $Dusuario->status_cadastro;
		$dados['Genero'] = $Dusuario->genero;
		
		$pratDate = usuarioModel::where('usuario', $Dusuario->patrocinador)->get()[0];
		$dados['NomeP'] = $pratDate->nome;
		$dados['EmailP'] = $pratDate->email;
		

        /*if(isset($_POST['alterar'])){
			$senha = $_POST['senha'];
			$senha2 = $_POST['csenha'];

            //echo 'senhaDiferente';
            //die();
            
            if($senha != $senha2){
                //echo 'senhaDiferente';
                //die();           
                $message = '<div class="col-12 text-left alert alert-warning"><center>As senhas são diferentes.</center></div>';
            }else{
			    usuarioModel::where('usuario_id', $usuario)->update(array('senha'=>md5($_POST['senha'])));
			    //echo 'senhaAlterada';
                //die();
                
                $message = '<div class="col-12 text-left alert alert-success"><center>Senha alterada com sucesso.</center></div>';
            }
			
		}*/
		
		return $this->view->render($res,'cliente/alterar_senha.html',array('baseurl'=>base_url ,'message'=> $message,'dados'=>$dados));
	}


    /*---------------------------------------------------------*/

    /*function retornar_escritorio($req,$res,$args){
        //echo $_SESSION['ant_id'];
        //if(isset($_SESSION['ant_id'])){
            $_SESSION['id'] = $_SESSION['ant_id'];    
            header("Refresh:0; url=../../../painel");    
	    //}
    }*/
    
    function backoffice($req,$res,$args){
	    $usuario = $_SESSION['id'];    
	    $Dusuario = usuarioModel::where('usuario_id', $usuario)->get()[0];
	    
	    $now = date("Y-m-d 00:00:00");
		$now2 = date("Y-m-d");
		$agora = date("H");
		
		if(isset($args['id'])){
    		$usuario     = $args['id'];
    		$us = usuarioModel::where('usuario', $usuario)->get()[0];
    		
    		$_SESSION['id'] = $us->usuario_id;
    	    //header("Refresh:0;");    	
		}
		
		/*if(isset($args['id'])){
	        $_SESSION['id'] = $args['id'];    
	        $dados['antigo_id'] = $_SESSION['antigo_id'];
	    }*/
	    
	    if(isset($_SESSION['antigo_id'])){
	        $dados['antigo_id'] = $_SESSION['antigo_id'];
	    }
	    
		$dados['Id'] = $Dusuario->usuario_id;
		$dados['Nome'] = $Dusuario->nome;
		$dados['Usuario'] = $Dusuario->usuario;
		$dados['Cadastro'] = date("d/m/Y H:i:s", strtotime($Dusuario->data_cadastro));
		$dados['Email'] = $Dusuario->email;
		$dados['Acesso'] = $Dusuario->acesso;
		$dados['Carteira_pontos'] = $Dusuario->carteira_pontos;
		$dados['Whatsapp'] = $Dusuario->whatsapp;
		$dados['Cpf'] = $Dusuario->cpf;
		$dados['Foto'] = $Dusuario->foto;
		$dados['Genero'] = $Dusuario->genero;
		
		$patro = usuarioModel::where('usuario', $Dusuario->patrocinador)->get()[0];
		$dados['UsuarioP'] = $patro->usuario;
		$dados['IdP'] = $patro->usuario_id;
		$dados['NomeP'] = $patro->nome;
		$dados['GeneroP'] = $patro->genero;
		$dados['WhatsappP'] = $patro->whatsapp;
		$dados['FotoP'] = $patro->foto;
		
	    if($Dusuario->acesso == 'Investidor'){
	        if($_SESSION['admin_id'] != $_SESSION['id']){
    	        $dados['Acesso_admin'] = 'Sim';
    	        $_SESSION['an\t_id'] = $_SESSION['admin_id'];
    	    }
	    }
	    

        if($usuario == ''){
           $url = $this->router->pathFor('login');
		   return $res->withStatus(200)->withHeader('Location', $url);
        }
        
        if($Dusuario->pin == ''){
           $url = $this->router->pathFor('pin');
		   return $res->withStatus(200)->withHeader('Location', $url);
        }
		
		$dados['Cadastrados'] = usuarioModel::get()->count();
		if($Dusuario->usuario != 1){
		    $dados['IndicadosA'] = usuarioModel::where('patrocinador', $Dusuario->usuario)->where('status_cadastro','Ativo')->get()->count();
		}
		

		
		//$dados['Tinvestido'] = aporteModel::where('usuario_id',$usuario)->where('status','Ativo')->sum('investimento');
		$dados['Indicados'] = usuarioModel::where('patrocinador',$Dusuario->usuario)->count();
		
		$dados['Indicados1'] = usuarioModel::where('patrocinador',$Dusuario->usuario)->get();
		foreach ($dados['Indicados1'] as $key => $value) {
		    $value->hora_cadastro = date("H:i:s", strtotime($value->data_cadastro));     
            $value->data_cadastro = date("d/m/Y", strtotime($value->data_cadastro));  
            
            $ultimo = aporteModel::where('usuario_id',$value->usuario_id)->where('status', 'Ativo')->get()[0];
            $value->hora_ativo = date("H:i:s", strtotime($ultimo->data_investimento));     
            $value->data_ativo = date("d/m/Y", strtotime($ultimo->data_investimento)); 
        }
        
        $ptu = pontosModel::where('usuario_id',$usuario)->whereNull('patrocinador')->sum('pontos');
		$ptp = pontosModel::where('patrocinador',$usuario)->sum('pontos');
        $dados['Pontos'] = $ptu + $ptp;
        
        $dados['Bonus'] = 0;
        $cotacao = 0;
        
        
        $bonus = bonusModel::where('patrocinador',$usuario)->sum('valor');
        $dados['Bonus'] = number_format($bonus,8,".","");
        
        $saquesb = saqueModel::where('usuario_id',$usuario)->where('tipo','Bônus')->where('status','!=','Rejeitado')->sum('valor');
        $bonus_disponivel = $bonus - $saquesb;
        $dados['Bonus_disponivel'] = number_format($bonus_disponivel,8,".","");
        
        $lucro = rendimentoModel::where('usuario_id',$Dusuario->usuario_id)->sum('valor');
		$saquesl = saqueModel::where('usuario_id',$Dusuario->usuario_id)->where('tipo','Lucro')->where('status','!=','Rejeitado')->where('data_saque','<','2021-04-28')->sum('valor');
		$saquesl2 = saqueModel::where('usuario_id',$Dusuario->usuario_id)->where('tipo','Lucro')->where('status','!=','Rejeitado')->where('data_saque','>=','2021-04-28')->sum('valor');
		
		
		$rendimento_disponivel = $lucro - (($saquesl * 100) / 95) - $saquesl2;
		//$dados['Rendimento'] = number_format($lucro - (($saquesl * 100) / 90),8,".","");
		
		$saldo = $bonus_disponivel + $rendimento_disponivel; 
        $dados['Saldo'] = number_format($saldo,8,".","");
        
        
        $saquesb_pen = saqueModel::where('usuario_id',$Dusuario->usuario_id)->where('tipo','Bônus')->where('status','<>','Pago')->where('status','<>','Rejeitado')->sum('valor');
        $saquesl_pen = saqueModel::where('usuario_id',$Dusuario->usuario_id)->where('tipo','Lucro')->where('status','<>','Pago')->where('status','<>','Rejeitado')->where('data_saque','<','2021-04-28')->sum('valor');
        $saquesl_pen2 = saqueModel::where('usuario_id',$Dusuario->usuario_id)->where('tipo','Lucro')->where('status','<>','Pago')->where('status','<>','Rejeitado')->where('data_saque','>=','2021-04-28')->sum('valor');
        
        $dados['Saques_pendentes'] = $saquesb_pen + (($saquesl_pen * 100) / 90) + $saquesl_pen2;
        
        $saquesb_pag = saqueModel::where('usuario_id',$Dusuario->usuario_id)->where('tipo','Bônus')->where('status','Pago')->sum('valor');
        $saquesl_pag = saqueModel::where('usuario_id',$Dusuario->usuario_id)->where('tipo','Lucro')->where('status','Pago')->where('data_saque','<','2021-04-28')->sum('valor');
        $saquesl_pag2 = saqueModel::where('usuario_id',$Dusuario->usuario_id)->where('tipo','Lucro')->where('status','Pago')->where('data_saque','>=','2021-04-28')->sum('valor');
        $dados['Saques_pagos'] = $saquesb_pag + (($saquesl_pag * 100) / 90) + $saquesl_pag2;
        
        
        if($dados['Bonus'] < 0){
            $dados['Bonus'] = 0;
        }
        
        if($dados['Bonus_disponivel'] < 0){
            $dados['Bonus_disponivel'] = 0;
        }
        
        if($dados['Saldo'] < 0){
            $dados['Saldo'] = 0;
        }
        
        if($dados['Saques_pendentes'] < 0){
            $dados['Saques_pendentes'] = 0;
        }
        
        if($dados['Saques_pagos'] < 0){
            $dados['Saques_pagos'] = 0;
        }
        
        $inv0 = 0;
        $inv = aporteModel::where('usuario_id',$usuario)->where('status','!=','Pendente')->where('status','!=','Aguardando')->get();
		foreach ($inv as $key => $value) {
		    $cotacao = $value->cotacao_bitcoin;
		    $real = $value->investimento_real;
		    
		    $invest += ($real / $cotacao);
        }
        
        $dados['Tinvestido'] = number_format($invest,8,".","");
        $ainvest = aporteModel::where('usuario_id',$usuario)->where('status','Ativo')->sum('investimento');
        $dados['Ainvestido'] = number_format($ainvest,8,".","");
        
        //echo "--------------------------- TOTAL INVESTIDO: ".$dados['Tinvestido']." - INVESTIDO AGORA: ".$dados['Ainvestido']."<br>";
        
        $dados['Bonus1'] = bonusModel::where('patrocinador',$usuario)->get();
		foreach ($dados['Bonus1'] as $key => $value) {
		    $us = usuarioModel::where('usuario_id', $value->usuario_id)->get()[0];
		    $value->indicado = $us->usuario;
		    $value->valor = number_format($value->valor,8,".","");
		    
		    $value->hora_bonus = date("H:i:s", strtotime($value->data_bonus));     
            $value->data_bonus = date("d/m/Y", strtotime($value->data_bonus));     
        }
        
        
        /************************************************************************/
        // ATUALIZAR GRADUAÇÃO
        
        /*$ptu = pontosModel::where('usuario_id',$usuario)->whereNull('patrocinador')->sum('pontos');
		$ptp = pontosModel::where('patrocinador',$usuario)->sum('pontos');
        $dados['Pontos'] = $ptu + $ptp;
        //$dados['Pontos'] = 2325500;
        
        
        $start_direto = usuarioModel::where('patrocinador',$Dusuario->usuario)->where('graduacao', 'Start')->get()->count();
        $expansor_direto = usuarioModel::where('patrocinador',$Dusuario->usuario)->where('graduacao', 'Expansor')->get()->count();
        $bronze_direto = usuarioModel::where('patrocinador',$Dusuario->usuario)->where('graduacao', 'Bronze')->get()->count();
        $prata_direto = usuarioModel::where('patrocinador',$Dusuario->usuario)->where('graduacao', 'Prata')->get()->count();
        $ouro_direto = usuarioModel::where('patrocinador',$Dusuario->usuario)->where('graduacao', 'Ouro')->get()->count();
        $rubi_direto = usuarioModel::where('patrocinador',$Dusuario->usuario)->where('graduacao', 'Rubi')->get()->count();
        $esmeralda_direto = usuarioModel::where('patrocinador',$Dusuario->usuario)->where('graduacao', 'Esmeralda')->get()->count();
        $diamante_direto = usuarioModel::where('patrocinador',$Dusuario->usuario)->where('graduacao', 'Diamante')->get()->count();
        $duplo_direto = usuarioModel::where('patrocinador',$Dusuario->usuario)->where('graduacao', 'Duplo Diamante')->get()->count();
        $triplo_direto = usuarioModel::where('patrocinador',$Dusuario->usuario)->where('graduacao', 'Triplo Diamante')->get()->count();
        
        
        if($dados['Pontos'] >= 2500){
            $dados['Graduacao'] = 'Start';
        }
        
        if($dados['Pontos'] >= 3000){
            if($start_direto >= 1){
                $dados['Graduacao'] = 'Expansor';
            }
        }
        
        if($dados['Pontos'] >= 5000){
            if($expansor_direto >= 1){
                $dados['Graduacao'] = 'Bronze';
            }
        }
        
        if($dados['Pontos'] >= 10000){
            if($bronze_direto >= 1){
                $dados['Graduacao'] = 'Prata';
            }
        }
        
        if($dados['Pontos'] >= 15000){
            if($prata_direto >= 1){
                $dados['Graduacao'] = 'Ouro';
            }
        }
        
        if($dados['Pontos'] >= 20000){
            if($ouro_direto >= 1){
                $dados['Graduacao'] = 'Rubi';
            }
        }
        
        if($ouro_direto >= 1){
            $dados['Rubi_diretos'] = 'Completo';
        }else{
            $dados['Rubi_diretos'] = 'Incompleto';
        }
        
        if($dados['Pontos'] >= 30000){
            if($rubi_direto >= 2){
                $dados['Graduacao'] = 'Esmeralda';
            }
        }
        
        if($dados['Pontos'] >= 80000){
            if($esmeralda_direto >= 2 && $rubi_direto >= 1){
                $dados['Graduacao'] = 'Diamante';
            }
        }
         
        if($dados['Pontos'] >= 160000){
            if($diamante_direto >= 2 && $esmeralda_direto >= 1){
                $dados['Graduacao'] = 'Duplo Diamante';
            }
        }
        
        if($dados['Pontos'] >= 2000000){
            if($duplo_direto >= 2 && $diamante_direto >= 1){
                $dados['Graduacao'] = 'Triplo Diamante';
            }
        }
        
        echo "GRADUAÇÃO: ".$dados['Graduacao']." - PONTOS: ".$dados['Pontos']." - START DIRETO: ".$start_direto."<br>";
	
	    usuarioModel::where('usuario_id', $usuario)->update(array('graduacao'=>$dados['Graduacao']));*/
		
		/*********************************************************/
		// ATUALIZAR SALDO QUANDO FINALIZA A FATURA
		
		$hoje = date("Y-m-d H:i:s");
		//echo "AGORA: ".$hoje."<br>";
		
		$investimentos = aporteModel::where('usuario_id',$usuario)->where('status','Ativo')->get();
		foreach ($investimentos as $key => $value) {
		    //echo "APORTE ID: ".$value->aporte_id."<br>";
		    if($hoje >= $value->data_recebimento){
		     
		        //FINALIZA A FATURA E SOBE RENDIMENTO
		        $val = $value->investimento * 2;
		        $data_receb = date("Y-m-d", strtotime($value->data_recebimento));
		        
		        if(rendimentoModel::where('aporte_id',$value->aporte_id)->where('data_rendimento',$data_receb)->get()->count() == 0 ){
                    //echo "NÃO TEM";
                    $rend = rendimentoModel::create(array('aporte_id'=>$value->aporte_id,'valor'=>$val,'usuario_id'=>$value->usuario_id,'data_rendimento'=>$data_receb));
                    //extratoModel::insert(array('usuario_id'=>$value->usuario_id,'tipo'=>'Rendimento','rendimento_id'=>$rend->id,'data'=>$now2));
                    
                    aporteModel::where('aporte_id', $value->aporte_id)->update(array('status'=>'Finalizado'));	
                    
                    if(aporteModel::where('usuario_id',$value->usuario_id)->where('status', 'Ativo')->get()->count() == 0){
                        //mastercoach - gestor - lidertop - toppoint - comendador - topmaster
                        /*if($value->usuario_id == 3215 || $value->usuario_id == 82 || $value->usuario_id == 192 || $value->usuario_id == 1978 || $value->usuario_id == 873 || $value->usuario_id == 2847 || $value->usuario_id == 3223){
                            //usuarioModel::where('usuario_id', $value->usuario_id)->update(array('status_cadastro'=>'Inativo')); 
                        }else{*/
                            usuarioModel::where('usuario_id', $value->usuario_id)->update(array('status_cadastro'=>'Inativo'));   
                        //}	
                    }
                }
		        //echo "APORTE ID: ".$value->aporte_id." - DATA RECEBIMENTO: ".$value->data_recebimento."<br>";
		    }
		    //echo "APORTE ID: ".$value->aporte_id." - DATA RECEBIMENTO: ".$value->data_recebimento."<br>";
        }
		
		/*****************************************************************/
		//CONSERTA PONTOS
		
		/*$pontos = pontosModel::get();
		foreach ($pontos as $key => $value) {
		    $aporte = aporteModel::where('aporte_id', $value->investidor_id)->get()[0];
		    
		    $pont = intval($aporte->investimento_real / 5);
                        
            if($value->nivel == 0){
                $n0p = $pont * (80 / 100); 
                $pontos = $n0p;
            }else if($value->nivel == 1){
                $n1p = $pont * (10 / 100); 
                $pontos = $n1p;
            }else if($value->nivel == 2){
                $n2p = $pont * (5 / 100);
                $pontos = $n2p;
            }else if($value->nivel == 3){
                $n3p = $pont * (3 / 100);
                $pontos = $n3p;
            }else if($value->nivel == 4){
                $n4p = $pont * (1 / 100);
                $pontos = $n4p;
            }else if($value->nivel == 5){
                $n5p = $pont * (1 / 100);
                $pontos = $n5p;
            }
                        
		    if($value->pontos != intval($pontos)){
		        //echo "ID: ".$value->pontos_id. " - PONTOS: ".$value->pontos." PONTOS CERTO: ".intval($pontos)." - REAL: ".$aporte->investimento_real."<br>"; 
		    }
	    }*/
		
		
		/****************************************************************/
		//ATUALIZA INVESTIMENTOS COM VALOR IGUAL A ZERO
		
		$valid_mbk_c = curl_init();
		curl_setopt_array($valid_mbk_c, array(
		    CURLOPT_URL => "https://api.bitcointrade.com.br/v3/public/BRLBTC/ticker/",
		    CURLOPT_RETURNTRANSFER => true,
		    CURLOPT_ENCODING => "",
		    CURLOPT_MAXREDIRS => 10,
		    CURLOPT_TIMEOUT => 0,
		    CURLOPT_FOLLOWLOCATION => false,
		    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
		    CURLOPT_CUSTOMREQUEST => "GET",
		    CURLOPT_HTTPHEADER => array(
		        "Content-Type: application/json"
	        ),
	    ));

	    $valid_mbk_r = curl_exec($valid_mbk_c);
	    $valid_mbk_e = curl_error($valid_mbk_c);
	    curl_close($valid_mbk_c);
	    $valid_mbk_x = json_decode($valid_mbk_r, true);
        
        $dados['Btc_valor'] = $valid_mbk_x['data']['last'];
        //$dados['Bitcoin_valor_real'] = number_format(1 / $valid_mbk_x['data']['last'],8,".","");
        //$dados['Bitcoin_valor'] = number_format(1 / $valid_mbk_x['data']['last'],8,".","");
        
        /*$invest = aporteModel::where('investimento_real','0')->get();
		foreach ($dados['Investimentos'] as $key => $value) {
		    $valor_real = $valid_mbk_x['data']['last'] * $value->investimento;
		    
		    aporteModel::where('aporte_id', $value->aporte_id)->update(array('investimento_real'=>$valor_real,'cotacao_bitcoin'=>$dados['Btc_valor']));
		    
            //echo "APORTE ID: ".$value->aporte_id." - INVESTIMENTO: ".$value->investimento." - INVESTIMENTO REAL: ".$valor_real."<br>";
        }*/
		
		$saques = saqueModel::where('valor_reais',0)->get();
		foreach ($saques as $key => $value) {
		    $valor_real = $valid_mbk_x['data']['last'] * $value->valor;
		    
		    saqueModel::where('saque_id', $value->saque_id)->update(array('valor_reais'=>$valor_real));
		    
            //echo "SAQUE ID: ".$value->saque_id." - VALOR REAIS: ".$value->valor_reais."<br>";
        }
		
		
		/*$bonus = bonusModel::where('patrocinador',$usuario)->get();
		foreach ($bonus as $key => $value) {
		    if(bonusModel::where('aporte_id',$value->aporte_id)->get()->count() > 1){    
		        //echo "ID: ".$value->bonus_id." - APORTE ID: ".$value->aporte_id." - VALOR:".$value->valor."<br>";
		        echo "ID: ".$value->bonus_id."<br>";
		    }
        }*/
        
        $ultimos = saqueModel::where('status', 'Pago')->where('data_saque','>=','2021-08-06 00:00:00')->where('data_saque','<=','2021-08-06 23:59:59')->orderby('data_recebimento','desc')->get()[0];
        $dados['Ultimo_saque_pago'] = $ultimos->saque_id;
        
        return $this->view->render($res,'cliente/backoffice.html',array('baseurl'=>base_url ,'dados'=>$dados,'dados'=>$dados));
	}
	
	function novo_investimento($req,$res,$args){
		$usuario = $_SESSION['id'];
		$message = '';
		$Dusuario = usuarioModel::where('usuario_id', $usuario)->get()[0];
		$dados['Nome'] = $Dusuario->nome;
		$dados['Usuario'] = $Dusuario->usuario;
		$dados['Status'] = $Dusuario->status_cadastro;
		$dados['Foto'] = $Dusuario->foto;
		$dados['Pagina'] = 'Comprar Módulo';
		$dados['Pais'] = $Dusuario->pais;
		$dados['Cpf'] = $Dusuario->cpf;
		$dados['Genero'] = $Dusuario->genero;
		
		
		$dados['Rua'] = $Dusuario->rua;
		$dados['Numero'] = $Dusuario->numero;
		$dados['Cidade'] = $Dusuario->cidade;
		$dados['Bairro'] = $Dusuario->bairro;
		$dados['Estado'] = $Dusuario->estado;
		
		$now = date("Y-m-d H:i:s");
		
		
		if($Dusuario->acesso == 'Investidor'){
	        if($_SESSION['admin_id'] != $_SESSION['id']){
    	        $dados['Acesso_admin'] = 'Sim';
    	        $_SESSION['ant_id'] = $_SESSION['admin_id'];
    	    }
	    }
	    
	    if($usuario == ''){
           $url = $this->router->pathFor('login');
		   return $res->withStatus(200)->withHeader('Location', $url);
        }
        
        if($Dusuario->pin == ''){
           $url = $this->router->pathFor('pin');
		   return $res->withStatus(200)->withHeader('Location', $url);
        }

        $sistema = sistemaModel::where('sistema_id',1)->get()[0];
        
		$dados['Acesso'] = $Dusuario->acesso;
		$dados['Nome'] = $Dusuario->nome;
		$dados['Email'] = $Dusuario->email;
		$dados['Saldo'] = $Dusuario->carteira;
		$dados['Usuario'] = $Dusuario->usuario;  
		
        $patro = usuarioModel::where('usuario', $Dusuario->patrocinador)->get()[0];

        $valid_mbk_c = curl_init();
		curl_setopt_array($valid_mbk_c, array(
		    CURLOPT_URL => "https://api.bitcointrade.com.br/v3/public/BRLBTC/ticker/",
		    CURLOPT_RETURNTRANSFER => true,
		    CURLOPT_ENCODING => "",
		    CURLOPT_MAXREDIRS => 10,
		    CURLOPT_TIMEOUT => 0,
		    CURLOPT_FOLLOWLOCATION => false,
		    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
		    CURLOPT_CUSTOMREQUEST => "GET",
		    CURLOPT_HTTPHEADER => array(
		        "Content-Type: application/json"
	        ),
	    ));

	    $valid_mbk_r = curl_exec($valid_mbk_c);
	    $valid_mbk_e = curl_error($valid_mbk_c);
	    curl_close($valid_mbk_c);
	    $valid_mbk_x = json_decode($valid_mbk_r, true);
        
        $dados['Btc_valor'] = $valid_mbk_x['data']['last'];
        
        
        $dados['Bitcoin_valor_real'] = number_format(1 / $valid_mbk_x['data']['last'],8,".","");
        $dados['Bitcoin_valor'] = number_format(1 / $valid_mbk_x['data']['last'],8,".","");
        
        //Gera um novo token
        /*$_SESSION['token'] = md5(uniqid(rand(), true));
        $dados['token'] = $_SESSION['token'];
        echo "----------------- TOKEN: ".$dados['token']."<br>";
        
        //$_SESSION['Token'] = generateRandomString();
        
        //Gera um nome aleatório para cada campo do formulário
        $_SESSION['TokenFieldName'] = md5(uniqid(rand(), true));
        $_SESSION['LoginFieldName'] = md5(uniqid(rand(), true));
        $_SESSION['SenhaFieldName'] = md5(uniqid(rand(), true));
          */
        
        
        // This example will create a new deposit address for a desired currency
        // Link to the related documentation https://www.coinpayments.net/apidoc-get-deposit-address
    
        ////////////////////////////////////////////////////
    
        // Fill these in from your API Keys page 
        //$public_key = '6c06eb3fbbefadd0c52a003dfdc70141e4418811fd2591e7c9b0ce53cee394b5'; 
        //$private_key = 'f06427DB623DE5912521946cbce8aC5673B590ac468cfDe5Ac5E7246176c5bB8'; 
        
        $public_key = 'cdc606942d5a9c7d3928af6854ade6ef819620f740bc016f4333dc90eae2db20'; 
        $private_key = 'E6F9517d96f4b9890f35D7a708309290FCCb541113C3a2dc357FdD27ADBce923';  
         
        /*$req = array();
        
        $req['version'] = 1; 
        //$req['cmd'] = "get_deposit_address"; 
        $req['cmd'] = "get_basic_info";
        $req['currency'] = "BTC";
        $req['key'] = $public_key; 
        $req['format'] = 'json'; //supported values are json and xml 
         
        // Generate the query string 
        $post_data = http_build_query($req, '', '&'); 
         
        // Calculate the HMAC signature on the POST data 
        $hmac = hash_hmac('sha512', $post_data, $private_key); 
         
        // Use curl to hit the endpoint so that you can send the required headers 
        $ch = curl_init('https://www.coinpayments.net/api.php'); 
            curl_setopt($ch, CURLOPT_FAILONERROR, TRUE); 
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); 
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0); 
        curl_setopt($ch, CURLOPT_HTTPHEADER, array('HMAC: '.$hmac)); 
        curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data); 
         
        // Execute the call and close cURL handle      
        $data = curl_exec($ch); 
    
        // dump the data returned back from coinpayments
        var_dump($data);
        //echo "--------------------------------------------- ENTREI!<br>";
        //echo "--------------------------------------------- ".$data."<br><br>";
        */
        
        
        if(isset($_POST['_csrf'])){	
			$valor   =  isset($_POST['valor']) ? htmlspecialchars(stripslashes(trim($_POST['valor']))): null;
            $valor_real = $valid_mbk_x['data']['last'] * $valor;
        
            //$token = isset($_POST['_csrf']) ? stripslashes(trim($_POST['_csrf'])): null;
            
            //if($token == $dados['token']){
            if ($_SERVER['REQUEST_METHOD'] === 'POST') {
                if($valor < $sistema->investimento_minimo){
                    $resp['msg']    = "minimo";
                    echo json_encode($resp);
                    exit;        
            	}else{
                    $recebimento = $valor * 2;
                        
                    $data01 = gmdate('d/m/Y H:i:s',strtotime('+21 day',strtotime($now)));
                    $data1 = str_replace("/", "-", $data01);
                    $data_recebimento = date('Y-m-d H:i:s', strtotime($data1));
                        
                        
                    $aporte = aporteModel::create(array('usuario_id'=>$usuario,'investimento'=>$valor,'investimento_real'=>$valor_real,'recebimento'=>$recebimento,'cotacao_bitcoin'=>$dados['Btc_valor'],'data_investimento'=>$now,'data_recebimento'=>$data_recebimento,'status'=>'Pendente','patrocinador'=>$patro->usuario_id));
                        
                    $_SESSION['aporte_id'] = $aporte->id;
                
                    $resp['msg']    = "sucesso";
                    echo json_encode($resp);
                    exit;
            	}
            }
		}
		
		
		if(isset($_POST['_csrfb'])){	
			$valor   =  isset($_POST['valor']) ? htmlspecialchars(stripslashes(trim($_POST['valor']))): null;
            $bitcoin_valor = number_format($valor / $valid_mbk_x['data']['last'],8,".","");
                
            echo $bitcoin_valor;
            exit;	
		}
		
        
        
		return $this->view->render($res,'cliente/novo_investimento.html',array('baseurl'=>base_url ,'dados'=>$dados,'message'=>$message));
	}
	
	function novo_investimento2($req,$res,$args){
		$usuario = $_SESSION['id'];
		$message = '';
		$Dusuario = usuarioModel::where('usuario_id', $usuario)->get()[0];
		$dados['Nome'] = $Dusuario->nome;
		$dados['Usuario'] = $Dusuario->usuario;
		$dados['Status'] = $Dusuario->status_cadastro;
		$dados['Foto'] = $Dusuario->foto;
		$dados['Pagina'] = 'Comprar Módulo';
		$dados['Pais'] = $Dusuario->pais;
		$dados['Cpf'] = $Dusuario->cpf;
		$dados['Genero'] = $Dusuario->genero;
		
		
		$dados['Rua'] = $Dusuario->rua;
		$dados['Numero'] = $Dusuario->numero;
		$dados['Cidade'] = $Dusuario->cidade;
		$dados['Bairro'] = $Dusuario->bairro;
		$dados['Estado'] = $Dusuario->estado;
		
		$now = date("Y-m-d H:i:s");
		
		
		if($Dusuario->acesso == 'Investidor'){
	        if($_SESSION['admin_id'] != $_SESSION['id']){
    	        $dados['Acesso_admin'] = 'Sim';
    	        $_SESSION['ant_id'] = $_SESSION['admin_id'];
    	    }
	    }
	    
	    if($usuario == ''){
           $url = $this->router->pathFor('login');
		   return $res->withStatus(200)->withHeader('Location', $url);
        }
        
        /*if($Dusuario->pin == ''){
           $url = $this->router->pathFor('pin');
		   return $res->withStatus(200)->withHeader('Location', $url);
        }*/

        $sistema = sistemaModel::where('sistema_id',1)->get()[0];
        
		$dados['Acesso'] = $Dusuario->acesso;
		$dados['Nome'] = $Dusuario->nome;
		$dados['Email'] = $Dusuario->email;
		$dados['Saldo'] = $Dusuario->carteira;
		$dados['Usuario'] = $Dusuario->usuario;  
		
        $patro = usuarioModel::where('usuario', $Dusuario->patrocinador)->get()[0];

        $valid_mbk_c = curl_init();
		curl_setopt_array($valid_mbk_c, array(
		    CURLOPT_URL => "https://api.bitcointrade.com.br/v3/public/BRLBTC/ticker/",
		    CURLOPT_RETURNTRANSFER => true,
		    CURLOPT_ENCODING => "",
		    CURLOPT_MAXREDIRS => 10,
		    CURLOPT_TIMEOUT => 0,
		    CURLOPT_FOLLOWLOCATION => false,
		    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
		    CURLOPT_CUSTOMREQUEST => "GET",
		    CURLOPT_HTTPHEADER => array(
		        "Content-Type: application/json"
	        ),
	    ));

	    $valid_mbk_r = curl_exec($valid_mbk_c);
	    $valid_mbk_e = curl_error($valid_mbk_c);
	    curl_close($valid_mbk_c);
	    $valid_mbk_x = json_decode($valid_mbk_r, true);
        
        $dados['Btc_valor'] = $valid_mbk_x['data']['last'];
        
        
        $dados['Bitcoin_valor_real'] = number_format(1 / $valid_mbk_x['data']['last'],8,".","");
        $dados['Bitcoin_valor'] = number_format(1 / $valid_mbk_x['data']['last'],8,".","");
        
        //Gera um novo token
        /*$_SESSION['token'] = md5(uniqid(rand(), true));
        $dados['token'] = $_SESSION['token'];
        echo "----------------- TOKEN: ".$dados['token']."<br>";
        
        //$_SESSION['Token'] = generateRandomString();
        
        //Gera um nome aleatório para cada campo do formulário
        $_SESSION['TokenFieldName'] = md5(uniqid(rand(), true));
        $_SESSION['LoginFieldName'] = md5(uniqid(rand(), true));
        $_SESSION['SenhaFieldName'] = md5(uniqid(rand(), true));
          */
        
        
        // This example will create a new deposit address for a desired currency
        // Link to the related documentation https://www.coinpayments.net/apidoc-get-deposit-address
    
        ////////////////////////////////////////////////////
    
        // Fill these in from your API Keys page 
        $public_key = '988c26d6a7b08e16d7d673f384b0275e80f3d8190e1c3656e66e3c4d4fe6eb86'; 
        $private_key = 'B956172202fAAf20dB441Ab0EC9DDB7C4508b65B03d0Aefd3210950F83f6f634'; 
        
        
        //$public_key = 'cdc606942d5a9c7d3928af6854ade6ef819620f740bc016f4333dc90eae2db20'; 
        //$private_key = 'E6F9517d96f4b9890f35D7a708309290FCCb541113C3a2dc357FdD27ADBce923';  
         
        /*$req = array();
        
        $req['version'] = 1; 
        //$req['cmd'] = "get_deposit_address"; 
        $req['cmd'] = "get_basic_info";
        $req['currency'] = "BTC";
        $req['key'] = $public_key; 
        $req['format'] = 'json'; //supported values are json and xml 
         
        // Generate the query string 
        $post_data = http_build_query($req, '', '&'); 
         
        // Calculate the HMAC signature on the POST data 
        $hmac = hash_hmac('sha512', $post_data, $private_key); 
         
        // Use curl to hit the endpoint so that you can send the required headers 
        $ch = curl_init('https://www.coinpayments.net/api.php'); 
            curl_setopt($ch, CURLOPT_FAILONERROR, TRUE); 
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); 
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0); 
        curl_setopt($ch, CURLOPT_HTTPHEADER, array('HMAC: '.$hmac)); 
        curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data); 
         
        // Execute the call and close cURL handle      
        $data = curl_exec($ch); 
    
        // dump the data returned back from coinpayments
        var_dump($data);
        //echo "--------------------------------------------- ENTREI!<br>";
        //echo "--------------------------------------------- ".$data."<br><br>";
        */
        
        /*$valor = 0.0005;
        $recebimento = $valor * 2;
                        
                    $data01 = gmdate('d/m/Y H:i:s',strtotime('+21 day',strtotime($now)));
                    $data1 = str_replace("/", "-", $data01);
                    $data_recebimento = date('Y-m-d H:i:s', strtotime($data1));
                    
                    $req = array();
        
                    $req['version'] = 1; 
                    $req['cmd'] = "create_transaction";
                    
                    //$req['currency'] = "BTC";
                    $req['currency1'] = "BTC";
                    $req['currency2'] = "BTC";
                    $req['amount'] = $valor;
                    $req['timeout'] = 604800;
                    //$req['timeout'] = 259200;
                    $req['buyer_email'] = $Dusuario->email;
                    $req['item'] = 'Investimento #';
                    $req['ipn_url'] = 'https://speedinvest.investtrade.com.br/investimentos-ativos';
                    
                    $req['success_url'] = 'https://speedinvest.investtrade.com.br/investimentos-ativos';
                    $req['cancel_url'] = 'https://speedinvest.investtrade.com.br/backoffice';
                    
                    $req['key'] = $public_key; 
                    $req['format'] = 'json'; //supported values are json and xml 
                    
                    $req['key'] = $public_key; 
                    $req['format'] = 'json'; //supported values are json and xml 
                     
                    // Generate the query string 
                    $post_data = http_build_query($req, '', '&'); 
                     
                    // Calculate the HMAC signature on the POST data 
                    $hmac = hash_hmac('sha512', $post_data, $private_key); 
                     
                    // Use curl to hit the endpoint so that you can send the required headers 
                    $ch = curl_init('https://www.coinpayments.net/api.php'); 
                        curl_setopt($ch, CURLOPT_FAILONERROR, TRUE); 
                        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); 
                        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0); 
                    curl_setopt($ch, CURLOPT_HTTPHEADER, array('HMAC: '.$hmac)); 
                    curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data); 
                     
                    // Execute the call and close cURL handle      
                    $data = curl_exec($ch); 
                
                    // dump the data returned back from coinpayments
                    var_dump($data);
                    
                    $valid_mbk_x = json_decode($data, true);
        
                    echo $valid_mbk_x['result']['status_url'];  */
                
        $bloqueado = 'Não';        
        if(aporteModel::where('usuario_id',$usuario)->where('status', 'Pendente')->get()->count() > 0){
            $ultimo = aporteModel::where('usuario_id',$usuario)->where('status', 'Pendente')->orderby('aporte_id','desc')->get()[0];
            $minutos = floor((strtotime(date('Y-m-d H:i:s')) - strtotime($ultimo->data_investimento) ) / 60) ;
            
            if($minutos < 30){
                $bloqueado = 'Sim';
            }
        }else{
            $bloqueado = 'Não';    
        }
        
        //$bloqueado = 'Sim';
        
        //echo "ULTIMO: ".$ultimo->aporte_id." - DATA: ".$ultimo->data_investimento."<br>";
        //echo "MINUTOS: ".$minutos."<br>";
        //echo "BLOQUEADO: ".$bloqueado."<br>";
        
        if(isset($_POST['_csrf'])){	
			$valor   =  isset($_POST['valor']) ? htmlspecialchars(stripslashes(trim($_POST['valor']))): null;
            $valor_real = $valid_mbk_x['data']['last'] * $valor;

            if($valor > 0.01){
            	$public_key = '608ec83a708dafb39875bf9e4166ab693567559cd955cf99aec9eb7ee7fffc03'; 
        		$private_key = '3Cc95e2f92A12aAD237372C13a6ff3Cc7aE77f76c6874707Fd0388661B029A2c'; 
            }
        
            //$token = isset($_POST['_csrf']) ? stripslashes(trim($_POST['_csrf'])): null;
            
            //if($token == $dados['token']){
            if ($_SERVER['REQUEST_METHOD'] === 'POST') {
                if($bloqueado == 'Não'){
                    if($valor < $sistema->investimento_minimo){
                        $resp['msg']    = "minimo";
                        echo json_encode($resp);
                        exit;        
                	}else{
                        $recebimento = $valor * 2;
                            
                        $data01 = gmdate('d/m/Y H:i:s',strtotime('+21 day',strtotime($now)));
                        $data1 = str_replace("/", "-", $data01);
                        $data_recebimento = date('Y-m-d H:i:s', strtotime($data1));
                        
                        $req = array();
            
                        $req['version'] = 1; 
                        $req['cmd'] = "create_transaction";
                        
                        //$req['currency'] = "BTC";
                        $req['currency1'] = "BTC";
                        $req['currency2'] = "BTC";
                        $req['amount'] = $valor;
                        $req['timeout'] = 604800;
                        //$req['timeout'] = 259200;
                        $req['buyer_email'] = $Dusuario->email;
                        $req['item'] = 'Investimento #';
                        $req['ipn_url'] = 'https://speedinvest.investtrade.com.br/investimentos-ativos';
                        
                        $req['success_url'] = 'https://speedinvest.investtrade.com.br/investimentos-ativos';
                        $req['cancel_url'] = 'https://speedinvest.investtrade.com.br/backoffice';
                        
                        $req['key'] = $public_key; 
                        $req['format'] = 'json'; //supported values are json and xml 
                        
                        $req['key'] = $public_key; 
                        $req['format'] = 'json'; //supported values are json and xml 
                         
                        // Generate the query string 
                        $post_data = http_build_query($req, '', '&'); 
                         
                        // Calculate the HMAC signature on the POST data 
                        $hmac = hash_hmac('sha512', $post_data, $private_key); 
                         
                        // Use curl to hit the endpoint so that you can send the required headers 
                        $ch = curl_init('https://www.coinpayments.net/api.php'); 
                            curl_setopt($ch, CURLOPT_FAILONERROR, TRUE); 
                            curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); 
                            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0); 
                        curl_setopt($ch, CURLOPT_HTTPHEADER, array('HMAC: '.$hmac)); 
                        curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data); 
                         
                        // Execute the call and close cURL handle      
                        $data = curl_exec($ch); 
                    
                        // dump the data returned back from coinpayments
                        //var_dump($data);
                        
                        $valid_mbk_x = json_decode($data, true);
            
                        //echo $valid_mbk_x['result']['status_url'];  
                            
                        if($valid_mbk_x['error'] == "ok"){
                            $aporte = aporteModel::create(array('usuario_id'=>$usuario,'investimento'=>$valor,'investimento_real'=>$valor_real,'recebimento'=>$recebimento,'cotacao_bitcoin'=>$dados['Btc_valor'],'data_investimento'=>$now,'data_recebimento'=>$data_recebimento,'status'=>'Pendente','patrocinador'=>$patro->usuario_id,'txn_id'=>$valid_mbk_x['result']['txn_id'],'status_url'=>$valid_mbk_x['result']['status_url'],'tipo'=>'Bitcoin'));
                                
                                
                            $_SESSION['aporte_id'] = $aporte->id;
                        
                            $resp['msg']    = "sucesso";
                            echo json_encode($resp);
                            exit;
                        }else{
                            $resp['msg']    = "erro";
                            echo json_encode($resp);
                            exit;
                        }
                	}
                }else{
                    $resp['msg']    = "bloqueado";
                    echo json_encode($resp);
                    exit;
                }
            }
		}
		
		
		/*if(isset($_POST['_csrfb'])){	
			$valor   =  isset($_POST['valor']) ? htmlspecialchars(stripslashes(trim($_POST['valor']))): null;
            $bitcoin_valor = number_format($valor / $valid_mbk_x['data']['last'],8,".","");
                
            echo $bitcoin_valor;
            exit;	
		}*/
		
		
		return $this->view->render($res,'cliente/novo_investimento2.html',array('baseurl'=>base_url ,'dados'=>$dados,'message'=>$message));
	}
	
	function pagar_bitcoin($req,$res,$args){
		$usuario = $_SESSION['id'];
		$message = '';
		$Dusuario = usuarioModel::where('usuario_id', $usuario)->get()[0];
		$dados['Nome'] = $Dusuario->nome;
		$dados['Usuario'] = $Dusuario->usuario;
		$dados['Status'] = $Dusuario->status_cadastro;
		$dados['Foto'] = $Dusuario->foto;
		$dados['Pagina'] = 'Comprar Módulo';
		$dados['Pais'] = $Dusuario->pais;
		$dados['Cpf'] = $Dusuario->cpf;
		$dados['Genero'] = $Dusuario->genero;
		
		
		$dados['Rua'] = $Dusuario->rua;
		$dados['Numero'] = $Dusuario->numero;
		$dados['Cidade'] = $Dusuario->cidade;
		$dados['Bairro'] = $Dusuario->bairro;
		$dados['Estado'] = $Dusuario->estado;
		
		$now = date("Y-m-d H:i:s");
		
		if(isset($args['id'])){
			$dados['Aporte_id'] = $args['id'];
		}else{
			$dados['Aporte_id'] = $_SESSION['aporte_id'];
		}
		
		
		//$aporte = aporteModel::where('aporte_id', $_SESSION['aporte_id'])->get()[0];
		$aporte = aporteModel::where('aporte_id', $dados['Aporte_id'])->get()[0];
		$data = date("Y-m-d", strtotime($aporte->data_investimento.'+3 day'));
		
		$dados['Data_investimento'] = date("d/m/Y H:i:s", strtotime($aporte->data_investimento));
		$dados['Valor_investimento'] = $aporte->investimento;
		$dados['Valor_investimento_real'] = $aporte->investimento_real;
		$dados['Aporte_id'] = $aporte->aporte_id;
		$dados['Status_url'] = $aporte->status_url;
		
		if($Dusuario->acesso == 'Investidor'){
	        if($_SESSION['admin_id'] != $_SESSION['id']){
    	        $dados['Acesso_admin'] = 'Sim';
    	        $_SESSION['ant_id'] = $_SESSION['admin_id'];
    	    }
	    }
	    
	    if($usuario == ''){
           $url = $this->router->pathFor('login');
		   return $res->withStatus(200)->withHeader('Location', $url);
        }

        $sistema = sistemaModel::where('sistema_id',1)->get()[0];
        
		$dados['Acesso'] = $Dusuario->acesso;
		$dados['Nome'] = $Dusuario->nome;
		$dados['Email'] = $Dusuario->email;
		$dados['Saldo'] = $Dusuario->carteira;
		$dados['Usuario'] = $Dusuario->usuario;  
		
        $patro = usuarioModel::where('usuario', $Dusuario->patrocinador)->get()[0];

        
        
        // This example will create a new deposit address for a desired currency
        // Link to the related documentation https://www.coinpayments.net/apidoc-get-deposit-address
    
        ////////////////////////////////////////////////////
    
        // Fill these in from your API Keys page 
        /*$public_key = '6c06eb3fbbefadd0c52a003dfdc70141e4418811fd2591e7c9b0ce53cee394b5'; 
        $private_key = 'f06427DB623DE5912521946cbce8aC5673B590ac468cfDe5Ac5E7246176c5bB8'; 
         
        $req = array();
        
        $req['version'] = 1; 
        //$req['cmd'] = "get_deposit_address"; 
        //$req['cmd'] = "create_transaction";
        $req['cmd'] = "get_tx_ids";*/
        
        //$req['currency'] = "BTC";
        /*$req['currency1'] = "BTC";
        $req['currency2'] = "BTC";
        $req['amount'] = 0.005;
        $req['buyer_email'] = $Dusuario->email;
        $req['item'] = 'Investimento #';
        $req['ipn_url'] = 'https://speedinvest.investtrade.com.br/investimentos-ativos';
        
        $req['success_url'] = 'https://speedinvest.investtrade.com.br/investimentos-ativos';
        $req['cancel_url'] = 'https://speedinvest.investtrade.com.br/backoffice';*/
        
        /*$req['key'] = $public_key; 
        $req['format'] = 'json'; //supported values are json and xml 
         
        // Generate the query string 
        $post_data = http_build_query($req, '', '&'); 
         
        // Calculate the HMAC signature on the POST data 
        $hmac = hash_hmac('sha512', $post_data, $private_key); 
         
        // Use curl to hit the endpoint so that you can send the required headers 
        $ch = curl_init('https://www.coinpayments.net/api.php'); 
            curl_setopt($ch, CURLOPT_FAILONERROR, TRUE); 
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); 
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0); 
        curl_setopt($ch, CURLOPT_HTTPHEADER, array('HMAC: '.$hmac)); 
        curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data); 
         
        // Execute the call and close cURL handle      
        $data = curl_exec($ch); 
    
        $valid_mbk_x = json_decode($data, true);
        
        //echo $valid_mbk_x['result']['status_url'];
        
    
        // dump the data returned back from coinpayments
        var_dump($data);
        //CPFD71RIWJYW12OHN7POJYKKFL*/
        
        if(isset($_POST['_csrfi'])){	
			if(isset($_FILES)){
        		$foto = $_FILES["file"];
        		$id = $_POST["id"];
                                
                if (empty($foto["name"])) {
                    //$message = '<div class="alert alert-danger" role="alert"><center><b>Nenhuma imagem selecionada.</b></center></div>';
                    $resp['msg']    = "sem imagem";
                    echo json_encode($resp);
                    exit;
                }else{
                 	if($foto['type'] != 'image/jpeg' && $foto['type'] != 'image/jpg' && $foto['type'] != 'image/gif' && $foto['type'] != 'image/png' && $foto['type'] != 'application/pdf'){
              	   	    //$error->codigo = 2;
            		    //return json_encode($error);
            		    $resp['msg']    = "formato inválido";
                        echo json_encode($resp);
                        exit;
             		}else if($foto['size'] > 2097152){   
                		$resp['msg']    = "arquivo grande";
                        echo json_encode($resp);
                        exit;
             		}else{
    					//preg_match("/\.(gif|bmp|png|jpg|jpeg){1}$/i", $_FILES['file']["name"], $ext);
    					$ext = pathinfo($foto['name'], PATHINFO_EXTENSION);
                		$nome_imagem = md5(uniqid(time())) . "." . $ext;
                		$caminho_imagem = "comprovantes/" . $nome_imagem;
                    	move_uploaded_file($_FILES['file']["tmp_name"], $caminho_imagem);
                                    	
                                    	
                        aporteModel::where('aporte_id', $id)->update(array('data_pagamento'=>$now,'status'=>'Aguardando','comprovante'=>$nome_imagem));
                    				                	
                        //$message = '<div class="alert alert-success" role="alert"><center><b>Comprovante enviado com sucesso. AGUARDE ANÁLISE!</b></center></div>';
                        $resp['msg']    = "sucesso";
                        echo json_encode($resp);
                        exit;
                	}
        		}
			}
		}
        
		
		/****************************************************************/
		//ATUALIZA INVESTIMENTOS COM VALOR IGUAL A ZERO
		
		$valid_mbk_c = curl_init();
		curl_setopt_array($valid_mbk_c, array(
		    CURLOPT_URL => "https://api.bitcointrade.com.br/v3/public/BRLBTC/ticker/",
		    CURLOPT_RETURNTRANSFER => true,
		    CURLOPT_ENCODING => "",
		    CURLOPT_MAXREDIRS => 10,
		    CURLOPT_TIMEOUT => 0,
		    CURLOPT_FOLLOWLOCATION => false,
		    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
		    CURLOPT_CUSTOMREQUEST => "GET",
		    CURLOPT_HTTPHEADER => array(
		        "Content-Type: application/json"
	        ),
	    ));

	    $valid_mbk_r = curl_exec($valid_mbk_c);
	    $valid_mbk_e = curl_error($valid_mbk_c);
	    curl_close($valid_mbk_c);
	    $valid_mbk_x = json_decode($valid_mbk_r, true);
        
        $dados['Btc_valor'] = $valid_mbk_x['data']['last'];
        //$dados['Bitcoin_valor_real'] = number_format(1 / $valid_mbk_x['data']['last'],8,".","");
        //$dados['Bitcoin_valor'] = number_format(1 / $valid_mbk_x['data']['last'],8,".","");
        
        $dados['Investimentos'] = aporteModel::where('investimento_real','0')->get();
		foreach ($dados['Investimentos'] as $key => $value) {
		    $valor_real = $valid_mbk_x['data']['last'] * $value->investimento;
		    
		    aporteModel::where('aporte_id', $value->aporte_id)->update(array('investimento_real'=>$valor_real,'cotacao_bitcoin'=>$dados['Btc_valor']));
		    
            //echo "APORTE ID: ".$value->aporte_id." - INVESTIMENTO: ".$value->investimento." - INVESTIMENTO REAL: ".$valor_real."<br>";
        }
        
		return $this->view->render($res,'cliente/pagar_bitcoin.html',array('baseurl'=>base_url ,'dados'=>$dados,'message'=>$message));
	}
	
	
    function saques_pendentes($req,$res,$args){
		$usuario = $_SESSION['id'];
		$Dusuario = usuarioModel::where('usuario_id', $usuario)->get()[0];
		
        if($Dusuario->acesso == 'Investidor'){
	        if($_SESSION['admin_id'] != $_SESSION['id']){
    	        $dados['Acesso_admin'] = 'Sim';
    	    }
	    }
    
        if($usuario == ''){
           $url = $this->router->pathFor('login');
		   return $res->withStatus(200)->withHeader('Location', $url);
        }
        
        if($Dusuario->pin == ''){
           $url = $this->router->pathFor('pin');
		   return $res->withStatus(200)->withHeader('Location', $url);
        }

        if($Dusuario->acesso == 'Investidor'){
	        if($_SESSION['admin_id'] != $_SESSION['id']){
    	        $dados['Acesso_admin'] = 'Sim';
    	        $_SESSION['ant_id'] = $_SESSION['admin_id'];
    	    }
	    }
	    
		$dados['Acesso'] = $Dusuario->acesso;
		$dados['Usuario'] = $Dusuario->usuario;
		$dados['Nome'] = $Dusuario->nome;
		$dados['Email'] = $Dusuario->email;	
		$dados['Foto'] = $Dusuario->foto;  
		$dados['Pais'] = $Dusuario->pais;
		$dados['Cpf'] = $Dusuario->cpf;
		$dados['Genero'] = $Dusuario->genero;
		
		
		/*$mes_atual = date('m');
	    $mes_passado = $mes_atual - 1;
	    if(strlen($mes_passado) == 1){
	        $mes_passado = '0'.$mes_passado;    
	    }
	    
	    $data_atual1 = date('Y-m-01 00:00:00');
	    $data_atual2 = date('Y-m-t 23:59:59');
	    
	    $data_passado1 = date('Y-'.$mes_passado.'-01 00:00:00');
	    $data_passado2 = date('Y-'.$mes_passado.'-t 23:59:59');
	    
	    //echo "DATA ATUAL 1: ".$data_atual1." - DATA ATUAL 2: ".$data_atual2." - DATA PASSADO 1: ".$data_passado1." - DATA PASSADO 2: ".$data_passado2."<br>";
	    
	    $dados['Saques_passado'] = saqueModel::where('usuario_id',$usuario)->where('status','Aguardando')->where('data_saque','>=',$data_passado1)->where('data_saque','<=',$data_passado2)->sum('valor');
	    $dados['Saques_mes'] = saqueModel::where('usuario_id',$usuario)->where('status','Aguardando')->where('data_saque','>=',$data_atual1)->where('data_saque','<=',$data_atual2)->sum('valor');*/
	    
	    $saques_pen = saqueModel::where('usuario_id',$usuario)->where('status','Aguardando')->sum('valor');
	    $saques = ($saques_pen * 100) / 90;
	    $saques_re = saqueModel::where('usuario_id',$usuario)->where('status','Aguardando')->sum('valor_reais');
	    $saques_reais = ($saques_re * 100) / 90;
	    
	    
        if($saques <= 0){
		    $dados['Saques_reais'] = 0;
        	$dados['Saques_bitcoin'] = number_format($saques,8,".","");  
		}else{
        	//$dados['Saques_reais'] = $saques * $valid_mbk_x['data']['last'];
        	$dados['Saques_reais'] = $saques_reais;
        	$dados['Saques_bitcoin'] = number_format($saques,8,".","");  
		}
	    
	    
	    if(isset($_POST['cancelar'])){
			$id = htmlspecialchars($_POST['id']);
			
			saqueModel::where('saque_id', $id)->delete();
			
			$message = '<div class="alert alert-success" role="alert"><center>Sucesso! <b>Saque cancelado com sucesso</b></center></div>';
			//header("Refresh:0; url=../modulos-ativos");
		}
	    
	    $dados['Saques'] = saqueModel::where('usuario_id',$usuario)->where('status','<>','Pago')->where('status','<>','Rejeitado')->get();
        foreach ($dados['Saques'] as $key => $value) {
            //$value->valor_sacado = number_format(($value->valor * 100) / 90,8,".","");
            $value->valor = number_format($value->valor,8,".","");
		    $value->valor_receber = number_format($value->valor_receber,8,".","");
		    
		    $value->data_saque = date("d/m/Y H:i:s", strtotime($value->data_saque)); 
		    //$value->data_recebimento = date("d/m/Y H:i:s", strtotime($value->data_recebimento)); 
        }
        
        //$valor = 1.32648882;
        //$val = $valor - ($valor * 0.05);
	    //echo "VALOR: ".$val;
		
		return $this->view->render($res,'cliente/saques_pendentes.html',array('baseurl'=>base_url ,'dados'=>$dados,'message'=>$message));
	}
	
	
	function saques_recebidos($req,$res,$args){
		$usuario = $_SESSION['id'];
		$Dusuario = usuarioModel::where('usuario_id', $usuario)->get()[0];
		
        if($Dusuario->acesso == 'Investidor'){
	        if($_SESSION['admin_id'] != $_SESSION['id']){
    	        $dados['Acesso_admin'] = 'Sim';
    	    }
	    }

        if($usuario == ''){
           $url = $this->router->pathFor('login');
		   return $res->withStatus(200)->withHeader('Location', $url);
        }
        
        if($Dusuario->pin == ''){
           $url = $this->router->pathFor('pin');
		   return $res->withStatus(200)->withHeader('Location', $url);
        }

    	if($Dusuario->acesso == 'Investidor'){
	        if($_SESSION['admin_id'] != $_SESSION['id']){
    	        $dados['Acesso_admin'] = 'Sim';
    	        $_SESSION['ant_id'] = $_SESSION['admin_id'];
    	    }
	    }
	    
	    /*$mes_atual = date('m');
	    $mes_passado = $mes_atual - 1;
	    if(strlen($mes_passado) == 1){
	        $mes_passado = '0'.$mes_passado;    
	    }
	    
	    $data_atual1 = date('Y-m-01 00:00:00');
	    $data_atual2 = date('Y-m-t 23:59:59');
	    
	    $data_passado1 = date('Y-'.$mes_passado.'-01 00:00:00');
	    $data_passado2 = date('Y-'.$mes_passado.'-t 23:59:59');
	    
	    //echo "DATA ATUAL 1: ".$data_atual1." - DATA ATUAL 2: ".$data_atual2." - DATA PASSADO 1: ".$data_passado1." - DATA PASSADO 2: ".$data_passado2."<br>";
	    
	    $dados['Saques_passado'] = saqueModel::where('usuario_id',$usuario)->where('status','Pago')->where('data_saque','>=',$data_passado1)->where('data_saque','<=',$data_passado2)->sum('valor');
	    $dados['Saques_mes'] = saqueModel::where('usuario_id',$usuario)->where('status','Pago')->where('data_saque','>=',$data_atual1)->where('data_saque','<=',$data_atual2)->sum('valor');
	    */
	    
		$dados['Acesso'] = $Dusuario->acesso;
		$dados['Nome'] = $Dusuario->nome;
		$dados['Email'] = $Dusuario->email;
		$dados['Usuario'] = $Dusuario->usuario;  
		$dados['Foto'] = $Dusuario->foto;  
		$dados['Pais'] = $Dusuario->pais;
		$dados['Cpf'] = $Dusuario->cpf;
        $dados['Genero'] = $Dusuario->genero;
        
        
        
	    $saques_pen = saqueModel::where('usuario_id',$usuario)->where('status','Pago')->sum('valor');
	    $saques = ($saques_pen * 100) / 90;
	    $saques_re = saqueModel::where('usuario_id',$usuario)->where('status','Pago')->sum('valor_reais');
	    $saques_reais = ($saques_re * 100) / 90;
	    
	    
        if($saques <= 0){
		    $dados['Saques_reais'] = 0;
        	$dados['Saques_bitcoin'] = number_format($saques,8,".","");  
		}else{
        	//$dados['Saques_reais'] = $saques * $valid_mbk_x['data']['last'];
        	$dados['Saques_reais'] = $saques_reais;
        	$dados['Saques_bitcoin'] = number_format($saques,8,".","");  
		}
        
        $dados['Saques'] = saqueModel::where('usuario_id',$usuario)->where('status','Pago')->get();
        foreach ($dados['Saques'] as $key => $value) {
            //$value->valor_sacado = number_format(($value->valor * 100) / 90,8,".","");
            $value->valor = number_format($value->valor,8,".","");
            $value->valor_receber = number_format($value->valor_receber,8,".","");
            
		    $value->data_saque = date("d/m/Y H:i:s", strtotime($value->data_saque)); 
		    $value->data_recebimento = date("d/m/Y H:i:s", strtotime($value->data_recebimento)); 
        }
		
		return $this->view->render($res,'cliente/saques_recebidos.html',array('baseurl'=>base_url ,'dados'=>$dados));
	}

    function saques_rejeitados($req,$res,$args){
		$usuario = $_SESSION['id'];
		$Dusuario = usuarioModel::where('usuario_id', $usuario)->get()[0];
		
        if($Dusuario->acesso == 'Investidor'){
	        if($_SESSION['admin_id'] != $_SESSION['id']){
    	        $dados['Acesso_admin'] = 'Sim';
    	    }
	    }

        if($usuario == ''){
           $url = $this->router->pathFor('login');
		   return $res->withStatus(200)->withHeader('Location', $url);
        }
        
        if($Dusuario->pin == ''){
           $url = $this->router->pathFor('pin');
		   return $res->withStatus(200)->withHeader('Location', $url);
        }

    	if($Dusuario->acesso == 'Investidor'){
	        if($_SESSION['admin_id'] != $_SESSION['id']){
    	        $dados['Acesso_admin'] = 'Sim';
    	        $_SESSION['ant_id'] = $_SESSION['admin_id'];
    	    }
	    }
	    
	    /*$mes_atual = date('m');
	    $mes_passado = $mes_atual - 1;
	    if(strlen($mes_passado) == 1){
	        $mes_passado = '0'.$mes_passado;    
	    }
	    
	    $data_atual1 = date('Y-m-01 00:00:00');
	    $data_atual2 = date('Y-m-t 23:59:59');
	    
	    $data_passado1 = date('Y-'.$mes_passado.'-01 00:00:00');
	    $data_passado2 = date('Y-'.$mes_passado.'-t 23:59:59');
	    
	    //echo "DATA ATUAL 1: ".$data_atual1." - DATA ATUAL 2: ".$data_atual2." - DATA PASSADO 1: ".$data_passado1." - DATA PASSADO 2: ".$data_passado2."<br>";
	    
	    $dados['Saques_passado'] = saqueModel::where('usuario_id',$usuario)->where('status','Pago')->where('data_saque','>=',$data_passado1)->where('data_saque','<=',$data_passado2)->sum('valor');
	    $dados['Saques_mes'] = saqueModel::where('usuario_id',$usuario)->where('status','Pago')->where('data_saque','>=',$data_atual1)->where('data_saque','<=',$data_atual2)->sum('valor');
	    */
	    
		$dados['Acesso'] = $Dusuario->acesso;
		$dados['Nome'] = $Dusuario->nome;
		$dados['Email'] = $Dusuario->email;
		$dados['Usuario'] = $Dusuario->usuario;  
		$dados['Foto'] = $Dusuario->foto;  
		$dados['Pais'] = $Dusuario->pais;
		$dados['Cpf'] = $Dusuario->cpf;
        $dados['Genero'] = $Dusuario->genero;
        
        
        
	    $saques_pen = saqueModel::where('usuario_id',$usuario)->where('status','Pago')->sum('valor');
	    $saques = ($saques_pen * 100) / 90;
	    $saques_re = saqueModel::where('usuario_id',$usuario)->where('status','Pago')->sum('valor_reais');
	    $saques_reais = ($saques_re * 100) / 90;
	    
	    
        if($saques <= 0){
		    $dados['Saques_reais'] = 0;
        	$dados['Saques_bitcoin'] = number_format($saques,8,".","");  
		}else{
        	//$dados['Saques_reais'] = $saques * $valid_mbk_x['data']['last'];
        	$dados['Saques_reais'] = $saques_reais;
        	$dados['Saques_bitcoin'] = number_format($saques,8,".","");  
		}
        
        $dados['Saques'] = saqueModel::where('usuario_id',$usuario)->where('status','Rejeitado')->get();
        foreach ($dados['Saques'] as $key => $value) {
            //$value->valor_sacado = number_format(($value->valor * 100) / 90,8,".","");
            $value->valor = number_format($value->valor,8,".","");
            $value->valor_receber = number_format($value->valor_receber,8,".","");
            
            
		    $value->data_saque = date("d/m/Y H:i:s", strtotime($value->data_saque)); 
		    $value->data_recebimento = date("d/m/Y H:i:s", strtotime($value->data_recebimento)); 
        }
		
		return $this->view->render($res,'cliente/saques_rejeitados.html',array('baseurl'=>base_url ,'dados'=>$dados));
	}
    
    function rede($req,$res,$args){
		$usuario = $_SESSION['id'];
		$Dusuario = usuarioModel::where('usuario_id', $usuario)->get()[0];
		
        if($usuario == ''){
            $url = $this->router->pathFor('login');
		    return $res->withStatus(200)->withHeader('Location', $url);
        }
        
        /*if($Dusuario->pin == ''){
           $url = $this->router->pathFor('pin');
		   return $res->withStatus(200)->withHeader('Location', $url);
        }*/
		
		if($Dusuario->acesso == 'Investidor'){
	        if($_SESSION['admin_id'] != $_SESSION['id']){
    	        $dados['Acesso_admin'] = 'Sim';
    	        $_SESSION['ant_id'] = $_SESSION['admin_id'];
    	    }
	    }
	    
		$dados['Usu'] = $args['id'];
		$dados['Acesso'] = $Dusuario->acesso;
		$dados['Nome'] = $Dusuario->nome;
		$dados['Email'] = $Dusuario->email;
		$dados['Usuario'] = $Dusuario->usuario;
        $dados['Cpf'] = $Dusuario->cpf;
        $dados['Genero'] = $Dusuario->genero;
        
        if(isset($args['id'])){
            $patrocinador = $args['id'];
        }else{
            $patrocinador = $Dusuario->usuario;
        }
        
        
        $dados['Indicados'] = usuarioModel::where('patrocinador', $patrocinador)->get();
        foreach ($dados['Indicados'] as $key => $value) {
            $value->hora_cadastro = date("H:i:s", strtotime($value->data_cadastro));
			$value->data_cadastro = date("d/m/Y", strtotime($value->data_cadastro));
		}
		
		
		
		return $this->view->render($res,'cliente/rede.html',array('baseurl'=>base_url ,'dados'=>$dados));
	}


    function indicados($req,$res,$args){
		$usuario = $_SESSION['id'];
		$Dusuario = usuarioModel::where('usuario_id', $usuario)->get()[0];
		
		if($usuario == ''){
            $url = $this->router->pathFor('login');
		    return $res->withStatus(200)->withHeader('Location', $url);
        }
        
        if($Dusuario->pin == ''){
           $url = $this->router->pathFor('pin');
		   return $res->withStatus(200)->withHeader('Location', $url);
        }

		if($Dusuario->acesso == 'Investidor'){
	        if($_SESSION['admin_id'] != $_SESSION['id']){
    	        $dados['Acesso_admin'] = 'Sim';
    	        $_SESSION['ant_id'] = $_SESSION['admin_id'];
    	    }
	    }
	    
		$dados['Indicados'] = usuarioModel::where('patrocinador', $Dusuario->usuario)->get();
		$dados['Acesso'] = $Dusuario->acesso;
		$dados['Nome'] = $Dusuario->nome;
		$dados['Email'] = $Dusuario->email;
		$dados['Usuario'] = $Dusuario->usuario;
        
        foreach ($dados['Indicados'] as $key => $value) {
			$value->data_cadastro = date("d/m/Y H:i:s", strtotime($value->data_cadastro));
		}
		
		return $this->view->render($res,'cliente/indicados.html',array('baseurl'=>base_url ,'dados'=>$dados));
	}

	function plano_carreira($req,$res,$args){
	    $usuario = $_SESSION['id'];    
	    $Dusuario = usuarioModel::where('usuario_id', $usuario)->get()[0];
	    
	    $now = date("Y-m-d 00:00:00");
		$now2 = date("Y-m-d");
		$agora = date("H");
		
		if(isset($args['id'])){
    		$usuario     = $args['id'];
    		$us = usuarioModel::where('usuario', $usuario)->get()[0];
    		
    		$_SESSION['id'] = $us->usuario_id;
    	    //header("Refresh:0;");    	
		}
		
		/*if(isset($args['id'])){
	        $_SESSION['id'] = $args['id'];    
	        $dados['antigo_id'] = $_SESSION['antigo_id'];
	    }*/
	    
	    if(isset($_SESSION['antigo_id'])){
	        $dados['antigo_id'] = $_SESSION['antigo_id'];
	    }
	    
		$dados['Id'] = $Dusuario->usuario_id;
		$dados['Nome'] = $Dusuario->nome;
		$dados['Usuario'] = $Dusuario->usuario;
		$dados['Cadastro'] = date("d/m/Y H:i:s", strtotime($Dusuario->data_cadastro));
		$dados['Email'] = $Dusuario->email;
		$dados['Acesso'] = $Dusuario->acesso;
		$dados['Carteira_pontos'] = $Dusuario->carteira_pontos;
		$dados['Whatsapp'] = $Dusuario->whatsapp;
		$dados['Cpf'] = $Dusuario->cpf;
		$dados['Foto'] = $Dusuario->foto;
		$dados['Genero'] = $Dusuario->genero;
		
		
		
	    if($Dusuario->acesso == 'Investidor'){
	        if($_SESSION['admin_id'] != $_SESSION['id']){
    	        $dados['Acesso_admin'] = 'Sim';
    	        $_SESSION['ant_id'] = $_SESSION['admin_id'];
    	    }
	    }
	    

        if($usuario == ''){
           $url = $this->router->pathFor('login');
		   return $res->withStatus(200)->withHeader('Location', $url);
        }
		
		if($Dusuario->pin == ''){
           $url = $this->router->pathFor('pin');
		   return $res->withStatus(200)->withHeader('Location', $url);
        }
		

		$ptu = pontosModel::where('usuario_id',$usuario)->whereNull('patrocinador')->sum('pontos');
		$ptp = pontosModel::where('patrocinador',$usuario)->sum('pontos');
        $dados['Pontos'] = $ptu + $ptp;
        //$dados['Pontos'] = 2325500;
        
        
        $start_direto = usuarioModel::where('patrocinador',$Dusuario->usuario)->where('graduacao', 'Start')->get()->count();
        $expansor_direto = usuarioModel::where('patrocinador',$Dusuario->usuario)->where('graduacao', 'Expansor')->get()->count();
        $bronze_direto = usuarioModel::where('patrocinador',$Dusuario->usuario)->where('graduacao', 'Bronze')->get()->count();
        $prata_direto = usuarioModel::where('patrocinador',$Dusuario->usuario)->where('graduacao', 'Prata')->get()->count();
        $ouro_direto = usuarioModel::where('patrocinador',$Dusuario->usuario)->where('graduacao', 'Ouro')->get()->count();
        $rubi_direto = usuarioModel::where('patrocinador',$Dusuario->usuario)->where('graduacao', 'Rubi')->get()->count();
        $esmeralda_direto = usuarioModel::where('patrocinador',$Dusuario->usuario)->where('graduacao', 'Esmeralda')->get()->count();
        $diamante_direto = usuarioModel::where('patrocinador',$Dusuario->usuario)->where('graduacao', 'Diamante')->get()->count();
        $duplo_direto = usuarioModel::where('patrocinador',$Dusuario->usuario)->where('graduacao', 'Duplo Diamante')->get()->count();
        $triplo_direto = usuarioModel::where('patrocinador',$Dusuario->usuario)->where('graduacao', 'Triplo Diamante')->get()->count();
        
        
        $start_porc = ($dados['Pontos'] * 100) / 2500;
        if($dados['Pontos'] >= 2500){
            $dados['Start_porc'] = 100;
            $dados['Graduacao'] = 'Start';
            $dados['Start_status'] = 'Completo';
            $dados['Start_pontos'] = 'Completo';
        }else if($dados['Pontos'] == 0){
            $dados['Start_pontos'] = 'Incompleto';
            $dados['Start_status'] = 'Incompleto';
            $dados['Start_porc'] = 0;
        }else{ 
            $dados['Start_pontos'] = 'Incompleto';
            $dados['Start_status'] = 'Incompleto';
            $dados['Start_porc'] = number_format($start_porc,2,'.','');
        }
        
        
        $expansor_porc = ($dados['Pontos'] * 100) / 3000;
        if($dados['Pontos'] >= 3000){
            $dados['Expansor_porc'] = 100;
            $dados['Expansor_pontos'] = 'Completo';
            //if($start_direto >= 1){
            if($start_direto >= 1 || $expansor_direto >= 1 || $bronze_direto >= 1 || $prata_direto >= 1 || $ouro_direto >= 1 || $rubi_direto >= 1 || $esmeralda_direto >= 1 || $diamante_direto >= 1 || $duplo_direto >= 1 || $triplo_direto >= 1){
                $dados['Expansor_status'] = 'Completo';
                $dados['Graduacao'] = 'Expansor';
            }else{
                $dados['Expansor_status'] = 'Incompleto';    
            }
        }else if($dados['Pontos'] <= 0){
            $dados['Expansor_status'] = 'Incompleto';
            $dados['Expansor_pontos'] = 'Incompleto';
            $dados['Expansor_porc'] = 0;
        }else{
            $dados['Expansor_pontos'] = 'Incompleto';
            $dados['Expansor_status'] = 'Incompleto';
            $dados['Expansor_porc'] = number_format($expansor_porc,2,'.','');
        }
        
        if($start_direto >= 1 || $expansor_direto >= 1 || $bronze_direto >= 1 || $prata_direto >= 1 || $ouro_direto >= 1 || $rubi_direto >= 1 || $esmeralda_direto >= 1 || $diamante_direto >= 1 || $duplo_direto >= 1 || $triplo_direto >= 1){
            $dados['Expansor_diretos'] = 'Completo';
        }else{
            $dados['Expansor_diretos'] = 'Incompleto';
        }
        
        $bronze_porc = ($dados['Pontos'] * 100) / 5000;
        if($dados['Pontos'] >= 5000){
            $dados['Bronze_porc'] = 100;
            $dados['Bronze_pontos'] = 'Completo';
            //if($expansor_direto >= 1){
            if($expansor_direto >= 1 || $bronze_direto >= 1 || $prata_direto >= 1 || $ouro_direto >= 1 || $rubi_direto >= 1 || $esmeralda_direto >= 1 || $diamante_direto >= 1 || $duplo_direto >= 1 || $triplo_direto >= 1){
                $dados['Graduacao'] = 'Bronze';
                $dados['Bronze_status'] = 'Completo';
            }else{
                $dados['Bronze_status'] = 'Incompleto';    
            }
        }else if($dados['Pontos'] <= 0){
            $dados['Bronze_status'] = 'Incompleto';    
            $dados['Bronze_pontos'] = 'Incompleto';
            $dados['Bronze_porc'] = 0;
        }else{ 
            $dados['Bronze_pontos'] = 'Incompleto';
            $dados['Bronze_status'] = 'Incompleto';    
            $dados['Bronze_porc'] = number_format($bronze_porc,2,'.','');
        }
        
        if($expansor_direto >= 1 || $bronze_direto >= 1 || $prata_direto >= 1 || $ouro_direto >= 1 || $rubi_direto >= 1 || $esmeralda_direto >= 1 || $diamante_direto >= 1 || $duplo_direto >= 1 || $triplo_direto >= 1){
        //if($expansor_direto >= 1){
            $dados['Bronze_diretos'] = 'Completo';
        }else{
            $dados['Bronze_diretos'] = 'Incompleto';
        }
        
        $prata_porc = ($dados['Pontos'] * 100) / 10000; 
        if($dados['Pontos'] >= 10000){
            $dados['Prata_porc'] = 100;
            $dados['Prata_pontos'] = 'Completo';
            if($bronze_direto >= 1 || $prata_direto >= 1 || $ouro_direto >= 1 || $rubi_direto >= 1 || $esmeralda_direto >= 1 || $diamante_direto >= 1 || $duplo_direto >= 1 || $triplo_direto >= 1){
                $dados['Graduacao'] = 'Prata';
                $dados['Prata_status'] = 'Completo';
            }else{
                $dados['Prata_status'] = 'Incompleto';
            }
        }else if($dados['Pontos'] <= 0){
            $dados['Prata_pontos'] = 'Incompleto';
            $dados['Prata_status'] = 'Incompleto';    
            $dados['Prata_porc'] = 0;
        }else{ 
            $dados['Prata_pontos'] = 'Incompleto';
            $dados['Prata_status'] = 'Incompleto';    
            $dados['Prata_porc'] = number_format($prata_porc,2,'.','');
        }
        
        if($bronze_direto >= 1 || $prata_direto >= 1 || $ouro_direto >= 1 || $rubi_direto >= 1 || $esmeralda_direto >= 1 || $diamante_direto >= 1 || $duplo_direto >= 1 || $triplo_direto >= 1){
        //if($bronze_direto >= 1){
            $dados['Prata_diretos'] = 'Completo';
        }else{
            $dados['Prata_diretos'] = 'Incompleto';
        }
        
        if($prata_direto >= 1 || $ouro_direto >= 1 || $rubi_direto >= 1 || $esmeralda_direto >= 1 || $diamante_direto >= 1 || $duplo_direto >= 1 || $triplo_direto >= 1){
        //if($prata_direto >= 1){
            $dados['Ouro_diretos'] = 'Completo';
        }else{
            $dados['Ouro_diretos'] = 'Incompleto';
        }
        
        $ouro_porc = ($dados['Pontos'] * 100) / 15000; 
        if($dados['Pontos'] >= 15000){
            $dados['Ouro_porc'] = 100;
            $dados['Ouro_pontos'] = 'Completo';
            if($dados['Ouro_diretos'] == 'Completo'){
                $dados['Graduacao'] = 'Ouro';
                $dados['Ouro_status'] = 'Completo';
            }else{
                $dados['Ouro_status'] = 'Incompleto';    
            }
        }else if($dados['Pontos'] <= 0){
            $dados['Ouro_pontos'] = 'Incompleto';
            $dados['Ouro_status'] = 'Incompleto';
            $dados['Ouro_porc'] = 0;
        }else{ 
            $dados['Ouro_pontos'] = 'Incompleto';
            $dados['Ouro_status'] = 'Incompleto';    
            $dados['Ouro_porc'] = number_format($ouro_porc,2,'.','');;
        }
        
        
        
        $rubi_porc = ($dados['Pontos'] * 100) / 20000; 
        if($dados['Pontos'] >= 20000){
            $dados['Rubi_porc'] = 100;
            $dados['Rubi_pontos'] = 'Completo';
            if($ouro_direto >= 1){
                $dados['Graduacao'] = 'Rubi';
                $dados['Rubi_status'] = 'Completo';
            }else{
                $dados['Rubi_status'] = 'Incompleto';    
            }
        }else if($dados['Pontos'] <= 0){
            $dados['Rubi_pontos'] = 'Incompleto';
            $dados['Rubi_status'] = 'Incompleto';
            $dados['Rubi_porc'] = 0;
        }else{ 
            $dados['Rubi_pontos'] = 'Incompleto';
            $dados['Rubi_status'] = 'Incompleto';
            $dados['Rubi_porc'] = number_format($rubi_porc,2,'.','');;
        }
        
        if($ouro_direto >= 1 || $rubi_direto >= 1 || $esmeralda_direto >= 1 || $diamante_direto >= 1 || $duplo_direto >= 1 || $triplo_direto >= 1){
        //if($ouro_direto >= 1){
            $dados['Rubi_diretos'] = 'Completo';
        }else{
            $dados['Rubi_diretos'] = 'Incompleto';
        }
        
        $esmeralda_porc = ($dados['Pontos'] * 100) / 30000; 
        if($dados['Pontos'] >= 30000){
            $dados['Esmeralda_porc'] = 100;
            $dados['Esmeralda_pontos'] = 'Completo';
            if($rubi_direto >= 2 || $esmeralda_direto >= 1 || $diamante_direto >= 1 || $duplo_direto >= 1 || $triplo_direto >= 1){
                $dados['Graduacao'] = 'Esmeralda';
                $dados['Esmeralda_status'] = 'Completo';
            }else{
                $dados['Esmeralda_status'] = 'Incompleto';
            }
        }else if($dados['Pontos'] <= 0){
            $dados['Esmeralda_pontos'] = 'Incompleto';
            $dados['Esmeralda_status'] = 'Incompleto';
            $dados['Esmeralda_porc'] = 0;
        }else{ 
            $dados['Esmeralda_pontos'] = 'Incompleto';
            $dados['Esmeralda_status'] = 'Incompleto';
            $dados['Esmeralda_porc'] = number_format($esmeralda_porc,2,'.','');;
        }
        
        if($rubi_direto >= 2 || $esmeralda_direto >= 1 || $diamante_direto >= 1 || $duplo_direto >= 1 || $triplo_direto >= 1){
        //if($rubi_direto >= 2){
            $dados['Esmeralda_diretos'] = 'Completo';
        }else{
            $dados['Esmeralda_diretos'] = 'Incompleto';
        }
        
        $diamante_porc = ($dados['Pontos'] * 100) / 80000; 
        if($dados['Pontos'] >= 80000){
            $dados['Diamante_porc'] = 100;
            $dados['Diamante_pontos'] = 'Completo';
            if($esmeralda_direto >= 2 || $diamante_direto >= 1 || $duplo_direto >= 1 || $triplo_direto >= 1){
                $dados['Graduacao'] = 'Diamante';
                $dados['Diamante_status'] = 'Completo';
            }else{
                $dados['Diamante_status'] = 'Incompleto';
            }
        }else if($dados['Pontos'] <= 0){
            $dados['Diamante_pontos'] = 'Incompleto';
            $dados['Diamante_status'] = 'Incompleto';
            $dados['Diamante_porc'] = 0;
        }else{ 
            $dados['Diamante_pontos'] = 'Incompleto';
            $dados['Diamante_status'] = 'Incompleto';
            $dados['Diamante_porc'] = number_format($diamante_porc,2,'.','');;
        }
        
        if($esmeralda_direto >= 2 || $diamante_direto >= 1 || $duplo_direto >= 1 || $triplo_direto >= 1){
        //if($esmeralda_direto >= 2){
            $dados['Diamante_diretos1'] = 'Completo';
        }else{
            $dados['Diamante_diretos1'] = 'Incompleto';
        }
        
        if($rubi_direto >= 1 || $esmeralda_direto >= 1 || $diamante_direto >= 1 || $duplo_direto >= 1 || $triplo_direto >= 1){
        //if($rubi_direto >= 1){
            $dados['Diamante_diretos2'] = 'Completo';
        }else{
            $dados['Diamante_diretos2'] = 'Incompleto';
        }
        
        $duplo_porc = ($dados['Pontos'] * 100) / 160000; 
        if($dados['Pontos'] >= 160000){
            $dados['Duplo_porc'] = 100;
            $dados['Duplo_pontos'] = 'Completo';
            if($diamante_direto >= 2 && $esmeralda_direto >= 1){
                $dados['Graduacao'] = 'Duplo Diamante';
                $dados['Duplo_status'] = 'Completo';
            }else{
                $dados['Duplo_status'] = 'Incompleto';
            }
        }else if($dados['Pontos'] <= 0){
            $dados['Duplo_pontos'] = 'Incompleto';
            $dados['Duplo_status'] = 'Incompleto';
            $dados['Duplo_porc'] = 0;
        }else{ 
            $dados['Duplo_pontos'] = 'Incompleto';
            $dados['Duplo_status'] = 'Incompleto';
            $dados['Duplo_porc'] = number_format($duplo_porc,2,'.','');;
        }
        
        if($diamante_direto >= 2 || $duplo_direto >= 1 || $triplo_direto >= 1){
        //if($diamante_direto >= 2){
            $dados['Duplo_diretos1'] = 'Completo';
        }else{
            $dados['Duplo_diretos1'] = 'Incompleto';
        }
        
        if($esmeralda_direto >= 1 || $diamante_direto >= 1 || $duplo_direto >= 1 || $triplo_direto >= 1){
        //if($esmeralda_direto >= 1){
            $dados['Duplo_diretos2'] = 'Completo';
        }else{    
            $dados['Duplo_diretos2'] = 'Incompleto';
        }
        
        if($dados['Duplo_pontos'] == 'Completo' && $dados['Duplo_diretos1'] == 'Completo' && $dados['Duplo_diretos2'] == 'Completo'){
            $dados['Duplo_status'] = 'Completo';
        }
        
        $triplo_porc = ($dados['Pontos'] * 100) / 2000000; 
        if($dados['Pontos'] >= 2000000){
            $dados['Triplo_porc'] = 100;
            $dados['Triplo_pontos'] = 'Completo';
            if($duplo_direto >= 2 && $diamante_direto >= 1){
                $dados['Graduacao'] = 'Triplo Diamante';
                $dados['Triplo_status'] = 'Completo';
            }else{
                $dados['Triplo_status'] = 'Incompleto';
            }
        }else if($dados['Pontos'] <= 0){
            $dados['Triplo_porc'] = 0;
            $dados['Triplo_pontos'] = 'Incompleto';
            $dados['Triplo_status'] = 'Incompleto';
        }else{ 
            $dados['Triplo_pontos'] = 'Incompleto';
            $dados['Triplo_status'] = 'Incompleto';
            $dados['Triplo_porc'] = number_format($triplo_porc,2,'.','');;
        }
        
        if($duplo_direto >= 2 || $triplo_direto >= 1){
        //if($duplo_direto >= 2){
            $dados['Triplo_diretos1'] = 'Completo';
        }else{
            $dados['Triplo_diretos1'] = 'Incompleto';
        }
        
        if($diamante_direto >= 1 || $duplo_direto >= 1 || $triplo_direto >= 1){
        //if($diamante_direto >= 1){
            $dados['Triplo_diretos2'] = 'Completo';
        }else{        
            $dados['Triplo_diretos2'] = 'Incompleto';
        }
        
        if($dados['Triplo_pontos'] == 'Completo' && $dados['Triplo_diretos1'] == 'Completo' && $dados['Triplo_diretos2'] == 'Completo'){
            $dados['Triplo_status'] = 'Completo';
        }
        
        usuarioModel::where('usuario_id', $usuario)->update(array('graduacao'=>$dados['Graduacao']));
        
        //echo "GRADUAÇÃO: ".$dados['Graduacao']." - USUÁRIO: ".$usuario."<br>";
        
        
        /*$public_key = 'cdc606942d5a9c7d3928af6854ade6ef819620f740bc016f4333dc90eae2db20'; 
        $private_key = 'E6F9517d96f4b9890f35D7a708309290FCCb541113C3a2dc357FdD27ADBce923';  
        
        $now = date('Y-m-d H:i:s');
        $valor = 0.0005;
        $recebimento = $valor * 2;
                        
                    $data01 = gmdate('d/m/Y H:i:s',strtotime('+21 day',strtotime($now)));
                    $data1 = str_replace("/", "-", $data01);
                    $data_recebimento = date('Y-m-d H:i:s', strtotime($data1));
                    
                    $req = array();
        
                    $req['version'] = 1; 
                    $req['cmd'] = "create_transaction";
                    
                    //$req['currency'] = "BTC";
                    $req['currency1'] = "BTC";
                    $req['currency2'] = "BTC";
                    $req['amount'] = $valor;
                    $req['timeout'] = 604800;
                    //$req['timeout'] = 259200;
                    $req['buyer_email'] = 'pittybispo@gmail.com';
                    $req['item'] = 'Investimento #';
                    //$req['ipn_url'] = 'https://speedinvest.investtrade.com.br/investimentos-ativos';
                    
                    //$req['success_url'] = 'https://speedinvest.investtrade.com.br/investimentos-ativos';
                    //$req['cancel_url'] = 'https://speedinvest.investtrade.com.br/backoffice';
                    
                    $req['key'] = $public_key; 
                    $req['format'] = 'json'; //supported values are json and xml 
                    
                    $req['key'] = $public_key; 
                    $req['format'] = 'json'; //supported values are json and xml 
                     
                    // Generate the query string 
                    $post_data = http_build_query($req, '', '&'); 
                     
                    // Calculate the HMAC signature on the POST data 
                    $hmac = hash_hmac('sha512', $post_data, $private_key); 
                     
                    // Use curl to hit the endpoint so that you can send the required headers 
                    $ch = curl_init('https://www.coinpayments.net/api.php'); 
                        curl_setopt($ch, CURLOPT_FAILONERROR, TRUE); 
                        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); 
                        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0); 
                    curl_setopt($ch, CURLOPT_HTTPHEADER, array('HMAC: '.$hmac)); 
                    curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data); 
                     
                    // Execute the call and close cURL handle      
                    $data = curl_exec($ch); 
                
                    // dump the data returned back from coinpayments
                    var_dump($data);
                    
                    $valid_mbk_x = json_decode($data, true);
        
                    //echo $valid_mbk_x['result']['status_url'];  */
          
        /************************************************************************/
        // ATUALIZAR GRADUAÇÃO
        
        /*$ptu = pontosModel::where('usuario_id',$usuario)->whereNull('patrocinador')->sum('pontos');
		$ptp = pontosModel::where('patrocinador',$usuario)->sum('pontos');
        $dados['Pontos'] = $ptu + $ptp;
        //$dados['Pontos'] = 2325500;
        
        
        $start_direto = usuarioModel::where('patrocinador',$Dusuario->usuario)->where('graduacao', 'Start')->get()->count();
        $expansor_direto = usuarioModel::where('patrocinador',$Dusuario->usuario)->where('graduacao', 'Expansor')->get()->count();
        $bronze_direto = usuarioModel::where('patrocinador',$Dusuario->usuario)->where('graduacao', 'Bronze')->get()->count();
        $prata_direto = usuarioModel::where('patrocinador',$Dusuario->usuario)->where('graduacao', 'Prata')->get()->count();
        $ouro_direto = usuarioModel::where('patrocinador',$Dusuario->usuario)->where('graduacao', 'Ouro')->get()->count();
        $rubi_direto = usuarioModel::where('patrocinador',$Dusuario->usuario)->where('graduacao', 'Rubi')->get()->count();
        $esmeralda_direto = usuarioModel::where('patrocinador',$Dusuario->usuario)->where('graduacao', 'Esmeralda')->get()->count();
        $diamante_direto = usuarioModel::where('patrocinador',$Dusuario->usuario)->where('graduacao', 'Diamante')->get()->count();
        $duplo_direto = usuarioModel::where('patrocinador',$Dusuario->usuario)->where('graduacao', 'Duplo Diamante')->get()->count();
        $triplo_direto = usuarioModel::where('patrocinador',$Dusuario->usuario)->where('graduacao', 'Triplo Diamante')->get()->count();
        
        
        if($dados['Pontos'] >= 2500){
            $dados['Graduacao'] = 'Start';
        }
        
        if($dados['Pontos'] >= 3000){
            if($start_direto >= 1){
                $dados['Graduacao'] = 'Expansor';
            }
        }
        
        if($dados['Pontos'] >= 5000){
            if($expansor_direto >= 1){
                $dados['Graduacao'] = 'Bronze';
            }
        }
        
        if($dados['Pontos'] >= 10000){
            if($bronze_direto >= 1){
                $dados['Graduacao'] = 'Prata';
            }
        }
        
        if($dados['Pontos'] >= 15000){
            if($prata_direto >= 1){
                $dados['Graduacao'] = 'Ouro';
            }
        }
        
        if($dados['Pontos'] >= 20000){
            if($ouro_direto >= 1){
                $dados['Graduacao'] = 'Rubi';
            }
        }
        
        if($ouro_direto >= 1){
            $dados['Rubi_diretos'] = 'Completo';
        }else{
            $dados['Rubi_diretos'] = 'Incompleto';
        }
        
        if($dados['Pontos'] >= 30000){
            if($rubi_direto >= 2){
                $dados['Graduacao'] = 'Esmeralda';
            }
        }
        
        if($dados['Pontos'] >= 80000){
            if($esmeralda_direto >= 2 && $rubi_direto >= 1){
                $dados['Graduacao'] = 'Diamante';
            }
        }
         
        if($dados['Pontos'] >= 160000){
            if($diamante_direto >= 2 && $esmeralda_direto >= 1){
                $dados['Graduacao'] = 'Duplo Diamante';
            }
        }
        
        if($dados['Pontos'] >= 2000000){
            if($duplo_direto >= 2 && $diamante_direto >= 1){
                $dados['Graduacao'] = 'Triplo Diamante';
            }
        }
        
        echo "GRADUAÇÃO: ".$dados['Graduacao']." - PONTOS: ".$dados['Pontos']." - START DIRETO: ".$start_direto."<br>";
	
	    usuarioModel::where('usuario_id', $usuario)->update(array('graduacao'=>$dados['Graduacao']));*/
        
        
		return $this->view->render($res,'cliente/plano_carreira.html',array('baseurl'=>base_url ,'dados'=>$dados,'dados'=>$dados));
	}
	
	function pontos($req,$res,$args){
		$usuario = $_SESSION['id'];
		$Dusuario = usuarioModel::where('usuario_id', $usuario)->get()[0];
		
		if($usuario == ''){
            $url = $this->router->pathFor('login');
		    return $res->withStatus(200)->withHeader('Location', $url);
        }

		if($Dusuario->acesso == 'Investidor'){
	        if($_SESSION['admin_id'] != $_SESSION['id']){
    	        $dados['Acesso_admin'] = 'Sim';
    	        $_SESSION['ant_id'] = $_SESSION['admin_id'];
    	    }
	    }
	    
		
		$dados['Acesso'] = $Dusuario->acesso;
		$dados['Nome'] = $Dusuario->nome;
		$dados['Email'] = $Dusuario->email;
		$dados['Usuario'] = $Dusuario->usuario;
        
        
        $dados['Pontos'] = pontosModel::where('patrocinador', $Dusuario->usuario)->get();
        foreach ($dados['Pontos'] as $key => $value) {
			$value->data_cadastro = date("d/m/Y H:i:s", strtotime($value->data_cadastro));
		}
		
		return $this->view->render($res,'cliente/pontos.html',array('baseurl'=>base_url ,'dados'=>$dados));
	}

    function solicitar_saque($req,$res,$args){
		$message = '';
		$now = date("Y-m-d H:i:s");
		$usuario = $_SESSION['id'];
		$Dusuario = usuarioModel::where('usuario_id',$usuario)->get()[0];
		
		$sistema = sistemaModel::where('sistema_id',1)->get()[0];
        
        if($Dusuario->acesso == 'Investidor'){
	        if($_SESSION['admin_id'] != $_SESSION['id']){
    	        $dados['Acesso_admin'] = 'Sim';
    	        $_SESSION['ant_id'] = $_SESSION['admin_id'];
    	    }
	    }

        if($usuario == ''){
           $url = $this->router->pathFor('login');
		   return $res->withStatus(200)->withHeader('Location', $url);
        }
        
        if($Dusuario->pin == ''){
           $url = $this->router->pathFor('pin');
		   return $res->withStatus(200)->withHeader('Location', $url);
        }
        
		$agora = date("H");
		$dia = date("d");
		$mes = date("m");
		$ano = date("Y");
		$m = date("Y-m-d 00:00:00");
		
        $dados['Usuario'] = $Dusuario->usuario;
        $dados['Nome'] = $Dusuario->nome;
        $dados['Email'] = $Dusuario->email;
		$dados['Acesso'] = $Dusuario->acesso;
		$dados['Bitcoin'] = $Dusuario->bitcoin;
		$dados['Pais'] = $Dusuario->pais;
		$dados['Foto'] = $Dusuario->foto;
		$dados['Cpf'] = $Dusuario->cpf;
		$dados['Documento_status'] = $Dusuario->documento_status;
		$dados['Genero'] = $Dusuario->genero;
		
		
		/*$valid_mbk_c = curl_init();
		curl_setopt_array($valid_mbk_c, array(
		    CURLOPT_URL => "https://api.bitcointrade.com.br/v3/public/BRLBTC/ticker/",
		    CURLOPT_RETURNTRANSFER => true,
		    CURLOPT_ENCODING => "",
		    CURLOPT_MAXREDIRS => 10,
		    CURLOPT_TIMEOUT => 0,
		    CURLOPT_FOLLOWLOCATION => false,
		    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
		    CURLOPT_CUSTOMREQUEST => "GET",
		    CURLOPT_HTTPHEADER => array(
		        "Content-Type: application/json"
	        ),
	    ));

	    $valid_mbk_r = curl_exec($valid_mbk_c);
	    $valid_mbk_e = curl_error($valid_mbk_c);
	    curl_close($valid_mbk_c);
	    $valid_mbk_x = json_decode($valid_mbk_r, true);
        
        //$dados['Btc_valor'] = $valid_mbk_x['data']['last'];
        */
        
        $dados['Carteira'] = rendimentoModel::where('usuario_id',$Dusuario->usuario_id)->sum('valor');
    	$saques = saqueModel::where('usuario_id',$Dusuario->usuario_id)->sum('valor');
            
        //$saldo = $dados['Carteira'] + $dados['Bonus'] - $saques;
    	
        
        /*if($saldo <= 0){
		    $dados['Saldo'] = 0.000000;
		    $dados['Saldo_reais'] = 0;
		}else{
        	$dados['Saldo_reais'] = $saldo * $valid_mbk_x['data']['last'];
        	$dados['Saldo'] = number_format($saldo,8,".","");  
		}*/
		
		$bonus = bonusModel::where('patrocinador',$Dusuario->usuario_id)->sum('valor');
		$saquesb = saqueModel::where('usuario_id',$Dusuario->usuario_id)->where('tipo','Bônus')->where('status','!=','Rejeitado')->sum('valor');
		//$saquesb = saqueModel::where('usuario_id',$Dusuario->usuario_id)->where('tipo','Bônus')->where('status','!=','Rejeitado')->where('data_saque','<','2021-04-28')->sum('valor');
		//$saquesb2 = saqueModel::where('usuario_id',$Dusuario->usuario_id)->where('tipo','Bônus')->where('status','!=','Rejeitado')->where('data_saque','>=','2021-04-28')->sum('valor');
		
		$saquesb_rejei = saqueModel::where('usuario_id',$Dusuario->usuario_id)->where('tipo','Bônus')->where('status','Rejeitado')->sum('valor');
		$saquesbr = saqueModel::where('usuario_id',$Dusuario->usuario_id)->where('tipo','Bônus')->where('status','!=','Rejeitado')->sum('valor_reais');
		$saquesbr_rejei = saqueModel::where('usuario_id',$Dusuario->usuario_id)->where('tipo','Bônus')->where('status','Rejeitado')->sum('valor_reais');
		
		
		$dados['Bonus_bitcoin'] = number_format($bonus - $saquesb,8,".","");
		//$dados['Bonus_bitcoin'] = number_format($bonus - $saquesb + $saquesb_rejei,8,".","");
		//$bonus_reais = ($dados['Bonus_bitcoin'] * $valid_mbk_x['data']['last']) - $saquesbr + $saquesbr_rejei;
		//$bonus_reais = $dados['Bonus_bitcoin'] * $valid_mbk_x['data']['last'];
		/*echo "BONUS: ".$bonus."<br>";
		echo "SAQUES: ".$saquesb."<br>";
		$dif = $bonus - $saquesb;
		$resul = $dif - ($dif * 0.05);
		echo "DIF: ".number_format($dif,8,".","")." - RES: ".number_format($resul,8,".","")."<br>";*/
		
		if($bonus_reais > 0){
		    $dados['Bonus_reais'] = $bonus_reais;
		}else{
		    $dados['Bonus_reais'] = 0;
		}
		
		
		if($dados['Bonus_bitcoin'] > 0){
		    $dados['Bonus_bitcoin'] = $dados['Bonus_bitcoin'];
		}else{
		    $dados['Bonus_bitcoin'] = 0;
		}
		
		
		$lucro = rendimentoModel::where('usuario_id',$Dusuario->usuario_id)->sum('valor');
		$saquesl = saqueModel::where('usuario_id',$Dusuario->usuario_id)->where('tipo','Lucro')->where('status','!=','Rejeitado')->where('data_saque','<','2021-04-28')->sum('valor');
		$saquesl2 = saqueModel::where('usuario_id',$Dusuario->usuario_id)->where('tipo','Lucro')->where('status','!=','Rejeitado')->where('data_saque','>=','2021-04-28')->sum('valor');
		
		$saquesl_rejei = saqueModel::where('usuario_id',$Dusuario->usuario_id)->where('tipo','Lucro')->where('status','Rejeitado')->sum('valor');
		$saqueslr = saqueModel::where('usuario_id',$Dusuario->usuario_id)->where('tipo','Lucro')->where('status','!=','Rejeitado')->sum('valor_reais');
		$saqueslr_rejei = saqueModel::where('usuario_id',$Dusuario->usuario_id)->where('tipo','Lucro')->where('status','Rejeitado')->sum('valor_reais');
		
		
		//AJEITAR AQUI !!
		//$dados['Lucro_bitcoin'] = number_format($lucro - (($saquesl * 100) / 90),8,".","");
		//$dados['Lucro_bitcoin'] = number_format($lucro - (($saquesl * 100) / 90) - $saquesl2 + $saquesl_rejei ,8,".","");
		$dados['Lucro_bitcoin'] = number_format($lucro - (($saquesl * 100) / 95) - $saquesl2 ,8,".","");
		
		
		//$lucro_reais = ($dados['Lucro_bitcoin'] * $valid_mbk_x['data']['last']) - (($saquesr * 100) / 90);
		
		/*$lucro_reais = $dados['Lucro_bitcoin'] * $valid_mbk_x['data']['last'];
		$dados['Lucro_reais'] = $lucro_reais;
		
		if($lucro_reais > 0){
		    $dados['Lucro_reais'] = $lucro_reais;
		}else{
		    $dados['Lucro_reais'] = 0;
		}*/
		
		if($dados['Lucro_bitcoin'] > 0){
		    $dados['Lucro_bitcoin'] = $dados['Lucro_bitcoin'];
		}else{
		    $dados['Lucro_bitcoin'] = 0;
		}
		
		$dados['Desabilita'] = 0;
		
        // Variável que recebe o dia da semana (0 = Domingo, 1 = Segunda ...)
        $dias_da_semana = date('w', strtotime($now));
        if($dias_da_semana <> 0 && $dias_da_semana <> 6){
            $dados['Desabilita'] = 1;    
        }else{
            $dados['Desabilita'] = 0;
        }
        
        //echo "DIA DA SEMANA: ".$dias_da_semana;
        
        //$dados['Desabilita'] = 0;
		
		
		//echo "SAQUESL: ".$saquesl.'<br>';
		//echo "SAQUESL2: ".$saquesl2.'<br>';
		//echo "LUCRO: ".$lucro.'<br>';
        //echo "SALDO: ".$dados['Saldo'].'<br>';
        
        //$dados['Saldo'] = number_format($dados['Saldo'],2,',','.');
        
        
        
        if(isset($_POST['reenviar'])){
	        usuarioModel::where('usuario_id', $usuario)->update(array('documento_status'=>'Pendente','documento_motivo'=>NULL));
                        
            //$message = '<div class="alert alert-success" role="alert"><center><b>Foto alterada com sucesso.</b></center></div>';
            header("Refresh:0; url=../verificar-conta");
            
            //$resp['msg']    = "sucesso";
            //echo json_encode($resp);
            //exit;
	    }
	    
	    
        if(isset($_POST['_csrf'])){
		//if(isset($_POST['sacar'])){
			$valor = doubleval($_POST['valor']);
		    $tipo = isset($_POST['tipo']) ? htmlspecialchars(stripslashes(trim($_POST['tipo']))): null;
		    $pin = isset($_POST['pin']) ? htmlspecialchars(stripslashes(trim($_POST['pin']))): null;
		    
		    $now = date('Y-m-d H:i:s');
		    
		    if($dias_da_semana <> 0 && $dias_da_semana <> 6){
		    //if ( ( $dias_da_semana = gmdate('w', strtotime($now)) ) == '1') {
			//if($Dusuario->saque == 'manual'){
		        //$dados['Desabilita'] = 0;
    		    //$valor = intval($_POST['valor']);
    			    
    			$dados['Desabilita'] = 1;
    			
    			if($valor == 0){
                    $resp['msg']    = "saque zero";
                    echo json_encode($resp);
                    exit;
                }else if($valor < $sistema->saque_minimo){
                    $resp['msg']    = "saque mínimo";
                    echo json_encode($resp);
                    exit;
                }else if($Dusuario->bitcoin == ''){
                    $resp['msg']    = "sem conta";
                    echo json_encode($resp);
                    exit;
                }else if($Dusuario->documento_status == 'Pendente'){
                    $resp['msg']    = "documento não verificado";
                    echo json_encode($resp);
                    exit;
                }else if($Dusuario->pin == ''){
                    $resp['msg']    = "pin vazio";
                    echo json_encode($resp);
                    exit;
                }else if($Dusuario->pin != md5($pin)){
                    $resp['msg']    = "pin inválido";
                    echo json_encode($resp);
                    exit;
                }else{
                    if($tipo == 'Bônus'){
                        $val = $valor - ($valor * 0.05);
                        $valor_real = $valid_mbk_x['data']['last'] * $valor;
                		    
                        if($valor > $dados['Bonus_bitcoin']){
                            $resp['msg']    = "saldo insuficiente";
                            echo json_encode($resp);
                            exit;            
                        }else{
                            if($valor > 0){
                                saqueModel::insert(array('usuario_id'=>$usuario,'carteira'=>$Dusuario->bitcoin,'valor'=>$valor,'valor_receber'=>$val,'valor_reais'=>$valor_real,'status'=>'Aguardando','data_saque'=>$now,'tipo'=>'Bônus'));
            				
                				$resp['msg']    = "sucesso";
                                echo json_encode($resp);
                                exit;    
                            }
                        }
                    }else if($tipo == 'Lucro'){
                        $val = $valor - ($valor * 0.05);
                		//$valor_real = $valid_mbk_x['data']['last'] * $val;
                		$valor_real = $valid_mbk_x['data']['last'] * $valor;
                        
                        
                        if($valor > $dados['Lucro_bitcoin']){
                            $resp['msg']    = "saldo insuficiente";
                            echo json_encode($resp);
                            exit;            
                        }else{
                            if($valor > 0){
                                saqueModel::insert(array('usuario_id'=>$usuario,'carteira'=>$Dusuario->bitcoin,'valor'=>$valor,'valor_receber'=>$val,'valor_reais'=>$valor_real,'status'=>'Aguardando','data_saque'=>$now,'tipo'=>'Lucro'));
            				
                				$resp['msg']    = "sucesso";
                                echo json_encode($resp);
                                exit;    
                            }
                        }
                    }
                }
			}else{
				$dados['Desabilita'] = 0;
    		
				//$message = '<div class="alert alert-danger"><center><b>ERRO: Seu saque está configurado como <u>AUTOMÁTICO</u>.</b></center></div>'; 
				$resp['msg']    = "fora do dia";
                echo json_encode($resp);
                exit;
		    }
		}
		
		if(isset($_POST['_csrfadm'])){
		//if(isset($_POST['sacar'])){
			$valor = doubleval($_POST['valor']);
		    $tipo = isset($_POST['tipo']) ? htmlspecialchars(stripslashes(trim($_POST['tipo']))): null;
		    $id = isset($_POST['usuario_id']) ? htmlspecialchars(stripslashes(trim($_POST['usuario_id']))): null;
		    $lucro_bitcoin = isset($_POST['lucro_bitcoin']) ? htmlspecialchars(stripslashes(trim($_POST['lucro_bitcoin']))): null;
		    $bonus_bitcoin = isset($_POST['bonus_bitcoin']) ? htmlspecialchars(stripslashes(trim($_POST['bonus_bitcoin']))): null;
		    
		    $usu = usuarioModel::where('usuario_id',$id)->get()[0];
		    
		    $now = date('Y-m-d H:i:s');
		    
		    //if ( ( $dias_da_semana = gmdate('w', strtotime($now)) ) == '1') {
				    
    			if($valor == 0){
                    $resp['msg']    = "saque zero";
                    echo json_encode($resp);
                    exit;
                }else if($valor < $sistema->saque_minimo){
                    $resp['msg']    = "saque mínimo";
                    echo json_encode($resp);
                    exit;
                }else{
                    if($tipo == 'Bônus'){
                        $val = $valor - ($valor * 0.05);
                        $valor_real = $valid_mbk_x['data']['last'] * $valor;
                		    
                        if($valor > $bonus_bitcoin){
                            $resp['msg']    = "saldo insuficiente";
                            echo json_encode($resp);
                            exit;            
                        }else{
                            if($valor > 0){
                                saqueModel::insert(array('usuario_id'=>$usu->usuario_id,'carteira'=>$usu->bitcoin,'valor'=>$valor,'valor_receber'=>$val,'valor_reais'=>$valor_real,'status'=>'Aguardando','data_saque'=>$now,'tipo'=>'Bônus'));
            				
                				$resp['msg']    = "sucesso";
                                echo json_encode($resp);
                                exit;    
                            }
                        }
                    }else if($tipo == 'Lucro'){
                        $val = $valor - ($valor * 0.05);
                		//$valor_real = $valid_mbk_x['data']['last'] * $val;
                		$valor_real = $valid_mbk_x['data']['last'] * $valor;
                        
                        
                        if($valor > $lucro_bitcoin){
                            $resp['msg']    = "saldo insuficiente";
                            echo json_encode($resp);
                            exit;            
                        }else{
                            if($valor > 0){
                                saqueModel::insert(array('usuario_id'=>$usu->usuario_id,'carteira'=>$usu->bitcoin,'valor'=>$valor,'valor_receber'=>$val,'valor_reais'=>$valor_real,'status'=>'Aguardando','data_saque'=>$now,'tipo'=>'Lucro'));
            				
                				$resp['msg']    = "sucesso";
                                echo json_encode($resp);
                                exit;    
                            }
                        }
                    }
                }
			
		}
		
		
		return $this->view->render($res,'cliente/solicitar_saque.html',array('baseurl'=>base_url ,'message'=> $message,'dados'=>$dados));
	}
    
    function pin($req,$res,$args){
		$message = '';
		$now = date("Y-m-d H:i:s");
		$usuario = $_SESSION['id'];
		$Dusuario = usuarioModel::where('usuario_id',$usuario)->get()[0];
		
		$sistema = sistemaModel::where('sistema_id',1)->get()[0];
        
        if($Dusuario->acesso == 'Investidor'){
	        if($_SESSION['admin_id'] != $_SESSION['id']){
    	        $dados['Acesso_admin'] = 'Sim';
    	        $_SESSION['ant_id'] = $_SESSION['admin_id'];
    	    }
	    }

        if($usuario == ''){
           $url = $this->router->pathFor('login');
		   return $res->withStatus(200)->withHeader('Location', $url);
        }
        
        
		$agora = date("H");
		$dia = date("d");
		$mes = date("m");
		$ano = date("Y");
		$m = date("Y-m-d 00:00:00");
		
        $dados['Usuario'] = $Dusuario->usuario;
        $dados['Nome'] = $Dusuario->nome;
        $dados['Email'] = $Dusuario->email;
		$dados['Acesso'] = $Dusuario->acesso;
		//$dados['Carteira'] = $Dusuario->carteira;
		$dados['Pais'] = $Dusuario->pais;
		$dados['Foto'] = $Dusuario->foto;
		$dados['Cpf'] = $Dusuario->cpf;
		$dados['Documento_status'] = $Dusuario->documento_status;
		$dados['Genero'] = $Dusuario->genero;
		
		
	    
        if(isset($_POST['_csrf'])){
		//if(isset($_POST['cadastrar'])){
			$pin = isset($_POST['pin']) ? htmlspecialchars(stripslashes(trim($_POST['pin']))): null;
			$cpin = isset($_POST['cpin']) ? htmlspecialchars(stripslashes(trim($_POST['cpin']))): null;
		    
		    $now = date('Y-m-d H:i:s');
		    
		    if($Dusuario->pin != ''){
                $resp['msg']    = "cadastrado";
                echo json_encode($resp);
                exit;
		    }else if($pin != $cpin){
		        $resp['msg']    = "diferente";
                echo json_encode($resp);
                exit;
		    }else if(strlen($pin) < 6){
		        $resp['msg']    = "curto";
                echo json_encode($resp);
                exit;
		    }else if(!preg_match("/[A-Z]{1,}/", $pin)){
		        $resp['msg']    = "maiúsculo";
                echo json_encode($resp);
                exit;
		    }else if(!preg_match("/[a-z]{1,}/", $pin)){
		        $resp['msg']    = "minúsculo";
                echo json_encode($resp);
                exit;
		    }else if(!preg_match("/[0-9]{1,}/", $pin)){
		        $resp['msg']    = "número";
                echo json_encode($resp);
                exit;  
		    }else{
                usuarioModel::where('usuario_id', $usuario)->update(array('pin'=>md5($pin),'data_pin'=>$now));   
                
                $resp['msg']    = "sucesso";
                echo json_encode($resp);
                exit;
		    }
		}
		
		return $this->view->render($res,'cliente/pin.html',array('baseurl'=>base_url ,'message'=> $message,'dados'=>$dados));
	}
    
	
    function rendimentos($req,$res,$args){
		$message = '';
		$usuario = $_SESSION['id'];
		$Dusuario = usuarioModel::where('usuario_id', $usuario)->get()[0];
        
        if($Dusuario->acesso == 'Investidor'){
	        if($_SESSION['admin_id'] != $_SESSION['id']){
    	        $dados['Acesso_admin'] = 'Sim';
    	        $_SESSION['ant_id'] = $_SESSION['admin_id'];
    	    }
	    }
        
        if($usuario == ''){
           $url = $this->router->pathFor('login');
		   return $res->withStatus(200)->withHeader('Location', $url);
        }

    	
		$dados['Acesso'] = $Dusuario->acesso;
		$dados['Usuario'] = $Dusuario->usuario;  
		$dados['Email'] = $Dusuario->email;
		$dados['Nome'] = $Dusuario->nome;  	
		$dados['Foto'] = $Dusuario->foto;  
		$dados['Pais'] = $Dusuario->pais;
		$dados['Cpf'] = $Dusuario->cpf;
		
		
		$dados['Aporte_id'] = $args['id'];
		$_SESSION['Aporte_id'] = $args['id'];
		
		$dados['Total_recebido'] = rendimentoModel::where('aporte_id',$args['id'])->sum('valor');
		
		
		if(isset($args['id'])){
		    $dados['Rendimentos'] = rendimentoModel::where('aporte_id',$args['id'])->orderby('rendimento_id','desc')->get();
		    $dados['Mensagem'] = 'da Doação'.$args['id'];
		}else{
		    $dados['Rendimentos'] = rendimentoModel::where('usuario_id',$usuario)->orderby('rendimento_id','desc')->get();
		}
		
		foreach ($dados['Rendimentos'] as $key => $value) {
			$value->data_rendimento = date("d/m/Y", strtotime($value->data_rendimento));
		}
		
		return $this->view->render($res,'cliente/rendimentos.html',array('baseurl'=>base_url ,'message'=> $message,'dados'=>$dados));
	}
    
    function todos_rendimentos($req,$res,$args)
	{
	    //$query = usuarioModel::select('usuario_id','nome','usuario','email','whatsapp')->orderBy('usuario_id','asc')->get();
		$query = rendimentoModel::where('aporte_id',$_SESSION['Aporte_id'])->get();
		foreach ($query as $key => $value) {
		    //$value->rendimento_id = $value->rendimento_id;	
		    //$value->aporte_id = $value->aporte_id;
		    
		    $usuario = usuarioModel::select('nome','usuario')->where('usuario_id', $value->usuario_id)->get()[0];
			
		    $value->usuario = 'Usuário: <strong>'.$usuario->usuario.'</strong><br><small class="text-black"><i>Nome: <strong style="font-size: 13px;">'.$usuario->nome.'</strong></i></small>';
			//$value->usuario = '<h5 class="mb-0 mt-2 font-weight-semibold">'.$usuario->usuario.'</h5><p class="text-muted mb-0">'.$usuario->nome.'</p>';
			
			$value->descricao = 'Rendimento diário no valor de <b>R$ '.number_format($value->valor,2,",",".").'</b>';
			
			//$value->descricao = 'Rendimento diário do <b>Contrato #'.$value->aporte_id.'</b>';
			
			//$value->valor = '<h6 class="text-info"><b>R$ '.number_format($value->valor,2,",",".").'</b></h6>';
			
			//$value->hora_rendimento = date("H:i:s", strtotime($value->data_rendimento)); 
			//$value->data_rendimento = '<center>'.date("d/m/Y", strtotime($value->data_rendimento)).'<br><small>'.$value->hora_rendimento.'</small></center>';
			
		}
	 
		echo json_encode($query);
	}
    
    
	function bonus($req,$res,$args){
		$message = '';
		$usuario = $_SESSION['id'];
		$Dusuario = usuarioModel::where('usuario_id', $usuario)->get()[0];
        
        
        if($usuario == ''){
           $url = $this->router->pathFor('login');
		   return $res->withStatus(200)->withHeader('Location', $url);
        }

    	if($Dusuario->acesso == 'Investidor'){
	        if($_SESSION['admin_id'] != $_SESSION['id']){
    	        $dados['Acesso_admin'] = 'Sim';
    	        $_SESSION['ant_id'] = $_SESSION['admin_id'];
    	    }
	    }
	    
		$dados['Acesso'] = $Dusuario->acesso;
		$dados['Usuario'] = $Dusuario->usuario;  
		$dados['Email'] = $Dusuario->email;
		$dados['Nome'] = $Dusuario->nome;  		
		$dados['Cpf'] = $Dusuario->cpf;
		
		$dados['Bonus'] = bonusModel::where('patrocinador',$usuario)->get();
		foreach ($dados['Bonus'] as $key => $value) {
			$us = usuarioModel::where('usuario_id', $value->usuario_id)->get()[0];
			$value->usuario = $us->usuario;
			$value->data_bonus = date("d/m/Y H:i:s", strtotime($value->data_bonus)); 
		}
		
		return $this->view->render($res,'cliente/bonus.html',array('baseurl'=>base_url ,'message'=> $message,'dados'=>$dados));
	}
	
    function investimentos_ativos($req,$res,$args){
		$message = '';
		$usuario = $_SESSION['id'];
		$Dusuario = usuarioModel::where('usuario_id', $usuario)->get()[0];
		
        if($Dusuario->acesso == 'Investidor'){
	        if($_SESSION['admin_id'] != $_SESSION['id']){
    	        $dados['Acesso_admin'] = 'Sim';
    	        $_SESSION['ant_id'] = $_SESSION['admin_id'];
    	    }
	    }

        $dados['Usuario'] = $Dusuario->usuario;
        $dados['Nome'] = $Dusuario->nome;
        $dados['Email'] = $Dusuario->email;
        $dados['Foto'] = $Dusuario->foto;
        $dados['Pais'] = $Dusuario->pais;
        $dados['Cpf'] = $Dusuario->cpf;
        $dados['Acesso'] = $Dusuario->acesso;
        $dados['Genero'] = $Dusuario->genero;
        
        if($usuario == ''){
            $url = $this->router->pathFor('login');
		    return $res->withStatus(200)->withHeader('Location', $url);
        }

        /*if($Dusuario->pin == ''){
           $url = $this->router->pathFor('pin');
		   return $res->withStatus(200)->withHeader('Location', $url);
        }*/

    	$sistema = sistemaModel::where('sistema_id',1)->get()[0];
    	$now = date('Y-m-d H:i:s');
		
		$mes_atual = date('m');
	    $mes_passado = $mes_atual - 1;
	    if(strlen($mes_passado) == 1){
	        $mes_passado = '0'.$mes_passado;    
	    }
	    
	    $data_atual1 = date('Y-m-01 00:00:00');
	    $data_atual2 = date('Y-m-t 23:59:59');
	    
	    $data_passado1 = date('Y-'.$mes_passado.'-01 00:00:00');
	    $data_passado2 = date('Y-'.$mes_passado.'-t 23:59:59');
	    
		
		$dados['Investimentos_passado'] = aporteModel::where('usuario_id',$usuario)->where('status','Ativo')->where('data_investimento','>=',$data_passado1)->where('data_investimento','<=',$data_passado2)->sum('investimento_real');
	    $dados['Investimentos_mes'] = aporteModel::where('usuario_id',$usuario)->where('status','Ativo')->where('data_investimento','>=',$data_atual1)->where('data_investimento','<=',$data_atual2)->sum('investimento_real');
	    
	    
	    // ATIVAR INVESTIMENTO
        //$public_key = '6c06eb3fbbefadd0c52a003dfdc70141e4418811fd2591e7c9b0ce53cee394b5'; 
        //$private_key = 'f06427DB623DE5912521946cbce8aC5673B590ac468cfDe5Ac5E7246176c5bB8'; 
        
        $public_key = 'cdc606942d5a9c7d3928af6854ade6ef819620f740bc016f4333dc90eae2db20'; 
        $private_key = 'E6F9517d96f4b9890f35D7a708309290FCCb541113C3a2dc357FdD27ADBce923';  
        
        
        $investimentos_pendentes = aporteModel::where('usuario_id', $usuario)->where('status','!=','Ativo')->where('status','!=','Finalizado')->get();
		foreach ($investimentos_pendentes as $key => $value) {
		    /*$req = array();
            $req['version'] = 1; 
            $req['key'] = $public_key; 
            $req['format'] = 'json'; //supported values are json and xml 
            $req['cmd'] = "get_tx_info";
            //$req['txid'] = "CPFD71RIWJYW12OHN7POJYKKFL";
            $req['txid'] = $value->txn_id;
            
            // Generate the query string 
            $post_data = http_build_query($req, '', '&'); 
             
            // Calculate the HMAC signature on the POST data 
            $hmac = hash_hmac('sha512', $post_data, $private_key); 
             
            // Use curl to hit the endpoint so that you can send the required headers 
            $ch = curl_init('https://www.coinpayments.net/api.php'); 
                curl_setopt($ch, CURLOPT_FAILONERROR, TRUE); 
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); 
                curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0); 
            curl_setopt($ch, CURLOPT_HTTPHEADER, array('HMAC: '.$hmac)); 
            curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data); 
             
            // Execute the call and close cURL handle      
            $data = curl_exec($ch); 
        
            $valid_mbk_x = json_decode($data, true);
            $status_pagamento = $valid_mbk_x['result']['status'];
            $valor_pagamento = $valid_mbk_x['result']['amount'];
            $value->status_pagamento = $valid_mbk_x['result']['status'];
            
            //var_dump($data);
            
            //ATUALIZAR STATUS, SUBIR BÔNUS E PONTOS!
            if(aporteModel::where('txn_id', $value->txn_id)->get()->count() < 2){
                if(number_format($valor_pagamento,8,".","") == number_format($value->investimento,8,".","")){
                    if($status_pagamento >= 100 || $status_pagamento == 2){
                        $u = usuarioModel::where('usuario_id', $value->usuario_id)->get()[0];
                        
                        $us = usuarioModel::where('usuario_id', $u->usuario_id)->get()[0];
                        $np1 = usuarioModel::where('usuario', $us->patrocinador)->get()[0];
                        $np2 = usuarioModel::where('usuario', $np1->patrocinador)->get()[0];
                        $np3 = usuarioModel::where('usuario', $np2->patrocinador)->get()[0];
                        $np4 = usuarioModel::where('usuario', $np3->patrocinador)->get()[0];
                        $np5 = usuarioModel::where('usuario', $np4->patrocinador)->get()[0];
                        
                        $v = $value->investimento;
                        
                        $data01 = gmdate('d/m/Y H:i:s',strtotime('+21 day',strtotime($now)));
                        $data1 = str_replace("/", "-", $data01);
                        $data_recebimento = date('Y-m-d H:i:s', strtotime($data1));
                        
                        //$taxa1 = ($sistema->comissao_n1 / 100);
                        $taxa1 = $sistema->comissao_n1;
                        $taxa2 = $sistema->comissao_n2; 
                        $taxa3 = $sistema->comissao_n3; 
                        $taxa4 = $sistema->comissao_n4; 
                        $taxa5 = $sistema->comissao_n5; 
                        
                        $n1 = $v * ($taxa1 / 100); 
                        $n2 = $v * ($taxa2 / 100); 
                        $n3 = $v * ($taxa3 / 100); 
                        $n4 = $v * ($taxa4 / 100); 
                        $n5 = $v * ($taxa5 / 100); 
                        
                        
                        //SUBIR PONTOS - A CADA 5,00 REAIS É 1 PONTO
                        
                        $pont = intval($value->investimento_real / 5);
                        
                        $n0p = $pont * ($sistema->pontos_n0 / 100); 
                        $n1p = $pont * ($sistema->pontos_n1 / 100); 
                        $n2p = $pont * ($sistema->pontos_n2 / 100);
                        $n3p = $pont * ($sistema->pontos_n3 / 100);
                        $n4p = $pont * ($sistema->pontos_n4 / 100);
                        $n5p = $pont * ($sistema->pontos_n5 / 100);
                        
                        if(pontosModel::where('investidor_id',$value->aporte_id)->where('nivel',0)->get()->count() == 0){
                            $pontos = pontosModel::create(array('usuario_id'=>$u->usuario_id,'investidor_id'=>$value->aporte_id,'pontos'=>$n0p,'valor'=>$value->investimento_real,'data'=>$now,'nivel'=>0));
                        }
                        
                                                                		    
                        //NÍVEL 1
                        if($np1->status_cadastro == 'Ativo'){
                            if($sistema->comissao_n1 > 0){
                                if(bonusModel::where('aporte_id',$value->aporte_id)->where('nivel',1)->get()->count() == 0){
                                    $bonus = bonusModel::create(array('aporte_id'=>$value->aporte_id,'usuario_id'=>$u->usuario_id,'patrocinador'=>$np1->usuario_id,'valor'=>$n1,'taxa'=>$taxa1,'status'=>'Pago','data_bonus'=>$now,'nivel'=>1));
                                }
                            }
                        }
                        
                        if(pontosModel::where('investidor_id',$value->aporte_id)->where('nivel',1)->get()->count() == 0){        
                            $pontos = pontosModel::create(array('usuario_id'=>$u->usuario_id,'investidor_id'=>$value->aporte_id,'patrocinador'=>$np1->usuario_id,'pontos'=>$n1p,'valor'=>$value->investimento_real,'data'=>$now,'nivel'=>1));
                        }
                            
                        //extratoModel::insert(array('pat_id'=>$np1->usuario_id,'usuario_id'=>$u->usuario_id,'tipo'=>'Bônus','bonus_id'=>$bonus->id,'data'=>$now));
                            
                        //extratoModel::insert(array('pat_id'=>$np1->usuario_id,'usuario_id'=>$u->usuario_id,'tipo'=>'Pontos','bonus_id'=>$bonus->id,'data'=>$now));
                        
                        
                        
                        //NÍVEL 2
                        //if($np2->status_cadastro == 'Ativo'){
                            if($sistema->comissao_n2 > 0){
                                if(bonusModel::where('aporte_id',$value->aporte_id)->where('nivel',2)->get()->count() == 0){
                                    $bonus = bonusModel::create(array('aporte_id'=>$value->aporte_id,'usuario_id'=>$u->usuario_id,'patrocinador'=>$np2->usuario_id,'valor'=>$n2,'taxa'=>$taxa2,'status'=>'Pago','data_bonus'=>$now,'nivel'=>2));
                                }
                            }else{
                                if($np2->usuario_id == 1978){
                                    $taxa2 = 3; 
                                    $n2 = $v * ($taxa2 / 100); 
                                    
                                    if(bonusModel::where('aporte_id',$value->aporte_id)->where('nivel',2)->get()->count() == 0){
                                        $bonus = bonusModel::create(array('aporte_id'=>$value->aporte_id,'usuario_id'=>$u->usuario_id,'patrocinador'=>$np2->usuario_id,'valor'=>$n2,'taxa'=>$taxa2,'status'=>'Pago','data_bonus'=>$now,'nivel'=>2));
                                    }
                                }else if($np2->usuario_id == 57){
                                    $taxa2 = 1; 
                                    $n2 = $v * ($taxa2 / 100); 
                                    
                                    if(bonusModel::where('aporte_id',$value->aporte_id)->where('nivel',2)->get()->count() == 0){
                                        $bonus = bonusModel::create(array('aporte_id'=>$value->aporte_id,'usuario_id'=>$u->usuario_id,'patrocinador'=>$np2->usuario_id,'valor'=>$n2,'taxa'=>$taxa2,'status'=>'Pago','data_bonus'=>$now,'nivel'=>2));
                                    }
                                }else if($np2->usuario_id == 2099){
                                    $taxa2 = 1; 
                                    $n2 = $v * ($taxa2 / 100); 
                                    
                                    if(bonusModel::where('aporte_id',$value->aporte_id)->where('nivel',2)->get()->count() == 0){
                                        $bonus = bonusModel::create(array('aporte_id'=>$value->aporte_id,'usuario_id'=>$u->usuario_id,'patrocinador'=>$np2->usuario_id,'valor'=>$n2,'taxa'=>$taxa2,'status'=>'Pago','data_bonus'=>$now,'nivel'=>2));
                                    }
                                }
                            }
                            
                            if(pontosModel::where('investidor_id',$value->aporte_id)->where('nivel',2)->get()->count() == 0){        
                                $pontos = pontosModel::create(array('usuario_id'=>$u->usuario_id,'investidor_id'=>$value->aporte_id,'patrocinador'=>$np2->usuario_id,'pontos'=>$n2p,'valor'=>$value->investimento_real,'data'=>$now,'nivel'=>2));
                            }
                            
                            //extratoModel::insert(array('pat_id'=>$np1->usuario_id,'usuario_id'=>$u->usuario_id,'tipo'=>'Pontos','bonus_id'=>$bonus->id,'data'=>$now));
                        //}
                        
                        //NÍVEL 3
                        //if($np3->status_cadastro == 'Ativo'){
                            if($sistema->comissao_n3 > 0){
                                if(bonusModel::where('aporte_id',$value->aporte_id)->where('nivel',3)->get()->count() == 0){
                                    $bonus = bonusModel::create(array('aporte_id'=>$value->aporte_id,'usuario_id'=>$u->usuario_id,'patrocinador'=>$np3->usuario_id,'valor'=>$n3,'taxa'=>$taxa3,'status'=>'Pago','data_bonus'=>$now,'nivel'=>3));
                                }
                            }else{
                                if($np3->usuario_id == 1978){
                                    $taxa3 = 2; 
                                    $n3 = $v * ($taxa3 / 100); 
                                    
                                    if(bonusModel::where('aporte_id',$value->aporte_id)->where('nivel',3)->get()->count() == 0){
                                        $bonus = bonusModel::create(array('aporte_id'=>$value->aporte_id,'usuario_id'=>$u->usuario_id,'patrocinador'=>$np3->usuario_id,'valor'=>$n3,'taxa'=>$taxa3,'status'=>'Pago','data_bonus'=>$now,'nivel'=>3));
                                    }
                                }else if($np3->usuario_id == 57){
                                    $taxa3 = 1; 
                                    $n3 = $v * ($taxa3 / 100); 
                                    
                                    if(bonusModel::where('aporte_id',$value->aporte_id)->where('nivel',3)->get()->count() == 0){
                                        $bonus = bonusModel::create(array('aporte_id'=>$value->aporte_id,'usuario_id'=>$u->usuario_id,'patrocinador'=>$np3->usuario_id,'valor'=>$n3,'taxa'=>$taxa3,'status'=>'Pago','data_bonus'=>$now,'nivel'=>3));
                                    }
                                }else if($np3->usuario_id == 2099){
                                    $taxa3 = 1; 
                                    $n3 = $v * ($taxa3 / 100); 
                                    
                                    if(bonusModel::where('aporte_id',$value->aporte_id)->where('nivel',3)->get()->count() == 0){
                                        $bonus = bonusModel::create(array('aporte_id'=>$value->aporte_id,'usuario_id'=>$u->usuario_id,'patrocinador'=>$np3->usuario_id,'valor'=>$n3,'taxa'=>$taxa3,'status'=>'Pago','data_bonus'=>$now,'nivel'=>3));
                                    }
                                }
                            }
                            
                            if(pontosModel::where('investidor_id',$value->aporte_id)->where('nivel',3)->get()->count() == 0){        
                                $pontos = pontosModel::create(array('usuario_id'=>$u->usuario_id,'investidor_id'=>$value->aporte_id,'patrocinador'=>$np3->usuario_id,'pontos'=>$n3p,'valor'=>$value->investimento_real,'data'=>$now,'nivel'=>3));
                            }
                            //extratoModel::insert(array('pat_id'=>$np1->usuario_id,'usuario_id'=>$u->usuario_id,'tipo'=>'Pontos','bonus_id'=>$bonus->id,'data'=>$now));
                        //}
                        
                        //NÍVEL 4
                        //if($np4->status_cadastro == 'Ativo'){
                            if($sistema->comissao_n4 > 0){
                                if(bonusModel::where('aporte_id',$value->aporte_id)->where('nivel',4)->get()->count() == 0){
                                    $bonus = bonusModel::create(array('aporte_id'=>$value->aporte_id,'usuario_id'=>$u->usuario_id,'patrocinador'=>$np4->usuario_id,'valor'=>$n4,'taxa'=>$taxa4,'status'=>'Pago','data_bonus'=>$now,'nivel'=>4));
                                }
                            }else{
                                if($np4->usuario_id == 57){
                                    $taxa4 = 1; 
                                    $n4 = $v * ($taxa4 / 100); 
                                    
                                    if(bonusModel::where('aporte_id',$value->aporte_id)->where('nivel',4)->get()->count() == 0){
                                        $bonus = bonusModel::create(array('aporte_id'=>$value->aporte_id,'usuario_id'=>$u->usuario_id,'patrocinador'=>$np4->usuario_id,'valor'=>$n4,'taxa'=>$taxa4,'status'=>'Pago','data_bonus'=>$now,'nivel'=>4));
                                    }
                                }else if($np4->usuario_id == 2099){
                                    $taxa4 = 1; 
                                    $n4 = $v * ($taxa4 / 100); 
                                    
                                    if(bonusModel::where('aporte_id',$value->aporte_id)->where('nivel',4)->get()->count() == 0){
                                        $bonus = bonusModel::create(array('aporte_id'=>$value->aporte_id,'usuario_id'=>$u->usuario_id,'patrocinador'=>$np4->usuario_id,'valor'=>$n4,'taxa'=>$taxa4,'status'=>'Pago','data_bonus'=>$now,'nivel'=>4));
                                    }
                                }
                            }
                            
                            if(pontosModel::where('investidor_id',$value->aporte_id)->where('nivel',4)->get()->count() == 0){
                                $pontos = pontosModel::create(array('usuario_id'=>$u->usuario_id,'investidor_id'=>$value->aporte_id,'patrocinador'=>$np4->usuario_id,'pontos'=>$n4p,'valor'=>$value->investimento_real,'data'=>$now,'nivel'=>4));
                            }
                            //extratoModel::insert(array('pat_id'=>$np1->usuario_id,'usuario_id'=>$u->usuario_id,'tipo'=>'Pontos','bonus_id'=>$bonus->id,'data'=>$now));
                        //}
                        
                        //NÍVEL 5
                        //if($np5->status_cadastro == 'Ativo'){
                            if($sistema->comissao_n5 > 0){
                                if(bonusModel::where('aporte_id',$value->aporte_id)->where('nivel',5)->get()->count() == 0){
                                    $bonus = bonusModel::create(array('aporte_id'=>$value->aporte_id,'usuario_id'=>$u->usuario_id,'patrocinador'=>$np5->usuario_id,'valor'=>$n5,'taxa'=>$taxa5,'status'=>'Pago','data_bonus'=>$now,'nivel'=>5));
                                }
                            }else{
                                if($np5->usuario_id == 2099){
                                    $taxa5 = 1; 
                                    $n5 = $v * ($taxa5 / 100); 
                                    
                                    if(bonusModel::where('aporte_id',$value->aporte_id)->where('nivel',5)->get()->count() == 0){
                                        $bonus = bonusModel::create(array('aporte_id'=>$value->aporte_id,'usuario_id'=>$u->usuario_id,'patrocinador'=>$np5->usuario_id,'valor'=>$n5,'taxa'=>$taxa5,'status'=>'Pago','data_bonus'=>$now,'nivel'=>5));
                                    }
                                }
                            }
                            
                            if(pontosModel::where('investidor_id',$value->aporte_id)->where('nivel',5)->get()->count() == 0){
                                $pontos = pontosModel::create(array('usuario_id'=>$u->usuario_id,'investidor_id'=>$value->aporte_id,'patrocinador'=>$np5->usuario_id,'pontos'=>$n5p,'valor'=>$value->investimento_real,'data'=>$now,'nivel'=>5));
                            }
                            
                            //extratoModel::insert(array('pat_id'=>$np1->usuario_id,'usuario_id'=>$u->usuario_id,'tipo'=>'Pontos','bonus_id'=>$bonus->id,'data'=>$now));
                        //}
                        
                        if(aporteModel::where('usuario_id', $np1->usuario_id)->where('status','Ativo')->get()->count() == 0){
                            usuarioModel::where('usuario_id', $u->usuario_id)->update(array('status_cadastro'=>'Ativo','data_ativo'=>$now));
                        }else{
                            usuarioModel::where('usuario_id', $u->usuario_id)->update(array('status_cadastro'=>'Ativo'));
                        }
                        
                        
                        
                        aporteModel::where('aporte_id', $value->aporte_id)->update(array('status'=>'Ativo','data_investimento'=>$now,'data_recebimento'=>$data_recebimento,'data_pagamento'=>$now,'data_confirmacao'=>$now));
                    }
                }
            }else if($status_pagamento == 1){
                aporteModel::where('aporte_id', $value->aporte_id)->update(array('data_pagamento'=>$now,'status'=>'Aguardando'));
            }else if($status_pagamento < 0){
                //aporteModel::where('aporte_id', $value->aporte_id)->delete();    
            }*/
            
		    
		    $value->hora_investimento = date("H:i:s", strtotime($value->data_investimento)); 
			$value->data_investimento = date("d/m/Y", strtotime($value->data_investimento)); 
			$value->hora_recebimento = date("H:i:s", strtotime($value->data_recebimento)); 	
			$value->data_recebimento = date("d/m/Y", strtotime($value->data_recebimento)); 	
		}
        
	    
	    $dados['Investimentos'] = aporteModel::where('usuario_id',$usuario)->where('status','Ativo')->get();
		foreach ($dados['Investimentos'] as $key => $value) {
		    $dias = floor((strtotime(date('Y-m-d H:i:s')) - strtotime($value->data_confirmacao) ) / 86400) ;
		    
		    /*$horas = floor(strtotime($value->data_recebimento) - strtotime(date('Y-m-d H:i:s'))  / 3600) ;
		    
		    $dias2 = (strtotime($value->data_recebimento) - strtotime(date('Y-m-d H:i:s'))) / 86400 ;
		    
		    echo "AGORA: ".date('Y-m-d H:i:s')." - DATA RECEBIMENTO: ".$value->data_recebimento." - DIAS: ".$dias2." - HORAS: ".$horas."<br>";
		    
		    
		    $value->porc = number_format(($dias * 100) / 21,2,".","");
		    #$value->porc = doubleval(($dias * 100) / 21);
		    if($value->porc < 1){
		        $value->porc = 0;
		    }else if($value->porc >= 100){
		        $value->porc = 100;
		    }
		    
		    echo "PORC: ".$value->porc."<br>";*/
		    
		    
		    //$dia = date('d',strtotime('+21 day 3 hour',strtotime($value->data_investimento)));
            //$mes = date('m',strtotime('+21 day 3 hour',strtotime($value->data_investimento)));
            //$ano = date('Y',strtotime('+21 day 3 hour',strtotime($value->data_investimento)));
            //$hora = date('H:i:s',strtotime('+21 day 3 hour',strtotime($value->data_investimento)));
            	
            $dia = date('d',strtotime($value->data_recebimento));
            $mes = date('m',strtotime($value->data_recebimento));
            $ano = date('Y',strtotime($value->data_recebimento));
            $hora = date('H:i:s',strtotime($value->data_recebimento));
            			
            if($mes == 1){
                $value->tempo = "January ".$dia.", ".$ano." ".$hora;
            }else if($mes == 2){
                $value->tempo = "February ".$dia.", ".$ano." ".$hora;
            }else if($mes == 3){
                $value->tempo = "March ".$dia.", ".$ano." ".$hora;
            }else if($mes == 4){
                $value->tempo = "April ".$dia.", ".$ano." ".$hora;
            }else if($mes == 5){
                $value->tempo = "May ".$dia.", ".$ano." ".$hora;
            }else if($mes == 6){
                $value->tempo = "June ".$dia.", ".$ano." ".$hora;
            }else if($mes == 7){
                $value->tempo = "July ".$dia.", ".$ano." ".$hora;
            }else if($mes == 8){
                $value->tempo = "August ".$dia.", ".$ano." ".$hora;
            }else if($mes == 9){
                $value->tempo = "September ".$dia.", ".$ano." ".$hora;
            }else if($mes == 10){
                $value->tempo = "October ".$dia.", ".$ano." ".$hora;
            }else if($mes == 11){
                $value->tempo = "November ".$dia.", ".$ano." ".$hora;
            }else if($mes == 12){
                $value->tempo = "December ".$dia.", ".$ano." ".$hora;
            }
		    
	        //echo "TEMPO: ".$value->tempo."<br>";
	        	    
		    //$value->hora_investimento = date("H:i:s", strtotime($value->data_investimento)); 
		    $value->data_investimento = date("d/m/Y H:i:s", strtotime($value->data_investimento)); 
		    //$value->hora_recebimento = date("H:i:s", strtotime($value->data_recebimento)); 
		    $value->data_recebimento = date("d/m/Y H:i:s", strtotime($value->data_recebimento)); 
		}
		
		return $this->view->render($res,'cliente/investimentos_ativos.html',array('baseurl'=>base_url ,'message'=> $message,'dados'=>$dados));
	}
	
	function todos_aportesativos($req,$res,$args)
	{
	    $usuario = $_SESSION['id'];
        
        $saq = saqueModel::where('usuario_id',$usuario)->where('forma','bxtelecom')->sum('valor');
	    $cont01 = 0;
		//$query = usuarioModel::select('usuario_id','nome','usuario','email','whatsapp')->orderBy('usuario_id','asc')->get();
		$query = aporteModel::where('usuario_id',$usuario)->where('status','Ativo')->get();
		foreach ($query as $key => $value) {
		    $recebido = 0;
		    //$value->aporte_id = $value->aporte_id;	
		    
		    $us = usuarioModel::select('nome','usuario')->where('usuario_id', $value->usuario_id)->get()[0];
			
			$value->nome = $us->nome;
			$value->usuario = 'Usuário: <strong>#'.$us->usuario.'</strong><br><small class="text-black"><i>Nome: <strong style="font-size: 13px;">'.$us->nome.'</strong></i></small>';
			//$value->usuario = '<h5 class="mb-0 mt-2 font-weight-semibold">'.$us->usuario.'</h5><p class="text-muted mb-0">'.$us->nome.'</p>';
			//$value->foto = $us->usuario;
			
			/*$kits0 = kitModel::get();    
		    foreach ($kits0 as $key => $value1) {
		        if(($value->investimento % $value1->valor) == 0){
		            $kits = intval($value->investimento / $value1->valor);
		        }
		    }*/
			
			$rend = rendimentoModel::where('aporte_id',$value->aporte_id)->sum('valor');
			
			if($value->tipo == 'bxtelecom'){
			    $recebido = $rend + $saq;
			}else{
			    $recebido = $rend;
			}
			   
			$inv = investimentoModel::where('id', $value->compra_id)->get()[0];
		    
		    $valor_final = $value->investimento * ($inv->valor_estimado / 100);  
		    
			/*if($value->compra_id == 1){
			    $valor_final = $value->investimento * 4.5;
			}else if($value->compra_id == 2){
			    $valor_final = $value->investimento * 1.6;
			}else if($value->compra_id == 3){
			    $valor_final = $value->investimento * 1.3;
			}else if($value->compra_id == 4){
			    $valor_final = $value->investimento * 2;
			}*/
			
			if($value->compra_id == 2){
			    if($recebido >= $valor_final){
			        $value->portabilidade = '';
    		    }else{
    		        $value->portabilidade = '<form method="POST" id="form_portar">
    		                                <input type="hidden" name="_csrf" />
                							<input type="hidden" name="id" value="'.$value->aporte_id.'" />
                							<button class="btn" style="background-image: linear-gradient(to right, #545454, #2E2E2E);" type="submit" name="portar">PORTABILIDADE</button>
                						</form>';
    		    }
    		}else{
    		    $value->portabilidade = '';
    		}
			
			$value->investimento = '<b>R$ '.number_format($value->investimento,2,",",".").'</b>';
            $value->recebimento = '<b>R$ '.number_format($value->recebimento,2,",",".").'</b>';
            //$value->kits = '<b>'.$kits.'</b>';
            $value->progresso = 'Recebido <b>R$ '.number_format($recebido,2,",",".").'</b> de <b>R$ '.number_format($valor_final,2,",",".").'</b>';
            
            $value->data_investimento = date("d/m/Y H:i:s", strtotime($value->data_investimento));
            $value->data_recebimento = date("d/m/Y H:i:s", strtotime($value->data_recebimento));
            
            //$value->rendimentos = '<a href="/painel/contratos/rendimentos/'.$value->aporte_id.'" class="btn" style="background-image: linear-gradient(to right, #545454, #2E2E2E);"><b>RENDIMENTOS</b></a>';
            
            if($value->comprovante == ''){
            	$value->nota = '<a href="/dashboard/anexar-comprovante/'.$value->aporte_id.'" class="btn" style="background-image: linear-gradient(to right, #545454, #2E2E2E);"><b>ANEXAR</b></a>';
            }else{
            	$value->nota = '<a href="/comprovantes/'.$value->comprovante.'" target="_blank" class="btn" style="background-image: linear-gradient(to right, #545454, #2E2E2E);"><b>COMPROVANTE</b></a>';
            }
            
            $value->rendimentos = '<a class="btn" style="background-image: linear-gradient(to right, #545454, #2E2E2E);" href="/dashboard/rendimentos/'.$value->aporte_id.'">RENDIMENTOS</a>';
            $value->contrato = '<a class="btn btn-sm" style="background-image: linear-gradient(to right, #545454, #2E2E2E);" href="/dashboard/contrato/impressao/'.$value->aporte_id.'" target="_blank"><b>VISUALIZAR CONTRATO</b></a>';
            
            $inv = aporteModel::where('aporte_id', $value->aporte_id)->get()[0];
    		$dias = floor((strtotime(date('Y-m-d H:i:s')) - strtotime($inv->data_confirmacao) ) / 86400) ;
    		//echo "DIAS: ".$dias."<br>";
    		
    		/*if($value->compra_id == 1){
        		if($dias >= 2693){
        		    $value->resgatar = '<form method="POST">
                							<input type="hidden" name="id" value="'.$value->aporte_id.'" />
                							<button class="btn btn-success" type="submit" name="resgatar">Resgatar</button>
                						</form>';    
        		}else{
        		    $value->resgatar = '';    
        		}
    		}else{
    		    $value->resgatar = '';
    		} */
		}
	 
		echo json_encode($query);
	}
	
	function investimentos_pendentes($req,$res,$args){
		$message = '';
		$usuario = $_SESSION['id'];
		$Dusuario = usuarioModel::where('usuario_id', $usuario)->get()[0];
		$dados['Nome'] = $Dusuario->nome;
		$dados['Usuário'] = $Dusuario->usuario;
		$dados['Email'] = $Dusuario->email;
		$dados['Foto'] = $Dusuario->foto;
		$dados['Pais'] = $Dusuario->pais;
		$dados['Cpf'] = $Dusuario->cpf;
		$dados['Genero'] = $Dusuario->genero;
		
		$sistema = sistemaModel::where('sistema_id', 1)->get()[0];
		
		$now = date('Y-m-d H:i:s');
		
		$mes_atual = date('m');
	    $mes_passado = $mes_atual - 1;
	    if(strlen($mes_passado) == 1){
	        $mes_passado = '0'.$mes_passado;    
	    }
	    
	    $data_atual1 = date('Y-m-01 00:00:00');
	    $data_atual2 = date('Y-m-t 23:59:59');
	    
	    $data_passado1 = date('Y-'.$mes_passado.'-01 00:00:00');
	    $data_passado2 = date('Y-'.$mes_passado.'-t 23:59:59');
	    
		
		$dados['Investimentos_passado'] = aporteModel::where('usuario_id',$usuario)->where('status','!=','Ativo')->where('status','!=','Finalizado')->where('data_investimento','>=',$data_passado1)->where('data_investimento','<=',$data_passado2)->sum('investimento_real');
	    $dados['Investimentos_mes'] = aporteModel::where('usuario_id',$usuario)->where('status','!=','Ativo')->where('status','!=','Finalizado')->where('data_investimento','>=',$data_atual1)->where('data_investimento','<=',$data_atual2)->sum('investimento_real');
	    

		
		if(isset($_SESSION['antigo_id'])){
	        $dados['antigo_id'] = $_SESSION['antigo_id'];
	    }
	    
	    if($Dusuario->acesso == 'Investidor'){
	        if($_SESSION['admin_id'] != $_SESSION['id']){
    	        $dados['Acesso_admin'] = 'Sim';
    	        $_SESSION['ant_id'] = $_SESSION['admin_id'];
    	    }
	    }

        if($usuario == ''){
           $url = $this->router->pathFor('login');
		   return $res->withStatus(200)->withHeader('Location', $url);
        }

        if($Dusuario->pin == ''){
           $url = $this->router->pathFor('pin');
		   return $res->withStatus(200)->withHeader('Location', $url);
        }
    	
		$dados['Acesso'] = $Dusuario->acesso;
		$dados['Usuario'] = $Dusuario->usuario;  
		
		/*if(isset($_POST['pagar'])){
			$_SESSION['Val'] = $_POST['valor'];
			$dados['Vall'] = $_SESSION['Val'];
			
			header("Refresh:0;url=../../dashboard/enviar-comprovante");
		}*/
		
		/*if(isset($_POST['cancelar'])){
			$id = $_POST['id'];
			
			aporteModel::where('aporte_id', $id)->delete();
			
			$message = '<div class="alert alert-success" role="alert"><center>Sucesso! <b>Investimento cancelado com sucesso</b></center></div>';
			//header("Refresh:0; url=../modulos-ativos");
		}*/

		
		
		// Fill these in from your API Keys page 
        //$public_key = '6c06eb3fbbefadd0c52a003dfdc70141e4418811fd2591e7c9b0ce53cee394b5'; 
        //$private_key = 'f06427DB623DE5912521946cbce8aC5673B590ac468cfDe5Ac5E7246176c5bB8'; 
        
        $public_key = '988c26d6a7b08e16d7d673f384b0275e80f3d8190e1c3656e66e3c4d4fe6eb86'; 
        $private_key = 'B956172202fAAf20dB441Ab0EC9DDB7C4508b65B03d0Aefd3210950F83f6f634';
        
        //$public_key = 'cdc606942d5a9c7d3928af6854ade6ef819620f740bc016f4333dc90eae2db20'; 
        //$private_key = 'E6F9517d96f4b9890f35D7a708309290FCCb541113C3a2dc357FdD27ADBce923';  
        
        /*$req = array();
            $req['version'] = 1; 
            $req['key'] = $public_key; 
            $req['format'] = 'json'; //supported values are json and xml 
            $req['cmd'] = "get_tx_info";
            $req['txid'] = "CPFG0LK7BN80CVUJVLXDZL59WR";
            //$req['txid'] = $ap->txn_id;
            
            // Generate the query string 
            $post_data = http_build_query($req, '', '&'); 
             
            // Calculate the HMAC signature on the POST data 
            $hmac = hash_hmac('sha512', $post_data, $private_key); 
             
            // Use curl to hit the endpoint so that you can send the required headers 
            $ch = curl_init('https://www.coinpayments.net/api.php'); 
                curl_setopt($ch, CURLOPT_FAILONERROR, TRUE); 
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); 
                curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0); 
            curl_setopt($ch, CURLOPT_HTTPHEADER, array('HMAC: '.$hmac)); 
            curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data); 
             
            // Execute the call and close cURL handle      
            $data = curl_exec($ch); 
        
            $valid_mbk_x = json_decode($data, true);
            $status_pagamento = $valid_mbk_x['result']['status'];
            //$valor_pagamento = $valid_mbk_x['result']['amountf'];
            $valor_pagamento = $valid_mbk_x['result']['receivedf'];
            //$value->status_pagamento = $valid_mbk_x['result']['status'];
            
            //echo "VALOR BLOCKCHAIN: ".$valor_pagamento." - VALOR PAGO: ".number_format($value->investimento,8,".","")."<br>";
            
            var_dump($data);
            echo $status_pagamento;*/
        
        
        if(isset($_POST['recarregar'])){
            $id = isset($_POST['id']) ? htmlspecialchars(stripslashes(trim($_POST['id']))): null;
            $ap = aporteModel::where('aporte_id', $id)->get()[0];
            
            $req = array();
            $req['version'] = 1; 
            $req['key'] = $public_key; 
            $req['format'] = 'json'; //supported values are json and xml 
            $req['cmd'] = "get_tx_info";
            //$req['txid'] = "CPFD71RIWJYW12OHN7POJYKKFL";
            $req['txid'] = $ap->txn_id;
            
            // Generate the query string 
            $post_data = http_build_query($req, '', '&'); 
             
            // Calculate the HMAC signature on the POST data 
            $hmac = hash_hmac('sha512', $post_data, $private_key); 
             
            // Use curl to hit the endpoint so that you can send the required headers 
            $ch = curl_init('https://www.coinpayments.net/api.php'); 
                curl_setopt($ch, CURLOPT_FAILONERROR, TRUE); 
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); 
                curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0); 
            curl_setopt($ch, CURLOPT_HTTPHEADER, array('HMAC: '.$hmac)); 
            curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data); 
             
            // Execute the call and close cURL handle      
            $data = curl_exec($ch); 
        
            $valid_mbk_x = json_decode($data, true);
            $status_pagamento = $valid_mbk_x['result']['status'];
            //$valor_pagamento = $valid_mbk_x['result']['amountf'];
            $valor_pagamento = $valid_mbk_x['result']['receivedf'];
            //$value->status_pagamento = $valid_mbk_x['result']['status'];
            
            //echo "VALOR BLOCKCHAIN: ".$valor_pagamento." - VALOR PAGO: ".number_format($value->investimento,8,".","")."<br>";
            
            //var_dump($data);
            echo $status_pagamento;
            
            //ATUALIZAR STATUS, SUBIR BÔNUS E PONTOS!
            if(aporteModel::where('txn_id', $ap->txn_id)->get()->count() < 2){
                if($valor_pagamento == number_format($ap->investimento,8,".","")){
                    if($status_pagamento >= 100 || $status_pagamento == 2){
                        $u = usuarioModel::where('usuario_id', $ap->usuario_id)->get()[0];
                        
                        $us = usuarioModel::where('usuario_id', $u->usuario_id)->get()[0];
                        $np1 = usuarioModel::where('usuario', $us->patrocinador)->get()[0];
                        $np2 = usuarioModel::where('usuario', $np1->patrocinador)->get()[0];
                        $np3 = usuarioModel::where('usuario', $np2->patrocinador)->get()[0];
                        $np4 = usuarioModel::where('usuario', $np3->patrocinador)->get()[0];
                        $np5 = usuarioModel::where('usuario', $np4->patrocinador)->get()[0];
                        
                        $v = $ap->investimento;
                        
                        $data01 = gmdate('d/m/Y H:i:s',strtotime('+21 day',strtotime($now)));
                        $data1 = str_replace("/", "-", $data01);
                        $data_recebimento = date('Y-m-d H:i:s', strtotime($data1));
                        
                        //$taxa1 = ($sistema->comissao_n1 / 100);
                        $taxa1 = $sistema->comissao_n1;
                        $taxa2 = $sistema->comissao_n2; 
                        $taxa3 = $sistema->comissao_n3; 
                        $taxa4 = $sistema->comissao_n4; 
                        $taxa5 = $sistema->comissao_n5; 
                        
                        $n1 = $v * ($taxa1 / 100); 
                        $n2 = $v * ($taxa2 / 100); 
                        $n3 = $v * ($taxa3 / 100); 
                        $n4 = $v * ($taxa4 / 100); 
                        $n5 = $v * ($taxa5 / 100); 
                        
                        
                        //SUBIR PONTOS - A CADA 5,00 REAIS É 1 PONTO
                        
                        $pont = intval($ap->investimento_real / 5);
                        
                        $n0p = $pont * ($sistema->pontos_n0 / 100); 
                        $n1p = $pont * ($sistema->pontos_n1 / 100); 
                        $n2p = $pont * ($sistema->pontos_n2 / 100);
                        $n3p = $pont * ($sistema->pontos_n3 / 100);
                        $n4p = $pont * ($sistema->pontos_n4 / 100);
                        $n5p = $pont * ($sistema->pontos_n5 / 100);
                        
                        if(pontosModel::where('investidor_id',$ap->aporte_id)->where('nivel',0)->get()->count() == 0){
                            $pontos = pontosModel::create(array('usuario_id'=>$u->usuario_id,'investidor_id'=>$ap->aporte_id,'pontos'=>$n0p,'valor'=>$ap->investimento_real,'data'=>$now,'nivel'=>0));
                        }
                        
                                                                		    
                        //NÍVEL 1
                        if($np1->status_cadastro == 'Ativo'){
                            if($sistema->comissao_n1 > 0){
                                if(bonusModel::where('aporte_id',$ap->aporte_id)->where('nivel',1)->get()->count() == 0){
                                    $bonus = bonusModel::create(array('aporte_id'=>$ap->aporte_id,'usuario_id'=>$u->usuario_id,'patrocinador'=>$np1->usuario_id,'valor'=>$n1,'taxa'=>$taxa1,'status'=>'Pago','data_bonus'=>$now,'nivel'=>1));
                                }
                            }
                        }
                        
                        if(pontosModel::where('investidor_id',$ap->aporte_id)->where('nivel',1)->get()->count() == 0){        
                            $pontos = pontosModel::create(array('usuario_id'=>$u->usuario_id,'investidor_id'=>$ap->aporte_id,'patrocinador'=>$np1->usuario_id,'pontos'=>$n1p,'valor'=>$ap->investimento_real,'data'=>$now,'nivel'=>1));
                        }
                            
                        //extratoModel::insert(array('pat_id'=>$np1->usuario_id,'usuario_id'=>$u->usuario_id,'tipo'=>'Bônus','bonus_id'=>$bonus->id,'data'=>$now));
                            
                        //extratoModel::insert(array('pat_id'=>$np1->usuario_id,'usuario_id'=>$u->usuario_id,'tipo'=>'Pontos','bonus_id'=>$bonus->id,'data'=>$now));
                        
                        
                        
                        //NÍVEL 2
                        //if($np2->status_cadastro == 'Ativo'){
                            if($sistema->comissao_n2 > 0){
                                if(bonusModel::where('aporte_id',$ap->aporte_id)->where('nivel',2)->get()->count() == 0){
                                    $bonus = bonusModel::create(array('aporte_id'=>$ap->aporte_id,'usuario_id'=>$u->usuario_id,'patrocinador'=>$np2->usuario_id,'valor'=>$n2,'taxa'=>$taxa2,'status'=>'Pago','data_bonus'=>$now,'nivel'=>2));
                                }
                            }else{
                                if($np2->usuario_id == 1978){
                                    $taxa2 = 3; 
                                    $n2 = $v * ($taxa2 / 100); 
                                    
                                    if(bonusModel::where('aporte_id',$ap->aporte_id)->where('nivel',2)->get()->count() == 0){
                                        $bonus = bonusModel::create(array('aporte_id'=>$ap->aporte_id,'usuario_id'=>$u->usuario_id,'patrocinador'=>$np2->usuario_id,'valor'=>$n2,'taxa'=>$taxa2,'status'=>'Pago','data_bonus'=>$now,'nivel'=>2));
                                    }
                                }else if($np2->usuario_id == 57){
                                    $taxa2 = 1; 
                                    $n2 = $v * ($taxa2 / 100); 
                                    
                                    if(bonusModel::where('aporte_id',$ap->aporte_id)->where('nivel',2)->get()->count() == 0){
                                        $bonus = bonusModel::create(array('aporte_id'=>$ap->aporte_id,'usuario_id'=>$u->usuario_id,'patrocinador'=>$np2->usuario_id,'valor'=>$n2,'taxa'=>$taxa2,'status'=>'Pago','data_bonus'=>$now,'nivel'=>2));
                                    }
                                }else if($np2->usuario_id == 2099){
                                    $taxa2 = 1; 
                                    $n2 = $v * ($taxa2 / 100); 
                                    
                                    if(bonusModel::where('aporte_id',$ap->aporte_id)->where('nivel',2)->get()->count() == 0){
                                        $bonus = bonusModel::create(array('aporte_id'=>$ap->aporte_id,'usuario_id'=>$u->usuario_id,'patrocinador'=>$np2->usuario_id,'valor'=>$n2,'taxa'=>$taxa2,'status'=>'Pago','data_bonus'=>$now,'nivel'=>2));
                                    }
                                }
                            }
                            
                            if(pontosModel::where('investidor_id',$ap->aporte_id)->where('nivel',2)->get()->count() == 0){        
                                $pontos = pontosModel::create(array('usuario_id'=>$u->usuario_id,'investidor_id'=>$ap->aporte_id,'patrocinador'=>$np2->usuario_id,'pontos'=>$n2p,'valor'=>$ap->investimento_real,'data'=>$now,'nivel'=>2));
                            }
                            
                            //extratoModel::insert(array('pat_id'=>$np1->usuario_id,'usuario_id'=>$u->usuario_id,'tipo'=>'Pontos','bonus_id'=>$bonus->id,'data'=>$now));
                        //}
                        
                        //NÍVEL 3
                        //if($np3->status_cadastro == 'Ativo'){
                            if($sistema->comissao_n3 > 0){
                                if(bonusModel::where('aporte_id',$ap->aporte_id)->where('nivel',3)->get()->count() == 0){
                                    $bonus = bonusModel::create(array('aporte_id'=>$ap->aporte_id,'usuario_id'=>$u->usuario_id,'patrocinador'=>$np3->usuario_id,'valor'=>$n3,'taxa'=>$taxa3,'status'=>'Pago','data_bonus'=>$now,'nivel'=>3));
                                }
                            }else{
                                if($np3->usuario_id == 1978){
                                    $taxa3 = 2; 
                                    $n3 = $v * ($taxa3 / 100); 
                                    
                                    if(bonusModel::where('aporte_id',$ap->aporte_id)->where('nivel',3)->get()->count() == 0){
                                        $bonus = bonusModel::create(array('aporte_id'=>$ap->aporte_id,'usuario_id'=>$u->usuario_id,'patrocinador'=>$np3->usuario_id,'valor'=>$n3,'taxa'=>$taxa3,'status'=>'Pago','data_bonus'=>$now,'nivel'=>3));
                                    }
                                }else if($np3->usuario_id == 57){
                                    $taxa3 = 1; 
                                    $n3 = $v * ($taxa3 / 100); 
                                    
                                    if(bonusModel::where('aporte_id',$ap->aporte_id)->where('nivel',3)->get()->count() == 0){
                                        $bonus = bonusModel::create(array('aporte_id'=>$ap->aporte_id,'usuario_id'=>$u->usuario_id,'patrocinador'=>$np3->usuario_id,'valor'=>$n3,'taxa'=>$taxa3,'status'=>'Pago','data_bonus'=>$now,'nivel'=>3));
                                    }
                                }else if($np3->usuario_id == 2099){
                                    $taxa3 = 1; 
                                    $n3 = $v * ($taxa3 / 100); 
                                    
                                    if(bonusModel::where('aporte_id',$ap->aporte_id)->where('nivel',3)->get()->count() == 0){
                                        $bonus = bonusModel::create(array('aporte_id'=>$ap->aporte_id,'usuario_id'=>$u->usuario_id,'patrocinador'=>$np3->usuario_id,'valor'=>$n3,'taxa'=>$taxa3,'status'=>'Pago','data_bonus'=>$now,'nivel'=>3));
                                    }
                                }
                            }
                            
                            if(pontosModel::where('investidor_id',$ap->aporte_id)->where('nivel',3)->get()->count() == 0){        
                                $pontos = pontosModel::create(array('usuario_id'=>$u->usuario_id,'investidor_id'=>$ap->aporte_id,'patrocinador'=>$np3->usuario_id,'pontos'=>$n3p,'valor'=>$ap->investimento_real,'data'=>$now,'nivel'=>3));
                            }
                            //extratoModel::insert(array('pat_id'=>$np1->usuario_id,'usuario_id'=>$u->usuario_id,'tipo'=>'Pontos','bonus_id'=>$bonus->id,'data'=>$now));
                        //}
                        
                        //NÍVEL 4
                        //if($np4->status_cadastro == 'Ativo'){
                            if($sistema->comissao_n4 > 0){
                                if(bonusModel::where('aporte_id',$ap->aporte_id)->where('nivel',4)->get()->count() == 0){
                                    $bonus = bonusModel::create(array('aporte_id'=>$ap->aporte_id,'usuario_id'=>$u->usuario_id,'patrocinador'=>$np4->usuario_id,'valor'=>$n4,'taxa'=>$taxa4,'status'=>'Pago','data_bonus'=>$now,'nivel'=>4));
                                }
                            }else{
                                if($np4->usuario_id == 57){
                                    $taxa4 = 1; 
                                    $n4 = $v * ($taxa4 / 100); 
                                    
                                    if(bonusModel::where('aporte_id',$ap->aporte_id)->where('nivel',4)->get()->count() == 0){
                                        $bonus = bonusModel::create(array('aporte_id'=>$ap->aporte_id,'usuario_id'=>$u->usuario_id,'patrocinador'=>$np4->usuario_id,'valor'=>$n4,'taxa'=>$taxa4,'status'=>'Pago','data_bonus'=>$now,'nivel'=>4));
                                    }
                                }else if($np4->usuario_id == 2099){
                                    $taxa4 = 1; 
                                    $n4 = $v * ($taxa4 / 100); 
                                    
                                    if(bonusModel::where('aporte_id',$ap->aporte_id)->where('nivel',4)->get()->count() == 0){
                                        $bonus = bonusModel::create(array('aporte_id'=>$ap->aporte_id,'usuario_id'=>$u->usuario_id,'patrocinador'=>$np4->usuario_id,'valor'=>$n4,'taxa'=>$taxa4,'status'=>'Pago','data_bonus'=>$now,'nivel'=>4));
                                    }
                                }
                            }
                            
                            if(pontosModel::where('investidor_id',$ap->aporte_id)->where('nivel',4)->get()->count() == 0){
                                $pontos = pontosModel::create(array('usuario_id'=>$u->usuario_id,'investidor_id'=>$ap->aporte_id,'patrocinador'=>$np4->usuario_id,'pontos'=>$n4p,'valor'=>$ap->investimento_real,'data'=>$now,'nivel'=>4));
                            }
                            //extratoModel::insert(array('pat_id'=>$np1->usuario_id,'usuario_id'=>$u->usuario_id,'tipo'=>'Pontos','bonus_id'=>$bonus->id,'data'=>$now));
                        //}
                        
                        //NÍVEL 5
                        //if($np5->status_cadastro == 'Ativo'){
                            if($sistema->comissao_n5 > 0){
                                if(bonusModel::where('aporte_id',$ap->aporte_id)->where('nivel',5)->get()->count() == 0){
                                    $bonus = bonusModel::create(array('aporte_id'=>$ap->aporte_id,'usuario_id'=>$u->usuario_id,'patrocinador'=>$np5->usuario_id,'valor'=>$n5,'taxa'=>$taxa5,'status'=>'Pago','data_bonus'=>$now,'nivel'=>5));
                                }
                            }else{
                                if($np5->usuario_id == 2099){
                                    $taxa5 = 1; 
                                    $n5 = $v * ($taxa5 / 100); 
                                    
                                    if(bonusModel::where('aporte_id',$ap->aporte_id)->where('nivel',5)->get()->count() == 0){
                                        $bonus = bonusModel::create(array('aporte_id'=>$ap->aporte_id,'usuario_id'=>$u->usuario_id,'patrocinador'=>$np5->usuario_id,'valor'=>$n5,'taxa'=>$taxa5,'status'=>'Pago','data_bonus'=>$now,'nivel'=>5));
                                    }
                                }
                            }
                            
                            if(pontosModel::where('investidor_id',$ap->aporte_id)->where('nivel',5)->get()->count() == 0){
                                $pontos = pontosModel::create(array('usuario_id'=>$u->usuario_id,'investidor_id'=>$ap->aporte_id,'patrocinador'=>$np5->usuario_id,'pontos'=>$n5p,'valor'=>$ap->investimento_real,'data'=>$now,'nivel'=>5));
                            }
                            
                            //extratoModel::insert(array('pat_id'=>$np1->usuario_id,'usuario_id'=>$u->usuario_id,'tipo'=>'Pontos','bonus_id'=>$bonus->id,'data'=>$now));
                        //}
                        
                        if(aporteModel::where('usuario_id', $np1->usuario_id)->where('status','Ativo')->get()->count() == 0){
                            usuarioModel::where('usuario_id', $u->usuario_id)->update(array('status_cadastro'=>'Ativo','data_ativo'=>$now));
                        }else{
                            usuarioModel::where('usuario_id', $u->usuario_id)->update(array('status_cadastro'=>'Ativo'));
                        }
                        
                        aporteModel::where('aporte_id', $ap->aporte_id)->update(array('status'=>'Ativo','data_investimento'=>$now,'data_recebimento'=>$data_recebimento,'data_pagamento'=>$now,'data_confirmacao'=>$now));
                        
                        $message = '<div class="alert alert-success">Sucesso! <b>Investimento Ativado com sucesso.</b></div>';
                        
                        header("Refresh:2;url=../../investimentos-ativos");
                    }
                }
            }else if($status_pagamento == 1){
                aporteModel::where('aporte_id', $value->aporte_id)->update(array('data_pagamento'=>$now,'status'=>'Aguardando'));
                $message = '<div class="alert alert-warning">Aguarde.. <b>Sem atualização.</b></div>';
            }else if($status_pagamento < 0){
                //aporteModel::where('aporte_id', $value->aporte_id)->delete();  
                $message = '<div class="alert alert-warning">Aguarde.. <b>Sem atualização.</b></div>';
            }
            //echo "STATUS: ".$status_pagamento."<br>";
		    
		    //$message = '<div class="alert alert-warning">'.$valid_mbk_x['result']['status'].'</div>';
		    //$message = '<div class="alert alert-warning">Carregando..</div>';
        }
        
		$dados['Investimentos'] = aporteModel::where('usuario_id', $usuario)->where('status','!=','Ativo')->where('status','!=','Finalizado')->get();
		foreach ($dados['Investimentos'] as $key => $value) {
		    
		    $value->hora_investimento = date("H:i:s", strtotime($value->data_investimento)); 
			$value->data_investimento = date("d/m/Y", strtotime($value->data_investimento)); 
			$value->hora_recebimento = date("H:i:s", strtotime($value->data_recebimento)); 	
			$value->data_recebimento = date("d/m/Y", strtotime($value->data_recebimento)); 	
		}
		
		
		return $this->view->render($res,'cliente/investimentos_pendentes.html',array('baseurl'=>base_url ,'message'=> $message,'dados'=>$dados));
	}
	
	function todos_aportespendentes($req,$res,$args)
	{
	    $usuario = $_SESSION['id'];

	    $cont01 = 0;
		//$query = usuarioModel::select('usuario_id','nome','usuario','email','whatsapp')->orderBy('usuario_id','asc')->get();
		$query = aporteModel::where('usuario_id',$usuario)->where('status','!=','Ativo')->where('status','!=','Finalizado')->get();
		foreach ($query as $key => $value) {
		    //$value->aporte_id = $value->aporte_id;	
		    
		    $us = usuarioModel::select('nome','usuario')->where('usuario_id', $value->usuario_id)->get()[0];
			
			$value->nome = $us->nome;
			$value->usuario = 'Usuário: <strong>#'.$us->usuario.'</strong><br><small class="text-black"><i>Nome: <strong style="font-size: 13px;">'.$us->nome.'</strong></i></small>';
			//$value->usuario = '<h5 class="mb-0 mt-2 font-weight-semibold">'.$us->usuario.'</h5><p class="text-muted mb-0">'.$us->nome.'</p>';
			//$value->foto = $us->usuario;
			
			/*$kits0 = kitModel::get();    
		    foreach ($kits0 as $key => $value1) {
		        if(($value->investimento % $value1->valor) == 0){
		            $kits = intval($value->investimento / $value1->valor);
		        }
		    }*/
		    
		    if($value->status == 'Pendente'){
                $value->pagar = '<a href="/dashboard/enviar-comprovante/'.$value->aporte_id.'" class="btn" style="background-image: linear-gradient(to right, #545454, #2E2E2E);"><b>PAGAR</b></a>';
                $value->cancelar = '<form method="POST">
            							<input type="hidden" name="id" value="'.$value->aporte_id.'" />
            							<button class="btn" style="background-image: linear-gradient(to right, #545454, #2E2E2E);" type="submit" name="cancelar"><b>CANCELAR</b></button>
            						</form>';
            }else{
                $value->pagar = '';
                $value->cancelar = '';
            }
			
			if($value->status == 'Aguardando'){
			    $value->status = '<span class="badge badge-warning" style="font-size:10px;color:black;border-radius:35%;"><b>AGUARDANDO CONFIRMAÇÃO DE RECEBIMENTO</b></span>';
			}else if($value->status == 'Pendente'){
			    $value->status = '<span class="badge badge-danger" style="font-size:10px;color:black;border-radius:35%;"><b>PENDENTE</b></span>';
			}
			
			$value->recebido = rendimentoModel::where('aporte_id',$value->aporte_id)->sum('valor');
			if(is_null($dados['Rentabilidade'])){
			    $value->valor_final = $value->investimento + ($value->investimento * 0.15);
			}else{
			    $value->valor_final = $value->investimento + ($value->investimento * ($dados['Rentabilidade'] / 100));
			}
			
			$value->investimento = '<b>R$ '.number_format($value->investimento,2,",",".").'</b>';
            $value->recebimento = '<b>R$ '.number_format($value->recebimento,2,",",".").'</b>';
            $value->kits = '<b>'.$kits.'</b>';
            $value->progresso = 'Recebido <b>R$ '.number_format($recebido,2,",",".").'</b> de <b>R$ '.number_format($valor_final,2,",",".").'</b>';
            
            $value->data_investimento = date("d/m/Y H:i:s", strtotime($value->data_investimento));
            $value->data_recebimento = date("d/m/Y H:i:s", strtotime($value->data_recebimento));
            
            $value->rendimentos = '<a href="/painel/contratos/rendimentos/'.$value->aporte_id.'" class="btn" style="background-image: linear-gradient(to right, #545454, #2E2E2E);"><b>RENDIMENTOS</b></a>';
            
            if($value->comprovante == ''){
            	$value->nota = '<a href="/dashboard/anexar-comprovante/'.$value->aporte_id.'" class="btn" style="background-image: linear-gradient(to right, #545454, #2E2E2E);"><b>ANEXAR</b></a>';
            }else{
            	$value->nota = '<a href="/comprovantes/'.$value->comprovante.'" target="_blank" class="btn" style="background-image: linear-gradient(to right, #545454, #2E2E2E);">VER</a>';
            }
            
            $value->rendimentos = '<a class="btn" style="background-image: linear-gradient(to right, #545454, #2E2E2E);" href="/dashboard/rendimentos/'.$value->aporte_id.'"><i class="batch-icon batch-icon-paper-ripped"></i></a>';
            $value->contrato = '<a class="btn btn-sm" style="background-image: linear-gradient(to right, #545454, #2E2E2E);" href="/dashboard/contrato/impressao/'.$value->aporte_id.'" target="_blank"><b>VISUALIZAR CONTRATO</b></a>';
		}
	 
		echo json_encode($query);
	}
	
	
	function investimentos_finalizados($req,$res,$args){
		$message = '';
		$usuario = $_SESSION['id'];
		$Dusuario = usuarioModel::where('usuario_id', $usuario)->get()[0];
    
        if($Dusuario->acesso == 'Investidor'){
	        if($_SESSION['admin_id'] != $_SESSION['id']){
    	        $dados['Acesso_admin'] = 'Sim';
    	        $_SESSION['ant_id'] = $_SESSION['admin_id'];
    	    }
	    }
    
        if($usuario == ''){
           $url = $this->router->pathFor('login');
		   return $res->withStatus(200)->withHeader('Location', $url);
        }

        if($Dusuario->pin == ''){
           $url = $this->router->pathFor('pin');
		   return $res->withStatus(200)->withHeader('Location', $url);
        }

    	$dados['Acesso'] = $Dusuario->acesso;
		$dados['Usuario'] = $Dusuario->usuario;  
		$dados['Nome'] = $Dusuario->nome;  
		$dados['Email'] = $Dusuario->email;  
		$dados['Foto'] = $Dusuario->foto;  
		$dados['Pais'] = $Dusuario->pais;
		$dados['Cpf'] = $Dusuario->cpf;
		$dados['Genero'] = $Dusuario->genero;
		
		
		$mes_atual = date('m');
	    $mes_passado = $mes_atual - 1;
	    if(strlen($mes_passado) == 1){
	        $mes_passado = '0'.$mes_passado;    
	    }
	    
	    $data_atual1 = date('Y-m-01 00:00:00');
	    $data_atual2 = date('Y-m-t 23:59:59');
	    
	    $data_passado1 = date('Y-'.$mes_passado.'-01 00:00:00');
	    $data_passado2 = date('Y-'.$mes_passado.'-t 23:59:59');
	    
		
		$dados['Investimentos_passado'] = aporteModel::where('usuario_id',$usuario)->where('status','Finalizado')->where('data_investimento','>=',$data_passado1)->where('data_investimento','<=',$data_passado2)->sum('investimento_real');
	    $dados['Investimentos_mes'] = aporteModel::where('usuario_id',$usuario)->where('status','Finalizado')->where('data_investimento','>=',$data_atual1)->where('data_investimento','<=',$data_atual2)->sum('investimento_real');
	    

		
		$dados['Investimentos'] = aporteModel::where('usuario_id', $usuario)->where('status','Finalizado')->get();
		foreach ($dados['Investimentos'] as $key => $value) {
		    $value->hora_investimento = date("H:i:s", strtotime($value->data_investimento)); 
			$value->data_investimento = date("d/m/Y H:i:s", strtotime($value->data_investimento)); 
			$value->hora_recebimento = date("H:i:s", strtotime($value->data_recebimento)); 	
			$value->data_recebimento = date("d/m/Y H:i:s", strtotime($value->data_recebimento)); 	
		}
		
		return $this->view->render($res,'cliente/investimentos_finalizados.html',array('baseurl'=>base_url ,'message'=> $message,'dados'=>$dados));
	}
	
	function todos_aportesfinalizados($req,$res,$args)
	{
	    $usuario = $_SESSION['id'];

	    $cont01 = 0;
		//$query = usuarioModel::select('usuario_id','nome','usuario','email','whatsapp')->orderBy('usuario_id','asc')->get();
		$query = aporteModel::where('usuario_id',$usuario)->where('status','Finalizado')->get();
		foreach ($query as $key => $value) {
		    //$value->aporte_id = $value->aporte_id;	
		    
		    $us = usuarioModel::select('nome','usuario')->where('usuario_id', $value->usuario_id)->get()[0];
			
			$value->nome = $us->nome;
			$value->usuario = 'Usuário: <strong>#'.$us->usuario.'</strong><br><small class="text-black"><i>Nome: <strong style="font-size: 13px;">'.$us->nome.'</strong></i></small>';
			//$value->usuario = '<h5 class="mb-0 mt-2 font-weight-semibold">'.$us->usuario.'</h5><p class="text-muted mb-0">'.$us->nome.'</p>';
			//$value->foto = $us->usuario;
			
			/*$kits0 = kitModel::get();    
		    foreach ($kits0 as $key => $value1) {
		        if(($value->investimento % $value1->valor) == 0){
		            $kits = intval($value->investimento / $value1->valor);
		        }
		    }*/
		    
		    $value->status = '<span class="badge badge-info" style="font-size:10px;color:black;border-radius:35%;"><b>FINALIZADO</b></span>';
            
            if($value->compra_id == 1){
                if($value->resgate == 'Sim'){
    			    $value->resgate = '<b>Sim</b>';
                }else{
                    $value->resgate = '<b>Não</b>';
                }
            }else{
                $value->resgate = '<b>Não</b>';
            }
                
			$value->recebido = rendimentoModel::where('aporte_id',$value->aporte_id)->sum('valor');
			if(is_null($dados['Rentabilidade'])){
			    $value->valor_final = $value->investimento + ($value->investimento * 0.15);
			}else{
			    $value->valor_final = $value->investimento + ($value->investimento * ($dados['Rentabilidade'] / 100));
			}
			
			$value->investimento = '<b>R$ '.number_format($value->investimento,2,",",".").'</b>';
            $value->recebimento = '<b>R$ '.number_format($value->recebimento,2,",",".").'</b>';
            $value->progresso = 'Recebido <b>R$ '.number_format($recebido,2,",",".").'</b> de <b>R$ '.number_format($valor_final,2,",",".").'</b>';
            
            $value->data_investimento = date("d/m/Y H:i:s", strtotime($value->data_investimento));
            $value->data_recebimento = date("d/m/Y H:i:s", strtotime($value->data_recebimento));
            
            $value->rendimentos = '<a href="/painel/contratos/rendimentos/'.$value->aporte_id.'" class="btn" style="background-image: linear-gradient(to right, #545454, #2E2E2E);"><b>RENDIMENTOS</b></a>';
            
            if($value->comprovante == ''){
            	$value->nota = '<a href="/dashboard/anexar-comprovante/'.$value->aporte_id.'" class="btn" style="background-image: linear-gradient(to right, #545454, #2E2E2E);"><b>ANEXAR</b></a>';
            }else{
            	$value->nota = '<a href="/comprovantes/'.$value->comprovante.'" target="_blank" class="btn" style="background-image: linear-gradient(to right, #545454, #2E2E2E);"><b>COMPROVANTE</b></a>';
            }
            
            $value->rendimentos = '<a class="btn" style="background-image: linear-gradient(to right, #545454, #2E2E2E);" href="/dashboard/rendimentos/'.$value->aporte_id.'"><i class="batch-icon batch-icon-paper-ripped"></i></a>';
            $value->contrato = '<a class="btn btn-sm" style="background-image: linear-gradient(to right, #545454, #2E2E2E);" href="/dashboard/contrato/impressao/'.$value->aporte_id.'" target="_blank"><b>VISUALIZAR CONTRATO</b></a>';
		}
	 
		echo json_encode($query);
	}
	
	function tickets($req,$res,$args){
		$message = '';
		if(isset($_SESSION['antigo_id'])){
		    $usuario = $_SESSION['antigo_id'];
		}else{
		    $usuario = $_SESSION['id'];
		}

        $u = usuarioModel::where('usuario_id', $usuario)->get()[0];
        $dados['Nome'] = $u->nome;
        $dados['Usuario'] = $u->usuario;
        $dados['Email'] = $u->email;
        $dados['Acesso'] = $u->acesso;
        $dados['Pais'] = $u->pais;
        $dados['Foto'] = $u->foto;
        $dados['Genero'] = $u->genero;
        
        $now = date('Y-m-d H:i:s');
        
        if($usuario == ''){
           $url = $this->router->pathFor('login');
		   return $res->withStatus(200)->withHeader('Location', $url);
        }
		
		
        $dados['Tickets_andamento'] = ticketModel::where('usuario_id',$usuario)->where('status', 'Andamento')->get()->count();
        $dados['Tickets_finalizados'] = ticketModel::where('usuario_id',$usuario)->where('status', 'Finalizado')->get()->count();
		
		return $this->view->render($res,'cliente/tickets.html',array('baseurl'=>base_url ,'dados'=>$dados));
	}
	
	function tickets_finalizados($req,$res,$args){
		$message = '';
		if(isset($_SESSION['antigo_id'])){
		    $usuario = $_SESSION['antigo_id'];
		}else{
		    $usuario = $_SESSION['id'];
		}

        $u = usuarioModel::where('usuario_id', $usuario)->get()[0];
        $dados['Nome'] = $u->nome;
        $dados['Usuario'] = $u->usuario;
        $dados['Email'] = $u->email;
        $dados['Acesso'] = $u->acesso;
        $dados['Pais'] = $u->pais;
        $dados['Foto'] = $u->foto;
        $dados['Genero'] = $u->genero;
        
        $now = date('Y-m-d H:i:s');
        
        if($usuario == ''){
           $url = $this->router->pathFor('login');
		   return $res->withStatus(200)->withHeader('Location', $url);
        }
		
		
        $dados['Tickets_andamento'] = ticketModel::where('usuario_id',$usuario)->where('status', 'Andamento')->get()->count();
        $dados['Tickets_finalizados'] = ticketModel::where('usuario_id',$usuario)->where('status', 'Finalizado')->get()->count();
		
		return $this->view->render($res,'cliente/tickets_finalizados.html',array('baseurl'=>base_url ,'dados'=>$dados));
	}
	
	function tickets_andamento($req,$res,$args){
		$message = '';
		if(isset($_SESSION['antigo_id'])){
		    $usuario = $_SESSION['antigo_id'];
		}else{
		    $usuario = $_SESSION['id'];
		}

        $u = usuarioModel::where('usuario_id', $usuario)->get()[0];
        $dados['Nome'] = $u->nome;
        $dados['Usuario'] = $u->usuario;
        $dados['Email'] = $u->email;
        $dados['Acesso'] = $u->acesso;
        $dados['Pais'] = $u->pais;
        $dados['Foto'] = $u->foto;
        $dados['Genero'] = $u->genero;
        
        $now = date('Y-m-d H:i:s');
        
        if($usuario == ''){
           $url = $this->router->pathFor('login');
		   return $res->withStatus(200)->withHeader('Location', $url);
        }
		
		
        $dados['Tickets'] = ticketModel::where('usuario_id',$usuario)->where('status','Andamento')->get();
		foreach ($dados['Tickets'] as $key => $value) {
		    $ultimo = mensagemModel::where('ticket_id',$value->id)->orderby('id','desc')->get()[0];
    		if($ultimo->usuario_id != $usuario){
    		    $value->nova = 'Sim';
    		}
		    
		    $value->hora_criado = date("H:i:s", strtotime($value->data_criado));     
            $value->data_criado = date("d/m/Y", strtotime($value->data_criado));
            
            $value->hora_atualizado = date("H:i:s", strtotime($value->data_atualizado));     
            $value->data_atualizado = date("d/m/Y", strtotime($value->data_atualizado));     
        }
		
		return $this->view->render($res,'cliente/tickets_andamento.html',array('baseurl'=>base_url ,'dados'=>$dados));
	}
	
	function mensagens($req,$res,$args){
		$message = '';
		if(isset($_SESSION['antigo_id'])){
		    $usuario = $_SESSION['antigo_id'];
		}else{
		    $usuario = $_SESSION['id'];
		}

        $u = usuarioModel::where('usuario_id', $usuario)->get()[0];
        $dados['Nome'] = $u->nome;
        $dados['Usuario_id'] = $u->usuario_id;
        $dados['Usuario'] = $u->usuario;
        $dados['Email'] = $u->email;
        $dados['Acesso'] = $u->acesso;
        $dados['Pais'] = $u->pais;
        $dados['Foto'] = $u->foto;
        $dados['Genero'] = $u->genero;
        
        
        $now = date('Y-m-d H:i:s');
        
        if($usuario == ''){
           $url = $this->router->pathFor('login');
		   return $res->withStatus(200)->withHeader('Location', $url);
        }
		
		$dados['Ticket_id'] = $args['id'];
		
		$ultimo = mensagemModel::where('ticket_id',$args['id'])->orderby('id','desc')->get()[0];
		$dados['Assunto'] = $ultimo->assunto;
		
		if($ultimo->usuario_id != $usuario){
		    ticketModel::where('id', $args['id'])->update(array('visualizado'=>'Sim'));		
		}
		
        $dados['Mensagens'] = mensagemModel::where('ticket_id',$args['id'])->get();
		foreach ($dados['Mensagens'] as $key => $value) {
		    $us = usuarioModel::where('usuario_id', $value->usuario_id)->get()[0];
		    $value->nome = $us->nome;
		    $value->usuario = $us->usuario;
		    $value->foto = $us->foto;
		    $value->genero = $us->genero;
		    $value->acesso = $us->acesso;
		    
		    $value->hora_criado = date("H:i:s", strtotime($value->data_criado));     
            $value->data_criado = date("d/m/Y", strtotime($value->data_criado));
            
            $value->hora_atualizado = date("H:i:s", strtotime($value->data_atualizado));     
            $value->data_atualizado = date("d/m/Y", strtotime($value->data_atualizado));     
        }
		
		return $this->view->render($res,'cliente/mensagens.html',array('baseurl'=>base_url ,'dados'=>$dados));
	}
	
	function enviar_ticket($req,$res,$args){
		$message = '';
		if(isset($_SESSION['antigo_id'])){
		    $usuario = $_SESSION['antigo_id'];
		}else{
		    $usuario = $_SESSION['id'];
		}

        $u = usuarioModel::where('usuario_id', $usuario)->get()[0];
        $dados['Nome'] = $u->nome;
        $dados['Usuario'] = $u->usuario;
        $dados['Email'] = $u->email;
        $dados['Acesso'] = $u->acesso;
        $dados['Pais'] = $u->pais;
        $dados['Foto'] = $u->foto;
        $dados['Genero'] = $u->genero;
        
        $now = date('Y-m-d H:i:s');
        
        if($usuario == ''){
           $url = $this->router->pathFor('login');
		   return $res->withStatus(200)->withHeader('Location', $url);
        }
		
		
        if(isset($_POST['_csrf'])){
		    $assunto   =  isset($_POST['assunto']) ? htmlspecialchars(stripslashes(trim($_POST['assunto']))): null;
		    $assunto1   =  isset($_POST['assunto1']) ? htmlspecialchars(stripslashes(trim($_POST['assunto1']))): null;
		    $mensagem   =  isset($_POST['mensagem']) ? htmlspecialchars(stripslashes(trim($_POST['mensagem']))): null;
		
		    if($assunto == 'Outros'){
		        $ass = $assunto1;
		    }else{
		        $ass = $assunto;
		    }
		        
			$ticket = ticketModel::create(array('usuario_id'=>$usuario,'assunto'=>$ass,'data_criado'=>$now,'data_atualizado'=>$now,'status'=>'Andamento','visualizado'=>'Não'));
            mensagemModel::insert(array('ticket_id'=>$ticket->id,'usuario_id'=>$usuario,'data_criado'=>$now,'mensagem'=>$mensagem));
    				
    		$resp['msg']    = "sucesso";
            echo json_encode($resp);
            exit;    
		}
		
		if(isset($_POST['_csrfm'])){
		    $id   =  isset($_POST['id']) ? htmlspecialchars(stripslashes(trim($_POST['id']))): null;
		    $mensagem   =  isset($_POST['mensagem']) ? htmlspecialchars(stripslashes(trim($_POST['mensagem']))): null;
		
		    mensagemModel::insert(array('ticket_id'=>$id,'usuario_id'=>$usuario,'data_criado'=>$now,'mensagem'=>$mensagem));
    		ticketModel::where('id', $id)->update(array('data_atualizado'=>$now,'visualizado'=>'Não'));		
    				
    		$resp['msg']    = "sucesso";
            echo json_encode($resp);
            exit;    
		}
		
		return $this->view->render($res,'cliente/enviar_ticket.html',array('baseurl'=>base_url ,'dados'=>$dados));
	}
	
	/*function dados_pessoais($req,$res,$args){
		$message = '';
		$usuario = $_SESSION['id'];
		$Dusuario = usuarioModel::where('usuario_id', $usuario)->get()[0];
		
        if($Dusuario->acesso == 'Investidor'){
	        if($_SESSION['admin_id'] != $_SESSION['id']){
    	        $dados['Acesso_admin'] = 'Sim';
    	        $_SESSION['ant_id'] = $_SESSION['admin_id'];
    	    }
	    }
        
        if($usuario == ''){
           $url = $this->router->pathFor('login');
		   return $res->withStatus(200)->withHeader('Location', $url);
        }

        $dados['Tinvestido'] = aporteModel::where('usuario_id',$usuario)->where('status','Ativo')->sum('investimento');
		$dados['Tinvestido_rend'] = $dados['Tinvestido'] * 0.0027;
    	
		//$dados['Carteira'] = $Dusuario->carteira;
		$dados['Usuario'] = $Dusuario->usuario; 
		$dados['Nome'] = $Dusuario->nome; 
		$dados['Bitcoin'] = $Dusuario->bitcoin; 
		$dados['Patrocinador'] = $Dusuario->patrocinador; 
		$dados['Email'] = $Dusuario->email; 
		$dados['Cpf'] = $Dusuario->cpf; 
		$dados['Whatsapp'] = $Dusuario->whatsapp; 
		$dados['Cadastro'] = date("d/m/Y H:i:s", strtotime($Dusuario->data_cadastro));
		$dados['Acesso'] = $Dusuario->acesso;
        //$dados['Rentabilidade'] = $Dusuario->rentabilidade;
        
        if(isset($_POST['alterar-dados'])){
			$nome = $_POST['nome'];
			$u_nome = isset($_POST['nome']) ? stripslashes(trim($_POST['nome'])): '';
			$u_cpf = isset($_POST['cpf']) ? stripslashes(trim($_POST['cpf'])): '';
			$u_usuario = isset($_POST['usuario']) ? stripslashes(trim($_POST['usuario'])): '';
			$email = $_POST['email'];
			$u_email = isset($_POST['email']) ? stripslashes(trim($_POST['email'])): '';
			$whatsapp = $_POST['whatsapp'];
			$u_whatsapp = isset($_POST['whatsapp']) ? stripslashes(trim($_POST['whatsapp'])): '';
			
			if($Dusuario->nome == $u_nome && $Dusuario->cpf == $u_cpf && $Dusuario->usuario == $u_usuario && $Dusuario->email == $u_email && $Dusuario->whatsapp == $u_whatsapp){
			    $message = '<div class="alert alert-warning"><center><b>Não teve nenhuma alteração.</b></center></div>'; 
			}else{
			    usuarioModel::where('usuario_id', $usuario)->update(array('nome'=>$u_nome,'email'=>$u_email,'whatsapp'=>$u_whatsapp));
			    $message = '<div class="alert alert-success"><center><b>Dados alterados com sucesso.</b></center></div>'; 
			    
			    header("Refresh:2");
			}
		}

        if(isset($_POST['alterar-senha'])){
			$senha = $_POST['senha'];
			$u_senha = isset($_POST['senha']) ? stripslashes(trim($_POST['senha'])): '';
			$senha2 = $_POST['csenha'];
            $u_senha2 = isset($_POST['csenha']) ? stripslashes(trim($_POST['csenha'])): '';
            
            
            if($u_senha != $u_senha2){
                $message = '<div class="alert alert-danger"><center><b>As senhas são diferentes.</b></center></div>'; 
            }else{
			    usuarioModel::where('usuario_id', $usuario)->update(array('senha'=>md5($u_senha)));
			    
                $message = '<div class="col-12 text-left alert alert-success"><center>Senha alterada com sucesso.</center></div>';
                
                //header("Refresh:2");
            }	
		}
		
		if(isset($_POST['alterar-bitcoin'])){
			$bitcoin = isset($_POST['bitcoin']) ? stripslashes(trim($_POST['bitcoin'])): '';
			
			if($Dusuario->bitcoin == $bitcoin){
			    $message = '<div class="alert alert-warning"><center><b>Não teve nenhuma alteração.</b></center></div>'; 
			}else{
			    usuarioModel::where('usuario_id', $usuario)->update(array('bitcoin'=>$bitcoin));
			    $message = '<div class="alert alert-success"><center><b>Carteira alterada com sucesso.</b></center></div>'; 
			    
			    header("Refresh:2");
			}
		}
		
		return $this->view->render($res,'cliente/dados_pessoais.html',array('baseurl'=>base_url ,'message'=> $message,'dados'=>$dados));
	}*/
	
	function dados_bancarios($req,$res,$args){
		$message = '';
		$usuario = $_SESSION['id'];
		$now = date('Y-m-d H:i:s');
	
        if($Dusuario->acesso == 'Investidor'){
	        if($_SESSION['admin_id'] != $_SESSION['id']){
    	        $dados['Acesso_admin'] = 'Sim';
    	        $_SESSION['ant_id'] = $_SESSION['admin_id'];
    	    }
	    }

        if($usuario == ''){
            $url = $this->router->pathFor('login');
		    return $res->withStatus(200)->withHeader('Location', $url);
        }

		$Dusuario = usuarioModel::where('usuario_id', $usuario)->get()[0];
		$dados['Usuario'] = $Dusuario->usuario; 
		$dados['Nome'] = $Dusuario->nome; 
		$dados['Cpf'] = $Dusuario->cpf;
		$dados['Acesso'] = $Dusuario->acesso;
		$dados['Bitcoin'] = $Dusuario->bitcoin;
		if($Dusuario->data_bitcoin != ''){
		    $dados['Data_bitcoin'] = date("d/m/Y H:i:s", strtotime($Dusuario->data_bitcoin));
		}
		$dados['Foto'] = $Dusuario->foto;
		$dados['Email'] = $Dusuario->email;
		$dados['Pais'] = $Dusuario->pais;
		$dados['Genero'] = $Dusuario->genero;
		$dados['Documento_status'] = $Dusuario->documento_status;
		
		
		if(isset($_POST['_csrfb'])){
		    $bitcoin = isset($_POST['bitcoin']) ? htmlspecialchars(stripslashes(trim($_POST['bitcoin']))): '';
			
			if($Dusuario->documento_status == 'Pendente'){
			    $resp['msg']    = "sem documento";
                echo json_encode($resp);
                exit;    
			}else if($Dusuario->documento_status == 'Em Análise'){
			    $resp['msg']    = "aguardando";
                echo json_encode($resp);
                exit;
			}else{
			    if($Dusuario->bitcoin == ''){
        		    usuarioModel::where('usuario_id', $usuario)->update(array('bitcoin'=>$bitcoin,'data_bitcoin'=>$now,'ip_bitcoin'=>$_SERVER["REMOTE_ADDR"]));
                    
                    $resp['msg']    = "sucesso";
                    echo json_encode($resp);
                    exit;
			    }
			}
		}
		
		
		return $this->view->render($res,'cliente/dados_bancarios.html',array('baseurl'=>base_url ,'message'=> $message,'dados'=>$dados)); 
		
	}
	
	function esqueceu_pin($req,$res,$args){
		$message = '';
		$usuario = $_SESSION['id'];
		$now = date('Y-m-d H:i:s');
	
        if($Dusuario->acesso == 'Investidor'){
	        if($_SESSION['admin_id'] != $_SESSION['id']){
    	        $dados['Acesso_admin'] = 'Sim';
    	        $_SESSION['ant_id'] = $_SESSION['admin_id'];
    	    }
	    }

        if($usuario == ''){
            $url = $this->router->pathFor('login');
		    return $res->withStatus(200)->withHeader('Location', $url);
        }

		$Dusuario = usuarioModel::where('usuario_id', $usuario)->get()[0];
		$dados['Usuario'] = $Dusuario->usuario; 
		$dados['Nome'] = $Dusuario->nome; 
		$dados['Cpf'] = $Dusuario->cpf;
		$dados['Acesso'] = $Dusuario->acesso;
		$dados['Bitcoin'] = $Dusuario->bitcoin;
		if($Dusuario->data_bitcoin != ''){
		    $dados['Data_bitcoin'] = date("d/m/Y H:i:s", strtotime($Dusuario->data_bitcoin));
		}
		
		if($Dusuario->data_pin != ''){
		    $dados['Data_pin'] = date("d/m/Y H:i:s", strtotime($Dusuario->data_pin));
		}
		$dados['Foto'] = $Dusuario->foto;
		$dados['Email'] = $Dusuario->email;
		$dados['Pais'] = $Dusuario->pais;
		$dados['Genero'] = $Dusuario->genero;
		$dados['Documento_status'] = $Dusuario->documento_status;
		
		
		if(isset($_POST['_csrf'])){
		    $email = isset($_POST['email']) ? htmlspecialchars(stripslashes(trim($_POST['email']))): '';
		
		    if($Dusuario->email != ''){
		        $novoid = md5($Dusuario->usuario_id);
		        $nome = $Dusuario->nome;
		        $usuario = $Dusuario->usuario;
		        $ip = $_SERVER["REMOTE_ADDR"];
            	$dispositivo = $_SERVER['HTTP_USER_AGENT'];
			
			    $arquivo = '
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html style="width:100%;font-family:helvetica, arial, verdana, sans-serif;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%;padding:0;Margin:0">
 <head> 
  <meta charset="UTF-8"> 
  <meta content="width=device-width, initial-scale=1" name="viewport"> 
  <meta name="x-apple-disable-message-reformatting"> 
  <meta http-equiv="X-UA-Compatible" content="IE=edge"> 
  <meta content="telephone=no" name="format-detection"> 
  <title>Resetar PIN - Speed Invest</title> 
  <!--[if (mso 16)]>
    <style type="text/css">
    a {text-decoration: none;}
    </style>
    <![endif]--> 
  <!--[if gte mso 9]><style>sup { font-size: 100% !important; }</style><![endif]--> 
  <!--[if gte mso 9]>
<xml>
    <o:OfficeDocumentSettings>
    <o:AllowPNG></o:AllowPNG>
    <o:PixelsPerInch>96</o:PixelsPerInch>
    </o:OfficeDocumentSettings>
</xml>
<![endif]--> 
  <style type="text/css">
#outlook a {
	padding:0;
}
.ExternalClass {
	width:100%;
}
.ExternalClass,
.ExternalClass p,
.ExternalClass span,
.ExternalClass font,
.ExternalClass td,
.ExternalClass div {
	line-height:100%;
}
.es-button {
	mso-style-priority:100!important;
	text-decoration:none!important;
}
a[x-apple-data-detectors] {
	color:inherit!important;
	text-decoration:none!important;
	font-size:inherit!important;
	font-family:inherit!important;
	font-weight:inherit!important;
	line-height:inherit!important;
}
.es-desk-hidden {
	display:none;
	float:left;
	overflow:hidden;
	width:0;
	max-height:0;
	line-height:0;
	mso-hide:all;
}
.es-button-border:hover {
	background:#ffffff!important;
	border-style:solid solid solid solid!important;
	border-color:#3d5ca3 #3d5ca3 #3d5ca3 #3d5ca3!important;
}
td .es-button-border:hover a.es-button-1 {
	background:#76c651!important;
	border-color:#76c651!important;
}
td .es-button-border-2:hover {
	background:#76c651!important;
}
@media only screen and (max-width:600px) {p, ul li, ol li, a { font-size:16px!important; line-height:150%!important } h1 { font-size:20px!important; text-align:center; line-height:120%!important } h2 { font-size:16px!important; text-align:left; line-height:120%!important } h3 { font-size:20px!important; text-align:center; line-height:120%!important } h1 a { font-size:20px!important } h2 a { font-size:16px!important; text-align:left } h3 a { font-size:20px!important } .es-menu td a { font-size:14px!important } .es-header-body p, .es-header-body ul li, .es-header-body ol li, .es-header-body a { font-size:10px!important } .es-footer-body p, .es-footer-body ul li, .es-footer-body ol li, .es-footer-body a { font-size:12px!important } .es-infoblock p, .es-infoblock ul li, .es-infoblock ol li, .es-infoblock a { font-size:12px!important } *[class="gmail-fix"] { display:none!important } .es-m-txt-c, .es-m-txt-c h1, .es-m-txt-c h2, .es-m-txt-c h3 { text-align:center!important } .es-m-txt-r, .es-m-txt-r h1, .es-m-txt-r h2, .es-m-txt-r h3 { text-align:right!important } .es-m-txt-l, .es-m-txt-l h1, .es-m-txt-l h2, .es-m-txt-l h3 { text-align:left!important } .es-m-txt-r img, .es-m-txt-c img, .es-m-txt-l img { display:inline!important } .es-button-border { display:block!important } .es-btn-fw { border-width:10px 0px!important; text-align:center!important } .es-adaptive table, .es-btn-fw, .es-btn-fw-brdr, .es-left, .es-right { width:100%!important } .es-content table, .es-header table, .es-footer table, .es-content, .es-footer, .es-header { width:100%!important; max-width:600px!important } .es-adapt-td { display:block!important; width:100%!important } .adapt-img { width:100%!important; height:auto!important } .es-m-p0 { padding:0px!important } .es-m-p0r { padding-right:0px!important } .es-m-p0l { padding-left:0px!important } .es-m-p0t { padding-top:0px!important } .es-m-p0b { padding-bottom:0!important } .es-m-p20b { padding-bottom:20px!important } .es-mobile-hidden, .es-hidden { display:none!important } tr.es-desk-hidden, td.es-desk-hidden, table.es-desk-hidden { width:auto!important; overflow:visible!important; float:none!important; max-height:inherit!important; line-height:inherit!important } tr.es-desk-hidden { display:table-row!important } table.es-desk-hidden { display:table!important } td.es-desk-menu-hidden { display:table-cell!important } .es-menu td { width:1%!important } table.es-table-not-adapt, .esd-block-html table { width:auto!important } table.es-social { display:inline-block!important } table.es-social td { display:inline-block!important } a.es-button, button.es-button { font-size:14px!important; display:block!important; border-left-width:0px!important; border-right-width:0px!important } }
</style> 
 </head> 
 <body style="width:100%;font-family:helvetica, arial, verdana, sans-serif;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%;padding:0;Margin:0"> 
  <div class="es-wrapper-color" style="background-color:#FAFAFA"> 
   <!--[if gte mso 9]>
			<v:background xmlns:v="urn:schemas-microsoft-com:vml" fill="t">
				<v:fill type="tile" color="#fafafa"></v:fill>
			</v:background>
		<![endif]--> 
   <table class="es-wrapper" width="100%" cellspacing="0" cellpadding="0" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px;padding:0;Margin:0;width:100%;height:100%;background-repeat:repeat;background-position:center top"> 
     <tr style="border-collapse:collapse"> 
      <td valign="top" style="padding:0;Margin:0"> 
       <table cellpadding="0" cellspacing="0" class="es-content" align="center" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px;table-layout:fixed !important;width:100%"> 
         <tr style="border-collapse:collapse"> 
          <td class="es-adaptive" align="center" style="padding:0;Margin:0"> 
           <table class="es-content-body" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px;background-color:transparent;width:600px" cellspacing="0" cellpadding="0" bgcolor="#ffffff" align="center"> 
             <tr style="border-collapse:collapse"> 
              <td align="left" style="padding:10px;Margin:0"> 
               <table width="100%" cellspacing="0" cellpadding="0" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px"> 
                 <tr style="border-collapse:collapse"> 
                  <td valign="top" align="center" style="padding:0;Margin:0;width:580px"> 
                   <table width="100%" cellspacing="0" cellpadding="0" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px"> 
                     <tr style="border-collapse:collapse"> 
                      <td align="center" style="padding:0;Margin:0;display:none"></td> 
                     </tr> 
                   </table></td> 
                 </tr> 
               </table></td> 
             </tr> 
           </table></td> 
         </tr> 
       </table> 
       <table cellpadding="0" cellspacing="0" class="es-header" align="center" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px;table-layout:fixed !important;width:100%;background-color:transparent;background-repeat:repeat;background-position:center top"> 
         <tr style="border-collapse:collapse"> 
          <td class="es-adaptive" align="center" style="padding:0;Margin:0"> 
           <table class="es-header-body" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px;background-color:#3D5CA3;width:600px" cellspacing="0" cellpadding="0" bgcolor="#3d5ca3" align="center"> 
             <tr style="border-collapse:collapse"> 
              <td style="Margin:0;padding-top:20px;padding-bottom:20px;padding-left:20px;padding-right:20px;background-color:#3D5CA3" bgcolor="#3d5ca3" align="left"> 
               <table cellspacing="0" cellpadding="0" width="100%" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px"> 
                 <tr style="border-collapse:collapse"> 
                  <td align="left" style="padding:0;Margin:0;width:560px"> 
                   <table width="100%" cellspacing="0" cellpadding="0" role="presentation" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px"> 
                     <tr style="border-collapse:collapse"> 
                      <td align="left" style="padding:0;Margin:0"><p style="Margin:0;-webkit-text-size-adjust:none;-ms-text-size-adjust:none;mso-line-height-rule:exactly;font-size:30px;font-family:comic sans ms, arial, sans-serif;line-height:45px;color:#FFFFFF;text-align:center"><strong>Speed Invest</strong></p></td> 
                     </tr> 
                   </table></td> 
                 </tr> 
               </table></td> 
             </tr> 
           </table></td> 
         </tr> 
       </table> 
       <table class="es-content" cellspacing="0" cellpadding="0" align="center" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px;table-layout:fixed !important;width:100%"> 
         <tr style="border-collapse:collapse"> 
          <td style="padding:0;Margin:0;background-color:#FAFAFA" bgcolor="#fafafa" align="center"> 
           <table class="es-content-body" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px;background-color:#FFFFFF;width:600px" cellspacing="0" cellpadding="0" bgcolor="#ffffff" align="center"> 
             <tr style="border-collapse:collapse"> 
              <td style="padding:0;Margin:0;padding-left:20px;padding-right:20px;padding-top:40px;background-color:transparent;background-position:left top" bgcolor="transparent" align="left"> 
               <table width="100%" cellspacing="0" cellpadding="0" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px"> 
                 <tr style="border-collapse:collapse"> 
                  <td valign="top" align="center" style="padding:0;Margin:0;width:560px"> 
                   <table style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px;background-position:left top" width="100%" cellspacing="0" cellpadding="0" role="presentation"> 
                     <tr style="border-collapse:collapse"> 
                      <td align="center" style="padding:0;Margin:0;padding-top:5px;padding-bottom:5px;font-size:0"><img src="https://ohanzy.stripocdn.email/content/guids/CABINET_dd354a98a803b60e2f0411e893c82f56/images/23891556799905703.png" alt style="display:block;border:0;outline:none;text-decoration:none;-ms-interpolation-mode:bicubic" width="175"></td> 
                     </tr> 
                     <tr style="border-collapse:collapse"> 
                      <td align="center" style="padding:0;Margin:0;padding-top:15px;padding-bottom:15px"><h1 style="Margin:0;line-height:24px;mso-line-height-rule:exactly;font-family:arial, helvetica, sans-serif;font-size:20px;font-style:normal;font-weight:normal;color:#333333"><strong>VOCÊ SOLICITOU O RESET DO SEU PIN?</strong></h1></td> 
                     </tr> 
                     <tr style="border-collapse:collapse"> 
                      <td align="center" style="padding:0;Margin:0;padding-left:40px;padding-right:40px"><p style="Margin:0;-webkit-text-size-adjust:none;-ms-text-size-adjust:none;mso-line-height-rule:exactly;font-size:16px;font-family:helvetica, arial, verdana, sans-serif;line-height:24px;color:#666666"><br>Olá, <b>'.$nome.'</b>,<br><br>O IP <b>'.$ip.'</b> solicitou o Reset do seu PIN.<br>Se foi você que solicitou, clique no botão <b>"SIM"</b> abaixo, caso não tenha sido você, ignore esta mensagem.</p></td> 
                     </tr> 
                     <tr style="border-collapse:collapse"> 
                      <td align="center" style="Margin:0;padding-left:10px;padding-right:10px;padding-top:40px;padding-bottom:40px"><span class="es-button-border es-button-border-2" style="border-style:solid;border-color:#3D5CA3;background:#5DAC38;border-width:2px;display:inline-block;border-radius:10px;width:auto"><a href="https://speedinvest.investtrade.com.br/novo-pin/'.$novoid.'" class="es-button es-button-1" target="_blank" style="mso-style-priority:100 !important;text-decoration:none;-webkit-text-size-adjust:none;-ms-text-size-adjust:none;mso-line-height-rule:exactly;font-family:arial, helvetica, sans-serif;font-size:14px;color:#FFFFFF;border-style:solid;border-color:#5DAC38;border-width:15px 20px 15px 20px;display:inline-block;background:#5DAC38;border-radius:10px;font-weight:bold;font-style:normal;line-height:17px;width:auto;text-align:center">SIM</a></span></td> 
                     </tr> 
                     <tr style="border-collapse:collapse"> 
                      <td align="center" style="padding:0;Margin:0;padding-top:25px;padding-left:40px;padding-right:40px"><p style="Margin:0;-webkit-text-size-adjust:none;-ms-text-size-adjust:none;mso-line-height-rule:exactly;font-size:16px;font-family:helvetica, arial, verdana, sans-serif;line-height:24px;color:#666666"></p></td> 
                     </tr> 
                     
                     
                   </table></td> 
                 </tr> 
               </table></td> 
             </tr> 
           </table></td> 
         </tr> 
       </table> 
       <table class="es-footer" cellspacing="0" cellpadding="0" align="center" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px;table-layout:fixed !important;width:100%;background-color:transparent;background-repeat:repeat;background-position:center top"> 
         <tr style="border-collapse:collapse"> 
          <td style="padding:0;Margin:0;background-color:#FAFAFA" bgcolor="#fafafa" align="center"> 
           <table class="es-footer-body" cellspacing="0" cellpadding="0" bgcolor="#ffffff" align="center" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px;background-color:transparent;width:600px"> 
             <tr style="border-collapse:collapse"> 
              <td style="Margin:0;padding-top:10px;padding-left:20px;padding-right:20px;padding-bottom:30px;background-color:#0B5394;background-position:left top" bgcolor="#0b5394" align="left"> 
               <table width="100%" cellspacing="0" cellpadding="0" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px"> 
                 <tr style="border-collapse:collapse"> 
                  <td valign="top" align="center" style="padding:0;Margin:0;width:560px"> 
                   <table width="100%" cellspacing="0" cellpadding="0" role="presentation" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px"> 
                     <tr style="border-collapse:collapse"> 
                      <td align="center" style="padding:0;Margin:0;padding-top:5px;padding-bottom:5px"><h2 style="Margin:0;line-height:17px;mso-line-height-rule:exactly;font-family:arial, helvetica, sans-serif;font-size:14px;font-style:normal;font-weight:normal;color:#FFFFFF">Grande Abraço,</h2></td> 
                     </tr> 
                     <tr style="border-collapse:collapse"> 
                      <td align="center" style="padding:0;Margin:0;padding-bottom:5px"><p style="Margin:0;-webkit-text-size-adjust:none;-ms-text-size-adjust:none;mso-line-height-rule:exactly;font-size:14px;font-family:helvetica, arial, verdana, sans-serif;line-height:21px;color:#FFFFFF"><strong><span style="font-size:16px">Equipe Speed Invest</span></strong></p></td> 
                     </tr> 
                   </table></td> 
                 </tr> 
               </table></td> 
             </tr> 
           </table></td> 
         </tr> 
       </table> 
       <table class="es-content" cellspacing="0" cellpadding="0" align="center" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px;table-layout:fixed !important;width:100%"> 
         <tr style="border-collapse:collapse"> 
          <td style="padding:0;Margin:0;background-color:#FAFAFA" bgcolor="#fafafa" align="center"> 
           <table class="es-content-body" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px;background-color:transparent;width:600px" cellspacing="0" cellpadding="0" bgcolor="transparent" align="center"> 
             <tr style="border-collapse:collapse"> 
              <td style="padding:0;Margin:0;padding-top:15px;background-position:left top" align="left"> 
               <table width="100%" cellspacing="0" cellpadding="0" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px"> 
                 <tr style="border-collapse:collapse"> 
                  <td valign="top" align="center" style="padding:0;Margin:0;width:600px"> 
                   <table width="100%" cellspacing="0" cellpadding="0" role="presentation" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px"> 
                     <tr style="border-collapse:collapse"> 
                      <td align="center" style="padding:0;Margin:0;padding-bottom:20px;padding-left:20px;padding-right:20px;font-size:0"> 
                       <table width="100%" height="100%" cellspacing="0" cellpadding="0" border="0" role="presentation" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px"> 
                         <tr style="border-collapse:collapse"> 
                          <td style="padding:0;Margin:0;border-bottom:1px solid #FAFAFA;background:none;height:1px;width:100%;margin:0px"></td> 
                         </tr> 
                       </table></td> 
                     </tr> 
                   </table></td> 
                 </tr> 
               </table></td> 
             </tr> 
           </table></td> 
         </tr> 
       </table> 
       <table class="es-footer" cellspacing="0" cellpadding="0" align="center" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px;table-layout:fixed !important;width:100%;background-color:transparent;background-repeat:repeat;background-position:center top"> 
         <tr style="border-collapse:collapse"> 
          <td style="padding:0;Margin:0;background-color:#FAFAFA" bgcolor="#fafafa" align="center"> 
           <table class="es-footer-body" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px;background-color:transparent;width:600px" cellspacing="0" cellpadding="0" bgcolor="transparent" align="center"> 
             <tr style="border-collapse:collapse"> 
              <td align="left" style="Margin:0;padding-bottom:5px;padding-top:15px;padding-left:20px;padding-right:20px"> 
               <table width="100%" cellspacing="0" cellpadding="0" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px"> 
                 <tr style="border-collapse:collapse"> 
                  <td valign="top" align="center" style="padding:0;Margin:0;width:560px"> 
                   <table width="100%" cellspacing="0" cellpadding="0" role="presentation" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px"> 
                     <tr style="border-collapse:collapse"> 
                      <td align="center" style="padding:0;Margin:0"><p style="Margin:0;-webkit-text-size-adjust:none;-ms-text-size-adjust:none;mso-line-height-rule:exactly;font-size:12px;font-family:helvetica, arial, verdana, sans-serif;line-height:18px;color:#E2332E">Não responda este email.</p></td> 
                     </tr> 
                   </table></td> 
                 </tr> 
               </table></td> 
             </tr> 
           </table></td> 
         </tr> 
       </table> 
       <table class="es-content" cellspacing="0" cellpadding="0" align="center" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px;table-layout:fixed !important;width:100%"> 
         <tr style="border-collapse:collapse"> 
          <td align="center" style="padding:0;Margin:0"> 
           <table class="es-content-body" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px;background-color:transparent;width:600px" cellspacing="0" cellpadding="0" bgcolor="#ffffff" align="center"> 
             <tr style="border-collapse:collapse"> 
              <td align="left" style="Margin:0;padding-left:20px;padding-right:20px;padding-top:30px;padding-bottom:30px"> 
               <table width="100%" cellspacing="0" cellpadding="0" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px"> 
                 <tr style="border-collapse:collapse"> 
                  <td valign="top" align="center" style="padding:0;Margin:0;width:560px"> 
                   <table width="100%" cellspacing="0" cellpadding="0" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px"> 
                     <tr style="border-collapse:collapse"> 
                      <td align="center" style="padding:0;Margin:0;display:none"></td> 
                     </tr> 
                   </table></td> 
                 </tr> 
               </table></td> 
             </tr> 
           </table></td> 
         </tr> 
       </table></td> 
     </tr> 
   </table> 
  </div>  
 </body>
</html>';
    		   
    		    
    		    //enviar
       
                // Instância da classe
                $mail = new PHPMailer(true);
                try
                {
                    // Configurações do servidor
                    //$mail->isSMTP();        //Devine o uso de SMTP no envio
                    $mail->SMTPAuth = true; //Habilita a autenticação SMTP
                    $mail->CharSet = "UTF-8";
                    $mail->Username   = 'speedinvest@investtrade.com.br';
                    $mail->Password   = 'Speed@2021#$';
                    //$mail->Username   = 'speedinvest.investtrade@gmail.com';
                    //$mail->Password   = 'Speed@2021#';
                    //$mail->Username   = 'priscilabispo1993@gmail.com';
                    //$mail->Password   = 'Priscila*14';
                    // Criptografia do envio SSL também é aceito
                    $mail->SMTPSecure = 'ssl';
                    // Informações específicadas pelo Google
                    //$mail->Host = 'smtp.gmail.com';
                    //$mail->Port = 587;
                    $mail->Host = 'smtp.titan.email';
                    $mail->Port = 465;
                    // Define o remetente
                    $mail->setFrom('naoresponda@speedinvest.investtrade.com.br', 'Speed Invest');
                    // Define o destinatário
                    $mail->addAddress($Dusuario->email, $Dusuario->nome);
                    // Conteúdo da mensagem
                    $mail->isHTML(true);  // Seta o formato do e-mail para aceitar conteúdo HTML
                    $mail->Subject = 'Resetar PIN';
                    //$mail->Body    = 'Este é o corpo da mensagem <b>Olá em negrito!</b>';
                    $mail->Body = $arquivo;
                    //$mail->AltBody = 'Este é o cortpo da mensagem para clientes de e-mail que não reconhecem HTML';
                    // Enviar
                    $mail->send();
                    //echo 'A mensagem foi enviada!';
                    
                    $resp['msg']    = "sucesso";
                    echo json_encode($resp);
                    exit;
                }
                catch (Exception $e)
                {
                    echo "Message could not be sent. Mailer Error: {$mail->ErrorInfo}";
                }
	    
    		}else{
    		    $resp['msg']    = "email não cadastrado";
                echo json_encode($resp);
                exit;    
    		}
		}
		
		
		return $this->view->render($res,'cliente/esqueceu_pin.html',array('baseurl'=>base_url ,'message'=> $message,'dados'=>$dados)); 
		
	}
	
	function novo_pin($req,$res,$args){
		$message = '';
		$now = date("Y-m-d H:i:s");
		$usuario = $_SESSION['id'];
		$Dusuario = usuarioModel::where('usuario_id',$usuario)->get()[0];
		
		$sistema = sistemaModel::where('sistema_id',1)->get()[0];
        
        if($Dusuario->acesso == 'Investidor'){
	        if($_SESSION['admin_id'] != $_SESSION['id']){
    	        $dados['Acesso_admin'] = 'Sim';
    	        $_SESSION['ant_id'] = $_SESSION['admin_id'];
    	    }
	    }

        if($usuario == ''){
           $url = $this->router->pathFor('login');
		   return $res->withStatus(200)->withHeader('Location', $url);
        }
        
        
        if($args['id'] != md5($Dusuario->usuario_id)){
           $dados['Permitido'] = 'Não'; 
        }else{
            $dados['Permitido'] = 'Sim';
        }
        
        
		$agora = date("H");
		$dia = date("d");
		$mes = date("m");
		$ano = date("Y");
		$m = date("Y-m-d 00:00:00");
		
        $dados['Usuario'] = $Dusuario->usuario;
        $dados['Nome'] = $Dusuario->nome;
        $dados['Email'] = $Dusuario->email;
		$dados['Acesso'] = $Dusuario->acesso;
		//$dados['Carteira'] = $Dusuario->carteira;
		$dados['Pais'] = $Dusuario->pais;
		$dados['Foto'] = $Dusuario->foto;
		$dados['Cpf'] = $Dusuario->cpf;
		$dados['Documento_status'] = $Dusuario->documento_status;
		$dados['Genero'] = $Dusuario->genero;
		
		
	    
        //if(isset($_POST['_csrfr'])){
		if(isset($_POST['cadastrar'])){
		    $senha = isset($_POST['senha']) ? htmlspecialchars(stripslashes(trim($_POST['senha']))): null;
			$pin = isset($_POST['pin']) ? htmlspecialchars(stripslashes(trim($_POST['pin']))): null;
			$cpin = isset($_POST['cpin']) ? htmlspecialchars(stripslashes(trim($_POST['cpin']))): null;
		    
		    $now = date('Y-m-d H:i:s');
		    
		    if($pin != $cpin){
		        $message = '<div class="alert alert-danger" role="alert"><center><b>Erro!</b> Os 2 PINs são diferentes.</center></div>';
		        //$resp['msg']    = "diferente";
                //echo json_encode($resp);
                //exit;
		    }else if(strlen($pin) < 6){
		        $message = '<div class="alert alert-danger" role="alert"><center><b>Erro!</b> O PIN deve ter no mínimo 6 caracteres.</center></div>';
		        //$resp['msg']    = "curto";
                //echo json_encode($resp);
                //exit;
		    }else if(!preg_match("/[A-Z]{1,}/", $pin)){
		        $message = '<div class="alert alert-danger" role="alert"><center><b>Erro!</b> O PIN deve ter pelo menos 1 letra maiúscula.</center></div>';
		        //$resp['msg']    = "maiúsculo";
                //echo json_encode($resp);
                //exit;
		    }else if(!preg_match("/[a-z]{1,}/", $pin)){
		        $message = '<div class="alert alert-danger" role="alert"><center><b>Erro!</b> O PIN deve ter pelo menos 1 letra minúscula.</center></div>';
		        //$resp['msg']    = "minúsculo";
                //echo json_encode($resp);
                //exit;
		    }else if(!preg_match("/[0-9]{1,}/", $pin)){
		        $message = '<div class="alert alert-danger" role="alert"><center><b>Erro!</b> O PIN deve ter pelo menos 1 número.</center></div>';
		        //$resp['msg']    = "número";
                //echo json_encode($resp);
                //exit;  
		    }else if($Dusuario->senha != md5($senha)){
		        $message = '<div class="alert alert-danger" role="alert"><center><b>Erro!</b> Senha inválida.</center></div>';
		        //$resp['msg']    = "senha inválida";
                //echo json_encode($resp);
                //exit;  
		    }else{
                usuarioModel::where('usuario_id', $usuario)->update(array('pin'=>md5($pin),'data_pin'=>$now));   
                
                $message = '<div class="alert alert-success" role="alert"><center><b>Sucesso!</b> PIN alterado com sucesso.</center></div>';
                //$resp['msg']    = "sucesso";
                //echo json_encode($resp);
                //exit;
		    }
		}
		
		
		
		return $this->view->render($res,'cliente/novo_pin.html',array('baseurl'=>base_url ,'message'=> $message,'dados'=>$dados));
	}
	
	function pagar($req,$res,$args){
		$message = '';
		$usuario = $_SESSION['id'];
		$Dusuario = usuarioModel::where('usuario_id', $usuario)->get()[0];
		$sistema = sistemaModel::where('sistema_id', 1)->get()[0];
		
		$dados['Nome'] = $Dusuario->nome;
		$dados['Email'] = $Dusuario->email;
		$dados['Usuario'] = $Dusuario->usuario;
		$dados['Foto'] = $Dusuario->foto;
		$dados['Pais'] = $Dusuario->pais;
		$dados['Cpf'] = $Dusuario->cpf;
		$dados['Genero'] = $Dusuario->genero;
		
	
		$dados['Pagina'] = "Pagar";
		$now = date('Y-m-d H:i:s');
		
	    
		if($Dusuario->acesso == 'Investidor'){
	        if($_SESSION['admin_id'] != $_SESSION['id']){
    	        $dados['Acesso_admin'] = 'Sim';
    	        $_SESSION['ant_id'] = $_SESSION['admin_id'];
    	    }
	    }
		
        if($usuario == ''){
            $url = $this->router->pathFor('login');
		    return $res->withStatus(200)->withHeader('Location', $url);
        }

		$dados['Acesso'] = $Dusuario->acesso;
		
		$dados['Carteira_bitcoin'] = $sistema->carteira_bitcoin;
		
		if(isset($args['id'])){
			$dados['Aporte_id'] = $args['id'];
		}else{
			$dados['Aporte_id'] = $_SESSION['aporte_id'];
		}
		

		//$aporte_id = $dados['Aporte_id'];
		$aporte = aporteModel::where('aporte_id', $dados['Aporte_id'])->get()[0];
		$data = date("Y-m-d", strtotime($aporte->data_investimento.'+3 day'));
		
		$dados['Data_investimento'] = date("d/m/Y H:i:s", strtotime($aporte->data_investimento));
		$dados['Valor_investimento'] = $aporte->investimento;
		$dados['Valor_investimento_real'] = $aporte->investimento_real;
		
		
		$valid_mbk_c = curl_init();
		curl_setopt_array($valid_mbk_c, array(
		    CURLOPT_URL => "https://bitpay.com/api/rates",
		    CURLOPT_RETURNTRANSFER => true,
		    CURLOPT_ENCODING => "",
		    CURLOPT_MAXREDIRS => 10,
		    CURLOPT_TIMEOUT => 0,
		    CURLOPT_FOLLOWLOCATION => false,
		    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
		    CURLOPT_CUSTOMREQUEST => "GET",
		    CURLOPT_HTTPHEADER => array(
		        "Content-Type: application/json"
	        ),
	    ));

	    $valid_mbk_r = curl_exec($valid_mbk_c);
	    $valid_mbk_e = curl_error($valid_mbk_c);
	    curl_close($valid_mbk_c);
	    $valid_mbk_x = json_decode($valid_mbk_r, true);
        
        //echo "-------------------------------".$valid_mbk_r."<br>"; 
        //$dados['Btc_valor'] = $valid_mbk_x['data']['last'];
		
		
		
        if(isset($_POST['_csrfi'])){	
			if(isset($_FILES)){
        		$foto = $_FILES["file"];
        		$id = $_POST["id"];
                                
                if (empty($foto["name"])) {
                    //$message = '<div class="alert alert-danger" role="alert"><center><b>Nenhuma imagem selecionada.</b></center></div>';
                    $resp['msg']    = "sem imagem";
                    echo json_encode($resp);
                    exit;
                }else{
                 	if($foto['type'] != 'image/jpeg' && $foto['type'] != 'image/jpg' && $foto['type'] != 'image/gif' && $foto['type'] != 'image/png' && $foto['type'] != 'application/pdf'){
              	   	    //$error->codigo = 2;
            		    //return json_encode($error);
            		    $resp['msg']    = "formato inválido";
                        echo json_encode($resp);
                        exit;
             		}else if($foto['size'] > 2097152){   
                		$resp['msg']    = "arquivo grande";
                        echo json_encode($resp);
                        exit;
             		}else{
    					//preg_match("/\.(gif|bmp|png|jpg|jpeg){1}$/i", $_FILES['file']["name"], $ext);
    					$ext = pathinfo($foto['name'], PATHINFO_EXTENSION);
                		$nome_imagem = md5(uniqid(time())) . "." . $ext;
                		$caminho_imagem = "comprovantes/" . $nome_imagem;
                    	move_uploaded_file($_FILES['file']["tmp_name"], $caminho_imagem);
                                    	
                                    	
                        aporteModel::where('aporte_id', $id)->update(array('data_pagamento'=>$now,'status'=>'Aguardando','comprovante'=>$nome_imagem));
                    				                	
                        //$message = '<div class="alert alert-success" role="alert"><center><b>Comprovante enviado com sucesso. AGUARDE ANÁLISE!</b></center></div>';
                        $resp['msg']    = "sucesso";
                        echo json_encode($resp);
                        exit;
                    
            			/*if(isset($args['id'])){
            				header("Refresh:2;url=../../dashboard/saldosadicionados");
            			}else{
            				header("Refresh:2;url=contratospendentes");
            			}*/
                	}
        		}
			}
		}
		
	    
	    $dados['Pagamentos'] = pagamentoModel::where('status','disponível')->get();
		/*foreach ($dados['Pagamentos'] as $key => $value) {
		    $value->data_investimento = date("d/m/Y H:i:s", strtotime($value->data_investimento)); 
		    $value->data_recebimento = date("d/m/Y H:i:s", strtotime($value->data_recebimento)); 
		}*/
		
		return $this->view->render($res,'cliente/pagar.html',array('baseurl'=>base_url ,'message'=> $message,'dados'=>$dados));
	}
	
	function cadastrar($req, $res, $args){
	    $sistema = sistemaModel::where('sistema_id', 1)->get()[0];
	    $dados['Logo'] = $sistema->logo;
	    $dados['Termos'] = $sistema->termos;
	    
	    
		$message = '';
        $certo = 0;
        
        //$tem = filter_var("pittybispo@gag", FILTER_VALIDATE_EMAIL);
        //$u_login = 'pitty00@';
        //$sim = preg_match('/^[a-zA-Z0-9]+$/', $u_login);
        //echo "LOGIN: ".$sim; 
        
        if(isset($_POST['_csrf'])):
			$patrocinador   =  isset($_POST['patrocinador']) ? htmlspecialchars(stripslashes(trim($_POST['patrocinador']))): null;
            $u_nome   =  isset($_POST['nome']) ? htmlspecialchars(stripslashes(trim($_POST['nome']))): null;
			$u_email      =  isset($_POST['email']) ? htmlspecialchars(stripslashes(trim($_POST['email']))): null;
			$u_genero      =  isset($_POST['genero']) ? htmlspecialchars(stripslashes(trim($_POST['genero']))): null;
			$u_cpf   =  isset($_POST['cpf']) ? htmlspecialchars(stripslashes(trim($_POST['cpf']))): null;
			$u_documento   =  isset($_POST['documento']) ? htmlspecialchars(stripslashes(trim($_POST['documento']))): null;
			$u_idioma   =  isset($_POST['idioma']) ? htmlspecialchars(stripslashes(trim($_POST['idioma']))): null;
			$u_whatsapp   =  isset($_POST['whatsapp']) ? htmlspecialchars(stripslashes(trim($_POST['whatsapp']))): null;
			$u_login      =  isset($_POST['usuario']) ? htmlspecialchars(stripslashes(trim($_POST['usuario']))): null;
			$u_senha      =  isset($_POST['senha']) ? htmlspecialchars(stripslashes(trim($_POST['senha']))): null;
			//$u_nif   =  isset($_POST['nif']) ? stripslashes(trim($_POST['nif'])): null;
			//$u_pais      =  isset($_POST['pais']) ? stripslashes(trim($_POST['pais'])): null;
			//$u_pais = 'Brasil';
			$nacionalidade   =  isset($_POST['nacionalidade']) ? htmlspecialchars(stripslashes(trim($_POST['nacionalidade']))): null;
			$nascimento   =  isset($_POST['nascimento']) ? htmlspecialchars(stripslashes(trim($_POST['nascimento']))): null;
			
			
			//tranforma do padrão nacional para internacional: 2019-01-17
            $data_internacional = implode("-",array_reverse(explode("/",$nascimento)));
            
            //gera a data atual
            $data_atual = date("Y-m-d");
			$idade = $data_atual - $data_internacional;
		
		    //$sintaxe='#^[\w.-]+@[\w.-]+\.[a-zA-Z]{2,6}$#';  
            //$tem = preg_match($Syntaxe,$email);
            
			if(count(explode(" ", $u_login)) > 1):
                $resp['msg']    = "usuário com espaço";
                echo json_encode($resp);
                exit;
            elseif(!preg_match('/^[a-zA-Z0-9]+$/', $u_login)):
                $resp['msg']    = "usuário inválido";
                echo json_encode($resp);
                exit;
            elseif(usuarioModel::where('usuario', $u_login)->get()->count() > 0):
				//$message = '<div class="alert alert-danger" role="alert"><center><strong> Erro:</strong> Usuário já existe no sistema.</center></div>';
				$resp['msg']    = "usuário cadastrado";
                echo json_encode($resp);
                exit;
			elseif(usuarioModel::where('email', $u_email)->get()->count() > 0):
				//$message = '<div class="alert alert-danger" role="alert"><center><strong> Erro:</strong> E-mail já cadastrado no sistema.</center></div>';
				$resp['msg']    = "email cadastrado";
                echo json_encode($resp);
                exit;
            elseif(filter_var($u_email, FILTER_VALIDATE_EMAIL) == false):
                $resp['msg']    = "email inválido";
                echo json_encode($resp);
                exit;
            /*elseif (strlen($u_cpf) != 14):
                $resp['msg']    = "cpf inválido";
                echo json_encode($resp);
                exit;*/
            elseif($idade < 18):    
                $resp['msg']    = "menor idade";
                echo json_encode($resp);
                exit;
			else:
			    if($nacionalidade == 'brasileiro'):
			        if(is_null($u_cpf) || strlen($u_cpf) == 0):
        				$resp['msg']    = "cpf branco";
                        echo json_encode($resp);
                        exit;
			        elseif(usuarioModel::where('cpf', $u_cpf)->get()->count() > 0):
        				//$message = '<div class="alert alert-danger" role="alert"><center><strong> Erro:</strong> CPF já cadastrado no sistema.</center></div>';
        				$resp['msg']    = "cpf cadastrado";
                        echo json_encode($resp);
                        exit;
			        else:
        			    if(strlen($u_cpf) == 14){
        			        // Elimina possivel mascara
                        	$cpf = preg_replace("/[^0-9]/", "", $u_cpf);
                        	$cpf = str_pad($cpf, 11, '0', STR_PAD_LEFT);
                        	
                        	// Verifica se o numero de digitos informados é igual a 11 
                        	if (strlen($cpf) != 11) {
                        		//return false;
                        		$certo = 0;
                        		//$message = '<div class="alert alert-danger" role="alert"><center><strong> Erro:</strong> CPF inválido.</center></div>';
                        		
                        		$resp['msg']    = "cpf inválido";
                                echo json_encode($resp);
                                exit;
                        	}
                        	// Verifica se nenhuma das sequências invalidas abaixo 
                        	// foi digitada. Caso afirmativo, retorna falso
                        	else if ($cpf == '00000000000' || 
                        		$cpf == '11111111111' || 
                        		$cpf == '22222222222' || 
                        		$cpf == '33333333333' || 
                        		$cpf == '44444444444' || 
                        		$cpf == '55555555555' || 
                        		$cpf == '66666666666' || 
                        		$cpf == '77777777777' || 
                        		$cpf == '88888888888' || 
                        		$cpf == '99999999999') {
                        		//return false;
                        		$certo = 0;
                        		//$message = '<div class="alert alert-danger" role="alert"><center><strong> Erro:</strong> CPF inválido.</center></div>';
                        		
                        		$resp['msg']    = "cpf inválido";
                                echo json_encode($resp);
                                exit;
                        	 // Calcula os digitos verificadores para verificar se o
                        	 // CPF é válido
                        	} else {   
                            	for ($t = 9; $t < 11; $t++) {
                        			
                        			for ($d = 0, $c = 0; $c < $t; $c++) {
                        				$d += $cpf{$c} * (($t + 1) - $c);
                        			}
                        			$d = ((10 * $d) % 11) % 10;
                        			if ($cpf{$c} != $d) {
                        				//return false;
                        				$certo = 0;
                        			}else{
                        			    $certo = 1;
                        			}
                        		}
                                        
                                //$certo = 1;
                        		//return true;
                        		
                    		    if($certo == 0){
                    		        //$message = '<div class="alert alert-danger" role="alert"><center><strong> Erro:</strong> CPF inválido.</center></div>';    
                    		        $resp['msg']    = "cpf inválido";
                                    echo json_encode($resp);
                                    exit;
                    		    }
                        	}
        			    }else{
        			        $resp['msg']    = "cpf inválido";
                            echo json_encode($resp);
                            exit;
        			    }
        			    
        			    $volta['cpf']  = $u_cpf;
        			    $volta['idioma']  = 'português';
        			endif;
        	    else:
        	        $volta['documento']  = $u_documento;
        	        $volta['idioma']  = $u_idioma;
        	    endif;
            	
            	$volta['email'] = $u_email;
                $volta['usuario'] = $u_login;
                $volta['patrocinador'] = $patrocinador;
                $volta['nome'] = $u_nome;
                $volta['nacionalidade']  = $nacionalidade;
                $volta['genero']  = $u_genero;
                $volta['whatsapp']  = $u_whatsapp;
                $volta['acesso'] = 'Investidor';
                $volta['senha'] = md5($u_senha);
                $volta['status_cadastro'] = 'Inativo';
        	    $volta['data_cadastro'] = date('Y-m-d H:i:s');
        	    //$volta['pais'] = $_POST['pais'];
        		$volta['documento_status'] = 'Pendente';
        
                if(isset($_POST['termos'])){
                    $content = [
                        "secret" => "6LdKAocaAAAAAK3EaLJ122y1JRc8VgTv28ptTtf_",
                        "response" => $_POST["g-recaptcha-response"] ?? "",
                        "remoteip" => $_SERVER["REMOTE_ADDR"] ?? null,
                    ];
                    
                    $curl = curl_init("https://www.google.com/recaptcha/api/siteverify");
                    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
                    curl_setopt($curl, CURLOPT_POST, true);
                    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);
                    curl_setopt($curl, CURLOPT_POSTFIELDS, $content);
                    $validation = curl_exec($curl);
                    curl_close($curl);
                    
                    $response = json_decode($validation);
                    
                    if($response->success) {
                        usuarioModel::insert($volta);
                        
                        
                		//$us = usuarioModel::where('usuario_id', $value2->usuario_id)->get()[0];
                		//$nivel1 = $us->patrocinador;
                		//$n1 = usuarioModel::where('usuario', $nivel1)->get()[0];
                				
                		$us2 = usuarioModel::where('usuario', $patrocinador)->get()[0];
                		$nivel2 = $us2->patrocinador;
                		$n2 = usuarioModel::where('usuario', $nivel2)->get()[0];
                				
                		$us3 = usuarioModel::where('usuario', $us2->patrocinador)->get()[0];
                		$nivel3 = $us3->patrocinador;
                		$n3 = usuarioModel::where('usuario', $nivel3)->get()[0];
                				 
                		$us4 = usuarioModel::where('usuario', $us3->patrocinador)->get()[0];
                		$nivel4 = $us4->patrocinador;
                		$n4 = usuarioModel::where('usuario', $nivel4)->get()[0];
                												
                		$us5 = usuarioModel::where('usuario', $us4->patrocinador)->get()[0];
                		$nivel5 = $us5->patrocinador;
                		$n5 = usuarioModel::where('usuario', $nivel5)->get()[0];
                				 
                		$us6 = usuarioModel::where('usuario', $us5->patrocinador)->get()[0];
                		$nivel6 = $us6->patrocinador;
                		$n6 = usuarioModel::where('usuario', $nivel6)->get()[0];		 
                		
                		$us7 = usuarioModel::where('usuario', $us6->patrocinador)->get()[0];
                		$nivel7 = $us7->patrocinador;
                		$n7 = usuarioModel::where('usuario', $nivel7)->get()[0];
                		
                		$us8 = usuarioModel::where('usuario', $us7->patrocinador)->get()[0];
                		$nivel8 = $us8->patrocinador;
                		$n8 = usuarioModel::where('usuario', $nivel8)->get()[0];
                				 
                				 
                		usuarioModel::where('usuario', $u_login)->update(array('nivel2'=>$nivel2,'nivel3'=>$nivel3,'nivel4'=>$nivel4,'nivel5'=>$nivel5,'nivel6'=>$nivel6,'nivel7'=>$nivel7,'nivel8'=>$nivel8));	    
                
                	    //$message = '<div class="alert alert-success" role="alert"><center>Cadastro feito com sucesso.</center></div>';	
                
                        //header("Refresh:2; url=../login");
                	    //$url = $this->router->pathFor('login');
                		 
                		$resp['msg']    = "sucesso";
                        echo json_encode($resp);
                        exit;
                    }else{
                        $resp['msg']    = "captcha inválido";
                        echo json_encode($resp);
                        exit;
                    }
                }else{
                    $resp['msg']    = "não concordo";
                    echo json_encode($resp);
                    exit;
                }
	        endif;
    	endif;



		$userCount = usuarioModel::where('usuario', $args['id'])->get()->count();
		if($userCount>0):
			$patro = usuarioModel::where('usuario', $args['id'])->get()[0];
			$dados['patrocinador'] = $patro->usuario;
		else:
			$Dusuario = usuarioModel::where('usuario_id', 1)->get()[0];
			$dados['patrocinador'] = $Dusuario->usuario;
		endif;
		return $this->view->render($res,'cliente/cadastro.html',array('baseurl' => base_url ,'dados'=>$dados,'message'=>$message));
	}
	
	
	
	
	function teste_bitcoin($req, $res, $args){
		$message = '';

        // Change path to your files
	// --------------------------------------
	//DEFINE("CRYPTOBOX_PHP_FILES_PATH", "lib/");        	// path to directory with files: cryptobox.class.php / cryptobox.callback.php / cryptobox.newpayment.php;         
                                                        // cryptobox.newpayment.php will be automatically call through ajax/php two times - payment received/confirmed
	//DEFINE("CRYPTOBOX_IMG_FILES_PATH", "images/");      // path to directory with coin image files (directory 'images' by default)
	//DEFINE("CRYPTOBOX_JS_FILES_PATH", "js/");			// path to directory with files: ajax.min.js/support.min.js
	
	
	// Change values below
	// --------------------------------------
	//DEFINE("CRYPTOBOX_LANGUAGE_HTMLID", "alang");	// any value; customize - language selection list html id; change it to any other - for example 'aa';	default 'alang'
	//DEFINE("CRYPTOBOX_COINS_HTMLID", "acoin");		// any value;  customize - coins selection list html id; change it to any other - for example 'bb';	default 'acoin'
	//DEFINE("CRYPTOBOX_PREFIX_HTMLID", "acrypto_");	// any value; prefix for all html elements; change it to any other - for example 'cc';	default 'acrypto_'
	
	
	// Open Source Bitcoin Payment Library
	// ---------------------------------------------------------------
	//require_once(CRYPTOBOX_PHP_FILES_PATH . "cryptobox.class.php" );
	
	
	
	/*********************************************************/
	/****  PAYMENT BOX CONFIGURATION VARIABLES  ****/
	/*********************************************************/
	
	// IMPORTANT: Please read description of options here - https://gourl.io/api-php.html#options
	
	$userID 			= "";        // place your registered userID or md5(userID) here (user1, user7, uo43DC, etc).
									  // You can use php $_SESSION["userABC"] for store userID, amount, etc
									  // You don't need to use userID for unregistered website visitors - $userID = "";
									  // if userID is empty, system will autogenerate userID and save it in cookies
	$userFormat		= "COOKIE";       // save userID in cookies (or you can use IPADDRESS, SESSION, MANUAL)
	$orderID		= "invoice1";	  // invoice #1
	$amountUSD		= 0.10;			  // invoice amount - 0.10 USD; or you can use - $amountUSD = convert_currency_live("EUR", "USD", 22.37); // convert 22.37EUR to USD
	
	$period			= "NOEXPIRY";	  // one time payment, not expiry
	$def_language	= "en";			  // default Language in payment box
	$def_coin		= "bitcoin";      // default Coin in payment box
	
	
	
	// List of coins that you accept for payments
	//$coins = array('bitcoin', 'bitcoincash', 'bitcoinsv', 'litecoin', 'dash', 'dogecoin', 'speedcoin', 'reddcoin', 'potcoin', 'feathercoin', 'vertcoin', 'peercoin', 'monetaryunit', 'universalcurrency');
	$coins = array('bitcoin');  // for example, accept payments in bitcoin, bitcoincash, bitcoinsv, litecoin, dash, speedcoin 
	
	// Create record for each your coin - https://gourl.io/editrecord/coin_boxes/0 ; and get free gourl keys
	// It is not bitcoin wallet private keys! Place GoUrl Public/Private keys below for all coins which you accept
	
	
	
	
	$all_keys = array(	"bitcoin"  => 		array("public_key" => "45579AAZkNJOBitcoin77BTCPUBnTYE4Y3hLXv0rsGTt6mokZJ",  "private_key" => "45579AAZkNJOBitcoin77BTCPRVhpwh5Twu6KtAQd0Srx02ncg")); // etc.
			 
	// Demo Keys; for tests	(example - 5 coins)
	$all_keys = array(	"bitcoin" => array(		"public_key" => "25654AAo79c3Bitcoin77BTCPUBqwIefT1j9fqqMwUtMI0huVL",  
										"private_key" => "25654AAo79c3Bitcoin77BTCPRV0JG7w3jg0Tc5Pfi34U8o5JE"),
					  "bitcoincash" => array("public_key" => "25656AAeOGaPBitcoincash77BCHPUBOGF20MLcgvHMoXHmMRx", 
					  					"private_key" => "25656AAeOGaPBitcoincash77BCHPRV8quZcxPwfEc93ArGB6D"),
					  "bitcoinsv" => array("public_key" => "36306AAQUmatBitcoinsv77BSVPUBlK6jR1TDDQUzaQV1AmWAE", 
					  					"private_key" => "36306AAQUmatBitcoinsv77BSVPRVJQJx21y8kvd7xxEWzK3zA"),
					  "litecoin" => array(	"public_key" => "25657AAOwwzoLitecoin77LTCPUB4PVkUmYCa2dR770wNNstdk", 
					  					"private_key" => "25657AAOwwzoLitecoin77LTCPRV7hmp8s3ew6pwgOMgxMq81F"),
					  "dash" => array(		"public_key" => "25658AAo79c3Dash77DASHPUBqwIefT1j9fqqMwUtMI0huVL0J", 
					  					"private_key" => "25658AAo79c3Dash77DASHPRVG7w3jg0Tc5Pfi34U8o5JEiTss"),
					  "speedcoin" => array(	"public_key" => "20116AA36hi8Speedcoin77SPDPUBjTMX31yIra1IBRssY7yFy", 
					  					"private_key" => "20116AA36hi8Speedcoin77SPDPRVNOwjzYNqVn4Sn5XOwMI2c")); // Demo keys!
	//  IMPORTANT: Add in file /lib/cryptobox.config.php your database settings and your gourl.io coin private keys (need for Instant Payment Notifications) -
	/* if you use demo keys above, please add to /lib/cryptobox.config.php - 
		$cryptobox_private_keys = array("25654AAo79c3Bitcoin77BTCPRV0JG7w3jg0Tc5Pfi34U8o5JE", 
					"25656AAeOGaPBitcoincash77BCHPRV8quZcxPwfEc93ArGB6D", "25657AAOwwzoLitecoin77LTCPRV7hmp8s3ew6pwgOMgxMq81F", 
					"25658AAo79c3Dash77DASHPRVG7w3jg0Tc5Pfi34U8o5JEiTss", "20116AA36hi8Speedcoin77SPDPRVNOwjzYNqVn4Sn5XOwMI2c",
					"36306AAQUmatBitcoinsv77BSVPRVJQJx21y8kvd7xxEWzK3zA");
	 	Also create table "crypto_payments" in your database, sql code - https://github.com/cryptoapi/Payment-Gateway#mysql-table
	 	Instruction - https://gourl.io/api-php.html 	 	
 	*/				   
	
	
	
	
	// Re-test - all gourl public/private keys
	$def_coin = strtolower($def_coin);
	if (!in_array($def_coin, $coins)) $coins[] = $def_coin;  
	foreach($coins as $v)
	{
	    $all_keys[$v]["public_key"] = "45579AAZkNJOBitcoin77BTCPUBnTYE4Y3hLXv0rsGTt6mokZJ";
	    $all_keys[$v]["private_key"] = "45579AAZkNJOBitcoin77BTCPRVhpwh5Twu6KtAQd0Srx02ncg";
	    
		/*if (!isset($all_keys[$v]["public_key"]) || !isset($all_keys[$v]["private_key"])) die("Please add your public/private keys for '$v' in \$all_keys variable");
		elseif (!strpos($all_keys[$v]["public_key"], "PUB"))  die("Invalid public key for '$v' in \$all_keys variable");
		elseif (!strpos($all_keys[$v]["private_key"], "PRV")) die("Invalid private key for '$v' in \$all_keys variable");
		elseif (strpos(CRYPTOBOX_PRIVATE_KEYS, $all_keys[$v]["private_key"]) === false) 
				die("Please add your private key for '$v' in variable \$cryptobox_private_keys, file /lib/cryptobox.config.php.");*/
	}
	
	
	
	
	
	// Current selected coin by user
	//$coinName = cryptobox_selcoin($coins, $def_coin);
	
	
	// Current Coin public/private keys
	$public_key  = $all_keys["bitcoin"]["public_key"];
	$private_key = $all_keys["bitcoin"]["private_key"];
	
	
	
	/** PAYMENT BOX **/
	$options = array(
	    "public_key"  	=> $public_key,	    // your public key from gourl.io
	    "private_key" 	=> $private_key,	// your private key from gourl.io
	    "webdev_key"  	=> "", 			    // optional, gourl affiliate key
	    "orderID"     	=> $orderID, 		// order id or product name
	    "userID"      		=> $userID, 	// unique identifier for every user
	    "userFormat"  	=> $userFormat, 	// save userID in COOKIE, IPADDRESS, SESSION  or MANUAL
	    "amount"   	  	=> 0,			    // product price in btc/bch/bsv/ltc/doge/etc OR setup price in USD below
	    "amountUSD"   	=> $amountUSD,	    // we use product price in USD
	    "period"      		=> $period, 	// payment valid period
	    "language"	  	=> $def_language    // text on EN - english, FR - french, etc
	);
	
	// Initialise Payment Class
	//$box = new Cryptobox ($options);
	
	// coin name
	//$coinName = $box->coin_name();
	$coinName = "bitcoin";
	
	// php code end :)
	// ---------------------
	
	// NOW PLACE IN FILE "lib/cryptobox.newpayment.php", function cryptobox_new_payment(..) YOUR ACTIONS -
	// WHEN PAYMENT RECEIVED (update database, send confirmation email, update user membership, etc)
	// IPN function cryptobox_new_payment(..) will automatically appear for each new payment two times - payment received and payment confirmed
	// Read more - https://gourl.io/api-php.html#ipn
	
    
        // Change payment box parameters online
        // Code for demo page below
        
        $page  = "//".$_SERVER["HTTP_HOST"].$_SERVER["REQUEST_URI"]; // Current page url
        $page .= (strpos($page, "?")) ? "&" : "?";
        
        
        // Reset Settings
        // ---------------------
        if (isset($_GET["reset"]))
        {
            $cookies = explode(';', $_SERVER['HTTP_COOKIE']);
            foreach($cookies as $cookie) {
                $parts = explode('=', $cookie);
                $name = trim($parts[0]);
                setcookie($name, '', time()-1000);
                setcookie($name, '', time()-1000, '/');
            }
            
            header("Location: //".$_SERVER["HTTP_HOST"].$_SERVER["SCRIPT_NAME"]); 
            echo "<script> window.location.href = '//".$_SERVER["HTTP_HOST"].$_SERVER["SCRIPT_NAME"]."'</script>";
            die();
        }
        
        
        
        // Theme Selection
        // ---------------------
        if (isset($_GET["theme"])) 
        {
            $theme = $_GET["theme"];
            setcookie("dtheme", $theme);
        }
        else $theme = (isset($_COOKIE["dtheme"])) ? $_COOKIE["dtheme"] : "default"; 
      
        if ($theme == "black")          $css =  '<link rel="stylesheet" href="https://bootswatch.com/4/darkly/bootstrap.css" crossorigin="anonymous">';
        elseif ($theme == "greyred")    $css =  '<link rel="stylesheet" href="https://bootswatch.com/4/superhero/bootstrap.css" crossorigin="anonymous">';
        elseif ($theme == "greygreen")  $css =  '<link rel="stylesheet" href="https://bootswatch.com/4/solar/bootstrap.css" crossorigin="anonymous">';
        elseif ($theme == "whiteblue")  $css =  '<link rel="stylesheet" href="https://bootswatch.com/4/cerulean/bootstrap.css" crossorigin="anonymous">';
        elseif ($theme == "whitered")   $css =  '<link rel="stylesheet" href="https://bootswatch.com/4/united/bootstrap.css" crossorigin="anonymous">';
        elseif ($theme == "whitegreen") $css =  '<link rel="stylesheet" href="https://bootswatch.com/4/flatly/bootstrap.css" crossorigin="anonymous">';
        elseif ($theme == "whiteblack") $css =  '<link rel="stylesheet" href="https://bootswatch.com/4/lux/bootstrap.css" crossorigin="anonymous">';
        elseif ($theme == "whitepurple")$css =  '<link rel="stylesheet" href="https://bootswatch.com/4/pulse/bootstrap.css" crossorigin="anonymous">';
        elseif ($theme == "litera")     $css =  '<link rel="stylesheet" href="https://bootswatch.com/4/litera/bootstrap.css" crossorigin="anonymous">';
        elseif ($theme == "minty")      $css =  '<link rel="stylesheet" href="https://bootswatch.com/4/minty/bootstrap.css" crossorigin="anonymous">';
        elseif ($theme == "sandstone")  $css =  '<link rel="stylesheet" href="https://bootswatch.com/4/sandstone/bootstrap.css" crossorigin="anonymous">';
        elseif ($theme == "sketchy")    $css =  '<link rel="stylesheet" href="https://bootswatch.com/4/sketchy/bootstrap.css" crossorigin="anonymous">';
        else                            $css =  '<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" crossorigin="anonymous">';
        // If your website not use Bootstrap4 as main style, please use custom css style below.
        // It isolate Bootstrap CSS to a particular class 'bootstrapiso' to avoid css conflicts with your site main css style
        if ($theme == "black")          $css2 =  '<link rel="stylesheet" href="css/darkly.min.css" crossorigin="anonymous">';
        elseif ($theme == "greyred")    $css2 =  '<link rel="stylesheet" href="css/superhero.min.css" crossorigin="anonymous">';
        elseif ($theme == "greygreen")  $css2 =  '<link rel="stylesheet" href="css/solar.min.css" crossorigin="anonymous">';
        elseif ($theme == "whiteblue")  $css2 =  '<link rel="stylesheet" href="css/cerulean.min.css" crossorigin="anonymous">';
        elseif ($theme == "whitered")   $css2 =  '<link rel="stylesheet" href="css/united.min.css" crossorigin="anonymous">';
        elseif ($theme == "whitegreen") $css2 =  '<link rel="stylesheet" href="css/flatly.min.css" crossorigin="anonymous">';
        elseif ($theme == "whiteblack") $css2 =  '<link rel="stylesheet" href="css/lux.min.css" crossorigin="anonymous">';
        elseif ($theme == "whitepurple")$css2 =  '<link rel="stylesheet" href="css/pulse.min.css" crossorigin="anonymous">';
        elseif ($theme == "litera")     $css2 =  '<link rel="stylesheet" href="css/litera.min.css" crossorigin="anonymous">';
        elseif ($theme == "minty")      $css2 =  '<link rel="stylesheet" href="css/minty.min.css" crossorigin="anonymous">';
        elseif ($theme == "sandstone")  $css2 =  '<link rel="stylesheet" href="css/sandstone.min.css" crossorigin="anonymous">';
        elseif ($theme == "sketchy")    $css2 =  '<link rel="stylesheet" href="css/sketchy.min.css" crossorigin="anonymous">';
        else                            $css2 =  '<link rel="stylesheet" href="css/bootstrapcustom.min.css" crossorigin="anonymous">';
        // -- End Theme ---------------------
        
        
        
        // Box Type
        // ---------------------
        if (isset($_GET["boxtype"]))
        {
            $boxtype = $_GET["boxtype"];
            setcookie("dboxtype", $boxtype);
        }
        else $boxtype = (isset($_COOKIE["dboxtype"])) ? $_COOKIE["dboxtype"] : "1";
        $boxtype = intval($boxtype);
        
        // payment received
        if ($boxtype == "2" && !$box->is_paid())
        {
            
            $options = array(
                "public_key"  => "20AAvZCcgBitcoin77BTCPUB0xyyeKkxMUmeTJRWj7IZrbJ0oL",        // your public key from gourl.io
                "private_key" => "20AAvZCcgBitcoin77BTCPRVkW3K4eNMfYTIQGiYG1QYpOOP1n",       // your private key from gourl.io
                "webdev_key"  => "",                 // optional, gourl affiliate key
                "orderID"     => "invoice1",         // order id or product name
                "userID"      => "demo",             // unique identifier for every user
                "userFormat"  => "MANUAL",           // save userID in COOKIE, IPADDRESS or SESSION
                "amount"   	  => 0,                  // product price in coins OR in USD below
                "amountUSD"   => 0.1,                // we use product price in USD
                "period"      => "NOEXPIRY",         // payment valid period
                "language"	  => $def_language       // text on EN - english, FR - french, etc
            );
            
            // Re-Initialise Payment Class
            $box = new Cryptobox ($options);
        }
        // -- End boxtype ---------------------
        
        
        
        // Logo Selection
        // ---------------------
        if (isset($_GET["logo"]))
        {
            $logo = $_GET["logo"];
            setcookie("dlogo", $logo);
        }
        else $logo = (isset($_COOKIE["dlogo"])) ? $_COOKIE["dlogo"] : "custom";
        
        if ($logo == "custom")         $logoimg_path =  CRYPTOBOX_IMG_FILES_PATH.'your_logo.png';
        elseif ($logo == "no")         $logoimg_path =  '';
        else                           $logoimg_path =  'default';
        // -- End logo ---------------------
        
        
        // Logo Selection
        // ---------------------
        if (isset($_GET["lan"]))
        {
            $lan = $_GET["lan"];
            setcookie("dlan", $lan);
        }
        else $lan = (isset($_COOKIE["dlan"])) ? $_COOKIE["dlan"] : "yes";
        
        if ($lan == "yes")            $show_languages =  true;
        else                          $show_languages =  false;
        // -- End lan ---------------------
        
        
        // Coins Menu
        // ---------------------
        if (isset($_GET["numcoin"]))
        {
            $numcoin = $_GET["numcoin"];
            setcookie("dnumcoin", $numcoin);
        }
        else $numcoin = (isset($_COOKIE["dnumcoin"])) ? $_COOKIE["dnumcoin"] : 6;
        $numcoin = intval($numcoin);
        
        if ($numcoin > 15) $numcoin = 6;
        $coins = array_slice($coins, 0, $numcoin);
        // -- End numcoin ---------------------
        
        
        
        // Coin Images Size Menu
        // ---------------------
        if (isset($_GET["coinImageSize"]))
        {
            $coinImageSize = $_GET["coinImageSize"];
            setcookie("dcoinImageSize", $coinImageSize);
        }
        else $coinImageSize = (isset($_COOKIE["dcoinImageSize"])) ? $_COOKIE["dcoinImageSize"] : 70;
        $coinImageSize = intval($coinImageSize);
        
        if ($coinImageSize > 200) $coinImageSize = 70;
        if ($coinImageSize == 70 && in_array($theme, array("black", "greyred", "greygreen"))) $coinImageSize = 71;
        
        // -- End coinImageSize ---------------------
        
        
        // Coin Images Size Menu
        // ---------------------
        if (isset($_GET["qrcodeSize"]))
        {
            $qrcodeSize = $_GET["qrcodeSize"];
            setcookie("dqrcodeSize", $qrcodeSize);
        }
        else $qrcodeSize = (isset($_COOKIE["dqrcodeSize"])) ? $_COOKIE["dqrcodeSize"] : 200;
        $qrcodeSize = intval($qrcodeSize);
        
        if ($qrcodeSize > 500) $qrcodeSize = 200;
        
        // -- End qrcodeSize ---------------------
        
        
        
        // Image on Result Page
        // ---------------------
        if (isset($_GET["resimage"]))
        {
            $resimage = $_GET["resimage"];
            setcookie("dresimage", $resimage);
        }
        else $resimage = (isset($_COOKIE["dresimage"])) ? $_COOKIE["dresimage"] : "default";
        
        if ($resimage == "image2")          $resultimg_path = "images/paid2.png";
        else if ($resimage == "image3")     $resultimg_path = "images/paid3.png";
        else if ($resimage == "custom")     $resultimg_path = "images/your_logo_res.jpg";
        else                                $resultimg_path = "default";
        
        // -- End resimage ---------------------
        
        
        
        
        // Image Size on Result Page
        // ---------------------
        if (isset($_GET["resultimgSize"]))
        {
            $resultimgSize = $_GET["resultimgSize"];
            setcookie("dresultimgSize", $resultimgSize);
        }
        else $resultimgSize = (isset($_COOKIE["dresultimgSize"])) ? $_COOKIE["dresultimgSize"] : 250;
        $resultimgSize = intval($resultimgSize);
        
        if ($resultimgSize > 500) $resultimgSize = 250;
        
        // -- End resultimgSize ---------------------
        
        
        
        
        // Data Method (ajax or curl)
        // ---------------------
        if (isset($_GET["method"]))
        {
            $method = $_GET["method"];
            setcookie("dmethod", $method);
        }
        else $method = (isset($_COOKIE["dmethod"])) ? $_COOKIE["dmethod"] : "curl";
        
        if (!in_array($method, array("ajax", "curl"))) $method = "curl";
        
        // -- End data method ---------------------        
        
        
        
        // Debug
        // ---------------------
        if (isset($_GET["deb"]))
        {
            $deb = $_GET["deb"];
            setcookie("ddeb", $deb);
        }
        else $deb = (isset($_COOKIE["ddeb"])) ? $_COOKIE["ddeb"] : "yes";
        
        if ($deb == "yes")            $debug =  true;
        else                          $debug =  false;
        // -- End debug ---------------------
        
      
        
		return $this->view->render($res,'cliente/teste_bitcoin.html',array('baseurl' => base_url ,'dados'=>$dados,'message'=>$message));
	}
	
	function esqueceu_senha($req,$res,$args){
		$message = '';
		$data_envio = date('d/m/Y');
        $hora_envio = date('H:i:s');
		
		if(isset($_POST['_csrf'])){
		//if(isset($_POST['recuperar'])){
		    $email = isset($_POST['email']) ? htmlspecialchars(stripslashes(trim($_POST['email']))): '';
		    
    		if(usuarioModel::where('email',$email)->get()->count() > 0 ){
    		    $usu = usuarioModel::where('email', $email)->get()[0];
    		    $nome = $usu->nome;
    		    $usuario = $usu->usuario;
    		    $id = $usu->usuario_id;
    		    $_SESSION['id_senha'] = $usu->usuario_id;
    		    $email2 = md5($email);
    		    
    		    /*$chave_api = "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";
				$obj = array(
					"personalizations" => array(
						array(
							"to" => array(
								array(
									"email" => $email,
									"name" => $usu->nome
								)
							),
							"dynamic_template_data" => array(
								"nome" => $usu->nome,
								"email2" => $email2
							)
						)
					),
					"from" => array(
						"email" => "naoresponda@redeentreamigos.com.br",
						"name" => "Rede entre Amigos"
					),
					"template_id" => "d-a305d746dd164f6f8d1527a026cb9cb2"
				);
				
					
				// CONVERTE PARA JSON
                $obj_convertido_em_json = json_encode($obj);
                
                // INICIA cURL
                $curl = curl_init();
                curl_setopt_array($curl, array(
                  CURLOPT_URL => "https://api.sendgrid.com/v3/mail/send",
                  CURLOPT_RETURNTRANSFER => true,
                  CURLOPT_ENCODING => "",
                  CURLOPT_MAXREDIRS => 10,
                  CURLOPT_TIMEOUT => 400,
                  CURLOPT_CONNECTTIMEOUT => 0,
                  CURLOPT_FOLLOWLOCATION => true,
                  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                  CURLOPT_CUSTOMREQUEST => "POST",
                  CURLOPT_POSTFIELDS =>$obj_convertido_em_json,
                  CURLOPT_HTTPHEADER => (object) [
                    "Authorization: Bearer $chave_api",
                    "Content-Type: application/json"
                  ],
                ));
                
                // CAPTURA RESPOSTA DO cURL E ENCERRA CONEXÃO
                $response = curl_exec($curl);
                curl_close($curl);
                
                // PRINTA INFORMAÇÕES RELEVANTES RETORNADA DO SERVER
                $api_json     = json_decode($response, true);*/
    		    
    		    /********************************** EMAIL ANTIGO ***************************************/
				
    		    //<img src='public/images/SAT-original.png' width='50%' />
    		    // Corpo E-mail
                /*$arquivo = "
                    <html>
                        <center><h2 style='color:blue;'>Redefinir sua Senha</h2>
                        
                        <br><br>
                        Para alterar a sua senha, acesse o link abaixo:<br>
                        https://www.robosat.com.br/nova-senha/$email2
                        <br>
                        <br>
                        <span style='color:gray;'>Este e-mail foi enviado em <b>$data_envio</b> às <b>$hora_envio</b></span>
                        <br><br>  
                        Atenciosamente,
                        Equipe SAT.
                        <br><br>
                        <span style='color:red;'>Por favor não responda este email.</span></center>
                    </html>
                ";*/
    		   
    		   $arquivo = '
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html style="width:100%;font-family:helvetica, arial, verdana, sans-serif;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%;padding:0;Margin:0">
 <head> 
  <meta charset="UTF-8"> 
  <meta content="width=device-width, initial-scale=1" name="viewport"> 
  <meta name="x-apple-disable-message-reformatting"> 
  <meta http-equiv="X-UA-Compatible" content="IE=edge"> 
  <meta content="telephone=no" name="format-detection"> 
  <title>Resetar Senha - Speed Invest</title> 
  <!--[if (mso 16)]>
    <style type="text/css">
    a {text-decoration: none;}
    </style>
    <![endif]--> 
  <!--[if gte mso 9]><style>sup { font-size: 100% !important; }</style><![endif]--> 
  <!--[if gte mso 9]>
<xml>
    <o:OfficeDocumentSettings>
    <o:AllowPNG></o:AllowPNG>
    <o:PixelsPerInch>96</o:PixelsPerInch>
    </o:OfficeDocumentSettings>
</xml>
<![endif]--> 
  <style type="text/css">
#outlook a {
	padding:0;
}
.ExternalClass {
	width:100%;
}
.ExternalClass,
.ExternalClass p,
.ExternalClass span,
.ExternalClass font,
.ExternalClass td,
.ExternalClass div {
	line-height:100%;
}
.es-button {
	mso-style-priority:100!important;
	text-decoration:none!important;
}
a[x-apple-data-detectors] {
	color:inherit!important;
	text-decoration:none!important;
	font-size:inherit!important;
	font-family:inherit!important;
	font-weight:inherit!important;
	line-height:inherit!important;
}
.es-desk-hidden {
	display:none;
	float:left;
	overflow:hidden;
	width:0;
	max-height:0;
	line-height:0;
	mso-hide:all;
}
.es-button-border:hover {
	background:#ffffff!important;
	border-style:solid solid solid solid!important;
	border-color:#3d5ca3 #3d5ca3 #3d5ca3 #3d5ca3!important;
}
td .es-button-border:hover a.es-button-1 {
	background:#76c651!important;
	border-color:#76c651!important;
}
td .es-button-border-2:hover {
	background:#76c651!important;
}
@media only screen and (max-width:600px) {p, ul li, ol li, a { font-size:16px!important; line-height:150%!important } h1 { font-size:20px!important; text-align:center; line-height:120%!important } h2 { font-size:16px!important; text-align:left; line-height:120%!important } h3 { font-size:20px!important; text-align:center; line-height:120%!important } h1 a { font-size:20px!important } h2 a { font-size:16px!important; text-align:left } h3 a { font-size:20px!important } .es-menu td a { font-size:14px!important } .es-header-body p, .es-header-body ul li, .es-header-body ol li, .es-header-body a { font-size:10px!important } .es-footer-body p, .es-footer-body ul li, .es-footer-body ol li, .es-footer-body a { font-size:12px!important } .es-infoblock p, .es-infoblock ul li, .es-infoblock ol li, .es-infoblock a { font-size:12px!important } *[class="gmail-fix"] { display:none!important } .es-m-txt-c, .es-m-txt-c h1, .es-m-txt-c h2, .es-m-txt-c h3 { text-align:center!important } .es-m-txt-r, .es-m-txt-r h1, .es-m-txt-r h2, .es-m-txt-r h3 { text-align:right!important } .es-m-txt-l, .es-m-txt-l h1, .es-m-txt-l h2, .es-m-txt-l h3 { text-align:left!important } .es-m-txt-r img, .es-m-txt-c img, .es-m-txt-l img { display:inline!important } .es-button-border { display:block!important } .es-btn-fw { border-width:10px 0px!important; text-align:center!important } .es-adaptive table, .es-btn-fw, .es-btn-fw-brdr, .es-left, .es-right { width:100%!important } .es-content table, .es-header table, .es-footer table, .es-content, .es-footer, .es-header { width:100%!important; max-width:600px!important } .es-adapt-td { display:block!important; width:100%!important } .adapt-img { width:100%!important; height:auto!important } .es-m-p0 { padding:0px!important } .es-m-p0r { padding-right:0px!important } .es-m-p0l { padding-left:0px!important } .es-m-p0t { padding-top:0px!important } .es-m-p0b { padding-bottom:0!important } .es-m-p20b { padding-bottom:20px!important } .es-mobile-hidden, .es-hidden { display:none!important } tr.es-desk-hidden, td.es-desk-hidden, table.es-desk-hidden { width:auto!important; overflow:visible!important; float:none!important; max-height:inherit!important; line-height:inherit!important } tr.es-desk-hidden { display:table-row!important } table.es-desk-hidden { display:table!important } td.es-desk-menu-hidden { display:table-cell!important } .es-menu td { width:1%!important } table.es-table-not-adapt, .esd-block-html table { width:auto!important } table.es-social { display:inline-block!important } table.es-social td { display:inline-block!important } a.es-button, button.es-button { font-size:14px!important; display:block!important; border-left-width:0px!important; border-right-width:0px!important } }
</style> 
 </head> 
 <body style="width:100%;font-family:helvetica, arial, verdana, sans-serif;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%;padding:0;Margin:0"> 
  <div class="es-wrapper-color" style="background-color:#FAFAFA"> 
   <!--[if gte mso 9]>
			<v:background xmlns:v="urn:schemas-microsoft-com:vml" fill="t">
				<v:fill type="tile" color="#fafafa"></v:fill>
			</v:background>
		<![endif]--> 
   <table class="es-wrapper" width="100%" cellspacing="0" cellpadding="0" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px;padding:0;Margin:0;width:100%;height:100%;background-repeat:repeat;background-position:center top"> 
     <tr style="border-collapse:collapse"> 
      <td valign="top" style="padding:0;Margin:0"> 
       <table cellpadding="0" cellspacing="0" class="es-content" align="center" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px;table-layout:fixed !important;width:100%"> 
         <tr style="border-collapse:collapse"> 
          <td class="es-adaptive" align="center" style="padding:0;Margin:0"> 
           <table class="es-content-body" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px;background-color:transparent;width:600px" cellspacing="0" cellpadding="0" bgcolor="#ffffff" align="center"> 
             <tr style="border-collapse:collapse"> 
              <td align="left" style="padding:10px;Margin:0"> 
               <table width="100%" cellspacing="0" cellpadding="0" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px"> 
                 <tr style="border-collapse:collapse"> 
                  <td valign="top" align="center" style="padding:0;Margin:0;width:580px"> 
                   <table width="100%" cellspacing="0" cellpadding="0" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px"> 
                     <tr style="border-collapse:collapse"> 
                      <td align="center" style="padding:0;Margin:0;display:none"></td> 
                     </tr> 
                   </table></td> 
                 </tr> 
               </table></td> 
             </tr> 
           </table></td> 
         </tr> 
       </table> 
       <table cellpadding="0" cellspacing="0" class="es-header" align="center" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px;table-layout:fixed !important;width:100%;background-color:transparent;background-repeat:repeat;background-position:center top"> 
         <tr style="border-collapse:collapse"> 
          <td class="es-adaptive" align="center" style="padding:0;Margin:0"> 
           <table class="es-header-body" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px;background-color:#3D5CA3;width:600px" cellspacing="0" cellpadding="0" bgcolor="#3d5ca3" align="center"> 
             <tr style="border-collapse:collapse"> 
              <td style="Margin:0;padding-top:20px;padding-bottom:20px;padding-left:20px;padding-right:20px;background-color:#3D5CA3" bgcolor="#3d5ca3" align="left"> 
               <table cellspacing="0" cellpadding="0" width="100%" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px"> 
                 <tr style="border-collapse:collapse"> 
                  <td align="left" style="padding:0;Margin:0;width:560px"> 
                   <table width="100%" cellspacing="0" cellpadding="0" role="presentation" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px"> 
                     <tr style="border-collapse:collapse"> 
                      <td align="left" style="padding:0;Margin:0"><p style="Margin:0;-webkit-text-size-adjust:none;-ms-text-size-adjust:none;mso-line-height-rule:exactly;font-size:30px;font-family:comic sans ms, arial, sans-serif;line-height:45px;color:#FFFFFF;text-align:center"><strong>Speed Invest</strong></p></td> 
                     </tr> 
                   </table></td> 
                 </tr> 
               </table></td> 
             </tr> 
           </table></td> 
         </tr> 
       </table> 
       <table class="es-content" cellspacing="0" cellpadding="0" align="center" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px;table-layout:fixed !important;width:100%"> 
         <tr style="border-collapse:collapse"> 
          <td style="padding:0;Margin:0;background-color:#FAFAFA" bgcolor="#fafafa" align="center"> 
           <table class="es-content-body" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px;background-color:#FFFFFF;width:600px" cellspacing="0" cellpadding="0" bgcolor="#ffffff" align="center"> 
             <tr style="border-collapse:collapse"> 
              <td style="padding:0;Margin:0;padding-left:20px;padding-right:20px;padding-top:40px;background-color:transparent;background-position:left top" bgcolor="transparent" align="left"> 
               <table width="100%" cellspacing="0" cellpadding="0" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px"> 
                 <tr style="border-collapse:collapse"> 
                  <td valign="top" align="center" style="padding:0;Margin:0;width:560px"> 
                   <table style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px;background-position:left top" width="100%" cellspacing="0" cellpadding="0" role="presentation"> 
                     <tr style="border-collapse:collapse"> 
                      <td align="center" style="padding:0;Margin:0;padding-top:5px;padding-bottom:5px;font-size:0"><img src="https://ohanzy.stripocdn.email/content/guids/CABINET_dd354a98a803b60e2f0411e893c82f56/images/23891556799905703.png" alt style="display:block;border:0;outline:none;text-decoration:none;-ms-interpolation-mode:bicubic" width="175"></td> 
                     </tr> 
                     <tr style="border-collapse:collapse"> 
                      <td align="center" style="padding:0;Margin:0;padding-top:15px;padding-bottom:15px"><h1 style="Margin:0;line-height:24px;mso-line-height-rule:exactly;font-family:arial, helvetica, sans-serif;font-size:20px;font-style:normal;font-weight:normal;color:#333333"><strong>ESQUECEU SUA SENHA?</strong></h1></td> 
                     </tr> 
                     <tr style="border-collapse:collapse"> 
                      <td align="center" style="padding:0;Margin:0;padding-right:35px;padding-left:40px"><p style="Margin:0;-webkit-text-size-adjust:none;-ms-text-size-adjust:none;mso-line-height-rule:exactly;font-size:16px;font-family:helvetica, arial, verdana, sans-serif;line-height:24px;color:#666666">Não se preocupe. Acontece com todo mundo =]</p></td> 
                     </tr> 
                     <tr style="border-collapse:collapse"> 
                      <td align="center" style="padding:0;Margin:0;padding-left:40px;padding-right:40px"><p style="Margin:0;-webkit-text-size-adjust:none;-ms-text-size-adjust:none;mso-line-height-rule:exactly;font-size:16px;font-family:helvetica, arial, verdana, sans-serif;line-height:24px;color:#666666"><br>Olá, <b>'.$nome.'</b><br>Seu login é: <b>'.$usuario.'</b></p></td> 
                     </tr> 
                     <tr style="border-collapse:collapse"> 
                      <td align="center" style="padding:0;Margin:0;padding-top:25px;padding-left:40px;padding-right:40px"><p style="Margin:0;-webkit-text-size-adjust:none;-ms-text-size-adjust:none;mso-line-height-rule:exactly;font-size:16px;font-family:helvetica, arial, verdana, sans-serif;line-height:24px;color:#666666">Clique no botão abaixo para alterar a sua senha.</p></td> 
                     </tr> 
                     <tr style="border-collapse:collapse"> 
                      <td align="center" style="Margin:0;padding-left:10px;padding-right:10px;padding-top:40px;padding-bottom:40px"><span class="es-button-border es-button-border-2" style="border-style:solid;border-color:#3D5CA3;background:#5DAC38;border-width:2px;display:inline-block;border-radius:10px;width:auto"><a href="https://speedinvest.investtrade.com.br/nova-senha/'.$email2.'" class="es-button es-button-1" target="_blank" style="mso-style-priority:100 !important;text-decoration:none;-webkit-text-size-adjust:none;-ms-text-size-adjust:none;mso-line-height-rule:exactly;font-family:arial, helvetica, sans-serif;font-size:14px;color:#FFFFFF;border-style:solid;border-color:#5DAC38;border-width:15px 20px 15px 20px;display:inline-block;background:#5DAC38;border-radius:10px;font-weight:bold;font-style:normal;line-height:17px;width:auto;text-align:center">Alterar Senha</a></span></td> 
                     </tr> 
                   </table></td> 
                 </tr> 
               </table></td> 
             </tr> 
           </table></td> 
         </tr> 
       </table> 
       <table class="es-footer" cellspacing="0" cellpadding="0" align="center" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px;table-layout:fixed !important;width:100%;background-color:transparent;background-repeat:repeat;background-position:center top"> 
         <tr style="border-collapse:collapse"> 
          <td style="padding:0;Margin:0;background-color:#FAFAFA" bgcolor="#fafafa" align="center"> 
           <table class="es-footer-body" cellspacing="0" cellpadding="0" bgcolor="#ffffff" align="center" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px;background-color:transparent;width:600px"> 
             <tr style="border-collapse:collapse"> 
              <td style="Margin:0;padding-top:10px;padding-left:20px;padding-right:20px;padding-bottom:30px;background-color:#0B5394;background-position:left top" bgcolor="#0b5394" align="left"> 
               <table width="100%" cellspacing="0" cellpadding="0" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px"> 
                 <tr style="border-collapse:collapse"> 
                  <td valign="top" align="center" style="padding:0;Margin:0;width:560px"> 
                   <table width="100%" cellspacing="0" cellpadding="0" role="presentation" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px"> 
                     <tr style="border-collapse:collapse"> 
                      <td align="center" style="padding:0;Margin:0;padding-top:5px;padding-bottom:5px"><h2 style="Margin:0;line-height:17px;mso-line-height-rule:exactly;font-family:arial, helvetica, sans-serif;font-size:14px;font-style:normal;font-weight:normal;color:#FFFFFF">Grande Abraço,</h2></td> 
                     </tr> 
                     <tr style="border-collapse:collapse"> 
                      <td align="center" style="padding:0;Margin:0;padding-bottom:5px"><p style="Margin:0;-webkit-text-size-adjust:none;-ms-text-size-adjust:none;mso-line-height-rule:exactly;font-size:14px;font-family:helvetica, arial, verdana, sans-serif;line-height:21px;color:#FFFFFF"><strong><span style="font-size:16px">Equipe Speed Invest</span></strong></p></td> 
                     </tr> 
                   </table></td> 
                 </tr> 
               </table></td> 
             </tr> 
           </table></td> 
         </tr> 
       </table> 
       <table class="es-content" cellspacing="0" cellpadding="0" align="center" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px;table-layout:fixed !important;width:100%"> 
         <tr style="border-collapse:collapse"> 
          <td style="padding:0;Margin:0;background-color:#FAFAFA" bgcolor="#fafafa" align="center"> 
           <table class="es-content-body" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px;background-color:transparent;width:600px" cellspacing="0" cellpadding="0" bgcolor="transparent" align="center"> 
             <tr style="border-collapse:collapse"> 
              <td style="padding:0;Margin:0;padding-top:15px;background-position:left top" align="left"> 
               <table width="100%" cellspacing="0" cellpadding="0" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px"> 
                 <tr style="border-collapse:collapse"> 
                  <td valign="top" align="center" style="padding:0;Margin:0;width:600px"> 
                   <table width="100%" cellspacing="0" cellpadding="0" role="presentation" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px"> 
                     <tr style="border-collapse:collapse"> 
                      <td align="center" style="padding:0;Margin:0;padding-bottom:20px;padding-left:20px;padding-right:20px;font-size:0"> 
                       <table width="100%" height="100%" cellspacing="0" cellpadding="0" border="0" role="presentation" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px"> 
                         <tr style="border-collapse:collapse"> 
                          <td style="padding:0;Margin:0;border-bottom:1px solid #FAFAFA;background:none;height:1px;width:100%;margin:0px"></td> 
                         </tr> 
                       </table></td> 
                     </tr> 
                   </table></td> 
                 </tr> 
               </table></td> 
             </tr> 
           </table></td> 
         </tr> 
       </table> 
       <table class="es-footer" cellspacing="0" cellpadding="0" align="center" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px;table-layout:fixed !important;width:100%;background-color:transparent;background-repeat:repeat;background-position:center top"> 
         <tr style="border-collapse:collapse"> 
          <td style="padding:0;Margin:0;background-color:#FAFAFA" bgcolor="#fafafa" align="center"> 
           <table class="es-footer-body" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px;background-color:transparent;width:600px" cellspacing="0" cellpadding="0" bgcolor="transparent" align="center"> 
             <tr style="border-collapse:collapse"> 
              <td align="left" style="Margin:0;padding-bottom:5px;padding-top:15px;padding-left:20px;padding-right:20px"> 
               <table width="100%" cellspacing="0" cellpadding="0" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px"> 
                 <tr style="border-collapse:collapse"> 
                  <td valign="top" align="center" style="padding:0;Margin:0;width:560px"> 
                   <table width="100%" cellspacing="0" cellpadding="0" role="presentation" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px"> 
                     <tr style="border-collapse:collapse"> 
                      <td align="center" style="padding:0;Margin:0"><p style="Margin:0;-webkit-text-size-adjust:none;-ms-text-size-adjust:none;mso-line-height-rule:exactly;font-size:12px;font-family:helvetica, arial, verdana, sans-serif;line-height:18px;color:#E2332E">Não responda este email.</p></td> 
                     </tr> 
                   </table></td> 
                 </tr> 
               </table></td> 
             </tr> 
           </table></td> 
         </tr> 
       </table> 
       <table class="es-content" cellspacing="0" cellpadding="0" align="center" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px;table-layout:fixed !important;width:100%"> 
         <tr style="border-collapse:collapse"> 
          <td align="center" style="padding:0;Margin:0"> 
           <table class="es-content-body" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px;background-color:transparent;width:600px" cellspacing="0" cellpadding="0" bgcolor="#ffffff" align="center"> 
             <tr style="border-collapse:collapse"> 
              <td align="left" style="Margin:0;padding-left:20px;padding-right:20px;padding-top:30px;padding-bottom:30px"> 
               <table width="100%" cellspacing="0" cellpadding="0" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px"> 
                 <tr style="border-collapse:collapse"> 
                  <td valign="top" align="center" style="padding:0;Margin:0;width:560px"> 
                   <table width="100%" cellspacing="0" cellpadding="0" style="mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px"> 
                     <tr style="border-collapse:collapse"> 
                      <td align="center" style="padding:0;Margin:0;display:none"></td> 
                     </tr> 
                   </table></td> 
                 </tr> 
               </table></td> 
             </tr> 
           </table></td> 
         </tr> 
       </table></td> 
     </tr> 
   </table> 
  </div>  
 </body>
</html>';
    		   
    		    
    		    //enviar
       
                // emails para quem será enviado o formulário
                //$emailenviar = "priscilabispo1993@gmail.com";
                $emailenviar = $email;
                $destino = $emailenviar;
                $assunto = "Alterar Senha";
             
                // É necessário indicar que o formato do e-mail é html
                /*$headers  = 'MIME-Version: 1.0' . "\r\n";
                $headers .= 'Content-type: text/html; charset=iso-8859-1' . "\r\n";
                $headers .= 'From: Speed Invest <naoresponda@speedinvest.investtrade.com.br>';
                //$headers .= "Bcc: $EmailPadrao\r\n";
               
                $enviaremail = mail($destino, $assunto, $arquivo, $headers);
				*/
				
		        
		        // Instância da classe
                $mail = new PHPMailer(true);
                try
                {
                    // Configurações do servidor
                    //$mail->isSMTP();        //Devine o uso de SMTP no envio
                    $mail->SMTPAuth = true; //Habilita a autenticação SMTP
                    $mail->CharSet = "UTF-8";
                    $mail->Username   = 'speedinvest@investtrade.com.br';
                    $mail->Password   = 'Speed@2021#$';
                    //$mail->Username   = 'speedinvest.investtrade@gmail.com';
                    //$mail->Password   = 'Speed@2021#';
                    //$mail->Username   = 'priscilabispo1993@gmail.com';
                    //$mail->Password   = 'Priscila*14';
                    // Criptografia do envio SSL também é aceito
                    $mail->SMTPSecure = 'ssl';
                    // Informações específicadas pelo Google
                    //$mail->Host = 'smtp.gmail.com';
                    //$mail->Port = 587;
                    $mail->Host = 'smtp.titan.email';
                    $mail->Port = 465;
                    // Define o remetente
                    $mail->setFrom('naoresponda@speedinvest.investtrade.com.br', 'Speed Invest');
                    // Define o destinatário
                    $mail->addAddress($email, $nome);
                    // Conteúdo da mensagem
                    $mail->isHTML(true);  // Seta o formato do e-mail para aceitar conteúdo HTML
                    $mail->Subject = 'Alterar Senha';
                    //$mail->Body    = 'Este é o corpo da mensagem <b>Olá em negrito!</b>';
                    $mail->Body = $arquivo;
                    //$mail->AltBody = 'Este é o cortpo da mensagem para clientes de e-mail que não reconhecem HTML';
                    // Enviar
                    $mail->send();
                    //echo 'A mensagem foi enviada!';
                    
                    $resp['msg']    = "sucesso";
                    echo json_encode($resp);
                    exit;
                }
                catch (Exception $e)
                {
                    echo "Message could not be sent. Mailer Error: {$mail->ErrorInfo}";
                }
	    
    		}else{
    		    $resp['msg']    = "email não cadastrado";
                echo json_encode($resp);
                exit;    
    		}
		}
		
		
		/***********************************************************************************/
		
		/*// Instância da classe
                $mail = new PHPMailer(true);
                try
                {
                    // Configurações do servidor
                    $mail->isSMTP();        //Devine o uso de SMTP no envio
                    $mail->SMTPAuth = true; //Habilita a autenticação SMTP
                    $mail->Username   = 'speedinvest.investtrade@gmail.com';
                    //$mail->Username   = 'priscilabispo1993@gmail.com';
                    $mail->Password   = 'Speed@2021#';
                    //$mail->Password   = 'Priscila*14';
                    // Criptografia do envio SSL também é aceito
                    $mail->SMTPSecure = 'tls';
                    // Informações específicadas pelo Google
                    $mail->Host = 'smtp.gmail.com';
                    $mail->Port = 587;
                    //$mail->Host = 'smtp.titan.email';
                    //$mail->Port = 465;
                    // Define o remetente
                    $mail->setFrom('naoresponda@speedinvest.investtrade.com.br', 'Speed Invest');
                    // Define o destinatário
                    $mail->addAddress('priscilabispo1993@gmail.com', 'Priscila Bispo');
                    // Conteúdo da mensagem
                    $mail->isHTML(true);  // Seta o formato do e-mail para aceitar conteúdo HTML
                    $mail->Subject = 'Alterar Senha';
                    $mail->Body    = 'Este é o corpo da mensagem <b>Olá em negrito!</b>';
                    //$mail->Body = $arquivo;
                    $mail->AltBody = 'Este é o cortpo da mensagem para clientes de e-mail que não reconhecem HTML';
                    // Enviar
                    $mail->send();
                    echo 'A mensagem foi enviada!';
                    
                }
                catch (Exception $e)
                {
                    echo "Message could not be sent. Mailer Error: {$mail->ErrorInfo}";
                }
		*/
		
		
		return $this->view->render($res,'cliente/esqueceu.html',array('baseurl'=>base_url ,'message'=>$message));
	}
	
	function nova_senha($req,$res,$args){
		$_SESSION['mensagem'] = "errado";        
		$_SESSION['args0'] = $args['id'];        
		header("Refresh:0; url=../atualizar-senha");
	}
	
	function alterar_nova_senha($req,$res,$args){
	    $clientes = usuarioModel::get();
	    foreach ($clientes as $key => $value) {
	        if(md5($value->email) == $_SESSION['args0']){
                $id = $value->usuario_id;
	        }
        }
	    
	    
	    if($_SESSION['mensagem'] == "errado"){
	        $dados['msg']    = "erro";
        }else{
	        $dados['msg']    = "certo";
	    }
	    
		//if(isset($_POST['alterar'])){
		if(isset($_POST['_csrf'])){
		    $u_senha   =  isset($_POST['senha']) ? htmlspecialchars(stripslashes(trim($_POST['senha']))): null;
		    $u_senha2   =  isset($_POST['csenha']) ? htmlspecialchars(stripslashes(trim($_POST['csenha']))): null;
		
		    if($u_senha != '' && $u_senha2 != ''){
			    if($u_senha == $u_senha2){
    				usuarioModel::where('usuario_id', $id)->update(array('senha'=>md5($u_senha)));
    				
    				$resp['msg']    = "sucesso";
                    echo json_encode($resp);
                    exit;    
			    }else{
	   	        $resp['msg']    = "senhas diferentes";
                    echo json_encode($resp);
                    exit;    
			    }
			}
		}
		
		
		return $this->view->render($res,'cliente/nova_senha.html',array('baseurl'=>base_url ,'message'=>$message,'dados'=>$dados));
	}
	
	function cronUpdate()
	{
	    $now = date('Y-m-d H:i:s');
	    $sistema = sistemaModel::where('sistema_id', 1)->get()[0];
	    
		if(aporteModel::where('status','!=','Ativo')->where('status','!=','Finalizado')->get()->count() > 0 ){
		    // Fill these in from your API Keys page 
            //$public_key = '6c06eb3fbbefadd0c52a003dfdc70141e4418811fd2591e7c9b0ce53cee394b5'; 
            //$private_key = 'f06427DB623DE5912521946cbce8aC5673B590ac468cfDe5Ac5E7246176c5bB8'; 
            
            $public_key = 'cdc606942d5a9c7d3928af6854ade6ef819620f740bc016f4333dc90eae2db20'; 
            $private_key = 'E6F9517d96f4b9890f35D7a708309290FCCb541113C3a2dc357FdD27ADBce923';  
            
            
		    $investimentos = aporteModel::where('status','!=','Ativo')->where('status','!=','Finalizado')->get();
            foreach ($investimentos as $key => $value) {
                echo "deu certo";
                
    		    $req = array();
                $req['version'] = 1; 
                $req['key'] = $public_key; 
                $req['format'] = 'json'; //supported values are json and xml 
                $req['cmd'] = "get_tx_info";
                //$req['txid'] = "CPFD71RIWJYW12OHN7POJYKKFL";
                //CPFD2WMDATWAGAQUW59LZD1XDS
                $req['txid'] = $value->txn_id;
                
                // Generate the query string 
                $post_data = http_build_query($req, '', '&'); 
                 
                // Calculate the HMAC signature on the POST data 
                $hmac = hash_hmac('sha512', $post_data, $private_key); 
                 
                // Use curl to hit the endpoint so that you can send the required headers 
                $ch = curl_init('https://www.coinpayments.net/api.php'); 
                    curl_setopt($ch, CURLOPT_FAILONERROR, TRUE); 
                    curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); 
                    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0); 
                curl_setopt($ch, CURLOPT_HTTPHEADER, array('HMAC: '.$hmac)); 
                curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data); 
                 
                // Execute the call and close cURL handle      
                $data = curl_exec($ch); 
            
                $valid_mbk_x = json_decode($data, true);
                $status_pagamento = $valid_mbk_x['result']['status'];
                //$value->status_pagamento = $valid_mbk_x['result']['status'];
                
                //var_dump($data);
                
                //ATUALIZAR STATUS, SUBIR BÔNUS E PONTOS!
                if($status_pagamento >= 100 || $status_pagamento == 2){
                    $u = usuarioModel::where('usuario_id', $value->usuario_id)->get()[0];
                    
                    $us = usuarioModel::where('usuario_id', $u->usuario_id)->get()[0];
                    $np1 = usuarioModel::where('usuario', $us->patrocinador)->get()[0];
                    $np2 = usuarioModel::where('usuario', $np1->patrocinador)->get()[0];
                    $np3 = usuarioModel::where('usuario', $np2->patrocinador)->get()[0];
                    $np4 = usuarioModel::where('usuario', $np3->patrocinador)->get()[0];
                    $np5 = usuarioModel::where('usuario', $np4->patrocinador)->get()[0];
                    
                    $v = $value->investimento;
                    
                    $data01 = gmdate('d/m/Y H:i:s',strtotime('+21 day',strtotime($now)));
                    $data1 = str_replace("/", "-", $data01);
                    $data_recebimento = date('Y-m-d H:i:s', strtotime($data1));
                    
                    //$taxa1 = ($sistema->comissao_n1 / 100);
                    $taxa1 = $sistema->comissao_n1;
                    $taxa2 = $sistema->comissao_n2; 
                    $taxa3 = $sistema->comissao_n3; 
                    $taxa4 = $sistema->comissao_n4; 
                    $taxa5 = $sistema->comissao_n5; 
                    
                    $n1 = $v * ($taxa1 / 100); 
                    $n2 = $v * ($taxa2 / 100); 
                    $n3 = $v * ($taxa3 / 100); 
                    $n4 = $v * ($taxa4 / 100); 
                    $n5 = $v * ($taxa5 / 100); 
                    
                    
                    /***********************************************************************/
                    //SUBIR PONTOS - A CADA 5,00 REAIS É 1 PONTO
                    
                    $pont = intval($value->investimento_real / 5);
                    
                    $n0p = $pont * ($sistema->pontos_n0 / 100); 
                    $n1p = $pont * ($sistema->pontos_n1 / 100); 
                    $n2p = $pont * ($sistema->pontos_n2 / 100);
                    $n3p = $pont * ($sistema->pontos_n3 / 100);
                    $n4p = $pont * ($sistema->pontos_n4 / 100);
                    $n5p = $pont * ($sistema->pontos_n5 / 100);
                    
                    
                    $pontos = pontosModel::create(array('usuario_id'=>$u->usuario_id,'investidor_id'=>$value->aporte_id,'pontos'=>$n0p,'valor'=>$value->investimento_real,'data'=>$now,'nivel'=>0));
                    
                                                            		    
                    //NÍVEL 1
                    if($np1->status_cadastro == 'Ativo'){
                        if($sistema->comissao_n1 > 0){
                            if(bonusModel::where('aporte_id',$ap->aporte_id)->where('nivel',1)->get()->count() == 0){
                                $bonus = bonusModel::create(array('aporte_id'=>$value->aporte_id,'usuario_id'=>$u->usuario_id,'patrocinador'=>$np1->usuario_id,'valor'=>$n1,'taxa'=>$taxa1,'status'=>'Pago','data_bonus'=>$now,'nivel'=>1));
                            }
                        }
                    }
                    
                    $pontos = pontosModel::create(array('usuario_id'=>$u->usuario_id,'investidor_id'=>$value->aporte_id,'patrocinador'=>$np1->usuario_id,'pontos'=>$n1p,'valor'=>$value->investimento_real,'data'=>$now,'nivel'=>1));
                    //extratoModel::insert(array('pat_id'=>$np1->usuario_id,'usuario_id'=>$u->usuario_id,'tipo'=>'Bônus','bonus_id'=>$bonus->id,'data'=>$now));
                        
                    //extratoModel::insert(array('pat_id'=>$np1->usuario_id,'usuario_id'=>$u->usuario_id,'tipo'=>'Pontos','bonus_id'=>$bonus->id,'data'=>$now));
                    
                    
                    
                    //NÍVEL 2
                    //if($np2->status_cadastro == 'Ativo'){
                        if($sistema->comissao_n2 > 0){
                            $bonus = bonusModel::create(array('aporte_id'=>$value->aporte_id,'usuario_id'=>$u->usuario_id,'patrocinador'=>$np2->usuario_id,'valor'=>$n2,'taxa'=>$taxa2,'status'=>'Pago','data_bonus'=>$now,'nivel'=>2));
                        }
                        
                        $pontos = pontosModel::create(array('usuario_id'=>$u->usuario_id,'investidor_id'=>$value->aporte_id,'patrocinador'=>$np2->usuario_id,'pontos'=>$n2p,'valor'=>$value->investimento_real,'data'=>$now,'nivel'=>2));
                        //extratoModel::insert(array('pat_id'=>$np1->usuario_id,'usuario_id'=>$u->usuario_id,'tipo'=>'Pontos','bonus_id'=>$bonus->id,'data'=>$now));
                    //}
                    
                    //NÍVEL 3
                    //if($np3->status_cadastro == 'Ativo'){
                        if($sistema->comissao_n3 > 0){
                            $bonus = bonusModel::create(array('aporte_id'=>$value->aporte_id,'usuario_id'=>$u->usuario_id,'patrocinador'=>$np3->usuario_id,'valor'=>$n3,'taxa'=>$taxa3,'status'=>'Pago','data_bonus'=>$now,'nivel'=>3));
                        }
                        
                        $pontos = pontosModel::create(array('usuario_id'=>$u->usuario_id,'investidor_id'=>$value->aporte_id,'patrocinador'=>$np3->usuario_id,'pontos'=>$n3p,'valor'=>$value->investimento_real,'data'=>$now,'nivel'=>3));
                        //extratoModel::insert(array('pat_id'=>$np1->usuario_id,'usuario_id'=>$u->usuario_id,'tipo'=>'Pontos','bonus_id'=>$bonus->id,'data'=>$now));
                    //}
                    
                    //NÍVEL 4
                    //if($np4->status_cadastro == 'Ativo'){
                        if($sistema->comissao_n4 > 0){
                            $bonus = bonusModel::create(array('aporte_id'=>$value->aporte_id,'usuario_id'=>$u->usuario_id,'patrocinador'=>$np4->usuario_id,'valor'=>$n4,'taxa'=>$taxa4,'status'=>'Pago','data_bonus'=>$now,'nivel'=>4));
                        }
                        
                        $pontos = pontosModel::create(array('usuario_id'=>$u->usuario_id,'investidor_id'=>$value->aporte_id,'patrocinador'=>$np4->usuario_id,'pontos'=>$n4p,'valor'=>$value->investimento_real,'data'=>$now,'nivel'=>4));
                        //extratoModel::insert(array('pat_id'=>$np1->usuario_id,'usuario_id'=>$u->usuario_id,'tipo'=>'Pontos','bonus_id'=>$bonus->id,'data'=>$now));
                    //}
                    
                    //NÍVEL 5
                    //if($np5->status_cadastro == 'Ativo'){
                        if($sistema->comissao_n5 > 0){
                            $bonus = bonusModel::create(array('aporte_id'=>$value->aporte_id,'usuario_id'=>$u->usuario_id,'patrocinador'=>$np5->usuario_id,'valor'=>$n5,'taxa'=>$taxa5,'status'=>'Pago','data_bonus'=>$now,'nivel'=>5));
                        }
                        
                        $pontos = pontosModel::create(array('usuario_id'=>$u->usuario_id,'investidor_id'=>$value->aporte_id,'patrocinador'=>$np5->usuario_id,'pontos'=>$n5p,'valor'=>$value->investimento_real,'data'=>$now,'nivel'=>5));
                        //extratoModel::insert(array('pat_id'=>$np1->usuario_id,'usuario_id'=>$u->usuario_id,'tipo'=>'Pontos','bonus_id'=>$bonus->id,'data'=>$now));
                    //}
                    
                    if(aporteModel::where('usuario_id', $np1->usuario_id)->where('status','Ativo')->get()->count() == 0){
                        usuarioModel::where('usuario_id', $u->usuario_id)->update(array('status_cadastro'=>'Ativo','data_ativo'=>$now));
                    }else{
                        usuarioModel::where('usuario_id', $u->usuario_id)->update(array('status_cadastro'=>'Ativo'));
                    }
                    
                    
                    aporteModel::where('aporte_id', $value->aporte_id)->update(array('status'=>'Ativo','data_investimento'=>$now,'data_recebimento'=>$data_recebimento,'data_pagamento'=>$now,'data_confirmacao'=>$now));
                
                    
                }else if($status_pagamento == 1){
                    aporteModel::where('aporte_id', $value->aporte_id)->update(array('data_pagamento'=>$now,'status'=>'Aguardando'));
                }else if($status_pagamento < 0){
                    //aporteModel::where('aporte_id', $value->aporte_id)->delete();    
                }
    		}
    		
    		//echo "deu certo";
		}else{
		    echo "sem update";
		}
		
	}

    /*function cronUpdate(){
        $now = date("Y-m-d H");
		//$now = date("2019-04-30 00");
	
		if(aporteModel::where('status','Ativo')->whereRaw("datediff(data_proximo,'". $now ."') = 0")->get()->count() > 0 ){
		    $investimentos = aporteModel::where('status','Ativo')->whereRaw("datediff(data_proximo,'". $now ."') = 0")->get();

			foreach ($investimentos as $key => $value) {
				
				$us = usuarioModel::where('usuario_id', $value->usuario_id)->get()[0];
                        
                //$value->data_investimento = date("d/m/Y H:i:s", strtotime($value->data_investimento)); 
                
                $data0 = gmdate('d/m/Y H:i:s',strtotime('+45 hour',strtotime($value->data_proximo)));
                $data = str_replace("/", "-", $data0);
            
 	            $data_proximo = date('Y-m-d H:i:s', strtotime($data));
		     	        
 	            $valor = $us->carteira + ($value->investimento * 0.30);
                $ciclo = $value->ciclo + 1;
                    
                if($ciclo < 8){ 
                    $c = aporteModel::where('antigo_id',$value->antigo_id)->get()->count();
                    if($ciclo == 5){
                        if(aporteModel::where('antigo_id',$value->antigo_id)->get()->count() == 1 || aporteModel::where('antigo_id',$value->antigo_id)->get()->count() == 2){
                            usuarioModel::where('usuario_id', $value->usuario_id)->update(array('carteira'=>$valor));
                            aporteModel::where('aporte_id', $value->aporte_id)->update(array('data_proximo'=>$data_proximo,'status'=>'Reentrada','ciclo'=>$ciclo));
                        }else if(aporteModel::where('antigo_id',$value->antigo_id)->get()->count() == 3 ){
                            usuarioModel::where('usuario_id', $value->usuario_id)->update(array('carteira'=>$valor));
                            aporteModel::where('aporte_id', $value->aporte_id)->update(array('data_proximo'=>$data_proximo,'status'=>'Taxa','ciclo'=>$ciclo));
                        }
                    }else{
                        aporteModel::where('aporte_id', $value->aporte_id)->update(array('data_proximo'=>$data_proximo,'ciclo'=>$ciclo));
                        usuarioModel::where('usuario_id', $value->usuario_id)->update(array('carteira'=>$valor));
                    }
                }else{
                    usuarioModel::where('usuario_id', $value->usuario_id)->update(array('carteira'=>$valor));
                    aporteModel::where('aporte_id', $value->aporte_id)->update(array('status'=>'Finalizado','ciclo'=>$ciclo));
                }
            }

            //$value->data_recebimento = date("d/m/Y H:i:s", strtotime($value->data_recebimento)); 

			
		}else {
			echo "sem update";
		}
	}
	
	function cronUpdate2()
	{
		$config = configModel::where('sistema_id',1)->get()[0];
		$now = date("Y-m-d H:i:s");
		$horas = $config->dias_re * 24;
		if(investimentoModel::where('status','Ativo')->whereRaw("hour(timediff('". $now ."',data_compra)) >= ".$horas)->get()->count() > 0 ){
		$investimentos = investimentoModel::where('status','Ativo')->whereRaw("hour(timediff('". $now ."',data_compra)) >= ".$horas)->get();

			foreach ($investimentos as $key => $value) {
				
				investimentoModel::where('investidor_id',$value->investidor_id)->update(array('status'=>'Reentrada'));

			}
		}else {
			echo "sem update";
		}
	}*/
	
	
	
	function adicionar_rendimento($req,$res,$args){
		$message = '';
		
		$rend = rendimentoModel::get();
	    
		foreach ($rend as $key => $value) {
		    //$us = usuarioModel::where('usuario_id', $value2->usuario_id)->get()[0];
		    
		    $now2 = date("d-m-Y");
		    
		    if(extratoModel::where('rendimento_id',$value->rendimento_id)->where('data','2019-11-25 00:00:00')->get()->count() == 0 ){
		        //echo "ID: " . $value->rendimento_id . " - USUÁRIO: " . $value->usuario_id . " - TIPO: " . $value->tipo . " - DATA: " . $value->data_rendimento . "<br>";
		        //extratoModel::insert(array('usuario_id'=>$value->usuario_id,'tipo'=>'Rendimento','rendimento_id'=>$value->rendimento_id,'data'=>$value->data_rendimento));
		    }
		}
		
		//return $this->view->render($res,'cliente/esqueceu.html',array('baseurl'=>base_url ,'message'=>$message));
	}
	
	/*function investQuebra(){
		$date['config'] = configModel::where('sistema_id',1)->get()[0];

		$investimetno = investimentoModel::where('valor_investido','>',50)->get();
		foreach ($investimetno as $key => $value) {
			$divisor = ($value->valor_investido - 50 )/$date['config']->valor;
			$now = date('Y-m-d H:i:s');
			for ($i=0; $i < $divisor  ; $i++) { 
				investimentoModel::insert(array('usuario_id_investidor' => $value->usuario_id_investidor,'valor_investido'=>50,'data_compra'=>$value->data_compra,'status'=>$value->status));
			}
			investimentoModel::where('investidor_id',$value->investidor_id)->update(array('valor_investido'=>50));
		}				
	}*/
	
	/*******************************************************************************/
	
	function speed_center($req,$res,$args){
		$message = '';
		$usuario = $_SESSION['id'];
		$now = date('Y-m-d H:i:s');
	
        if($Dusuario->acesso == 'Investidor'){
	        if($_SESSION['admin_id'] != $_SESSION['id']){
    	        $dados['Acesso_admin'] = 'Sim';
    	        $_SESSION['ant_id'] = $_SESSION['admin_id'];
    	    }
	    }

        if($usuario == ''){
            $url = $this->router->pathFor('login');
		    return $res->withStatus(200)->withHeader('Location', $url);
        }

		$Dusuario = usuarioModel::where('usuario_id', $usuario)->get()[0];
		$dados['Usuario'] = $Dusuario->usuario; 
		$dados['Nome'] = $Dusuario->nome; 
		$dados['Cpf'] = $Dusuario->cpf;
		$dados['Acesso'] = $Dusuario->acesso;
		$dados['Foto'] = $Dusuario->foto;
		$dados['Email'] = $Dusuario->email;
		$dados['Pais'] = $Dusuario->pais;
		$dados['Genero'] = $Dusuario->genero;
		$dados['Documento_status'] = $Dusuario->documento_status;
		
		
		if(isset($_POST['adquirir-franquia'])){
		//if(isset($_POST['_csrf'])){
		    $franquia = isset($_POST['franquia']) ? htmlspecialchars(stripslashes(trim($_POST['franquia']))): '';
			
			if($franquia <> 'home' && $franquia <> 'class' && $franquia <> 'master' && $franquia <> 'conceito'){
			    $message = '<div class="alert alert-danger"><center><b>Erro:</b> Tipo de Franquia não encontrada.</center></div>';
			    
			    //$resp['msg']    = "sem franquia";
                //echo json_encode($resp);
                //exit;    
			}else{
			    $_SESSION['franquia'] = $franquia;
			    header("Refresh:0; url=../adquirir-franquia");
			    
			    /*if($Dusuario->bitcoin == ''){
        		    usuarioModel::where('usuario_id', $usuario)->update(array('bitcoin'=>$bitcoin,'data_bitcoin'=>$now,'ip_bitcoin'=>$_SERVER["REMOTE_ADDR"]));
                    
                    $resp['msg']    = "sucesso";
                    echo json_encode($resp);
                    exit;
			    }*/
			}
		}
		
		
		return $this->view->render($res,'cliente/speed_center.html',array('baseurl'=>base_url ,'message'=> $message,'dados'=>$dados)); 
		
	}

    function adquirir_franquia($req,$res,$args){
		$message = '';
		$usuario = $_SESSION['id'];
		$Dusuario = usuarioModel::where('usuario_id', $usuario)->get()[0];
		$now = date('Y-m-d H:i:s');
		
        if($usuario == ''){
            $url = $this->router->pathFor('login');
		    return $res->withStatus(200)->withHeader('Location', $url);
        }

        	
        $dados['Usuario'] = $Dusuario->usuario; 
		$dados['Foto'] = $Dusuario->foto; 
		$dados['Nome'] = $Dusuario->nome; 
		$dados['Patrocinador'] = $Dusuario->patrocinador; 
		$dados['Email'] = $Dusuario->email; 
		$dados['Cpf'] = $Dusuario->cpf; 
		$dados['Whatsapp'] = $Dusuario->whatsapp; 
		$dados['Cadastro'] = date("d/m/Y H:i:s", strtotime($Dusuario->data_cadastro));
		$dados['Acesso'] = $Dusuario->acesso;
		$dados['Status_cadastro'] = $Dusuario->status_cadastro;
		$dados['Genero'] = $Dusuario->genero;
		$dados['Nascimento'] = $Dusuario->nascimento;
		$dados['Estado_civil'] = $Dusuario->estado_civil;
		$dados['Ip'] = $Dusuario->ip;
	    $dados['Documento_status'] = $Dusuario->documento_status;
	    

        if(isset($_POST['_csrf'])){
            $nome   =  isset($_POST['nome']) ? htmlspecialchars(stripslashes(trim($_POST['nome']))): null;
            $email   =  isset($_POST['email']) ? htmlspecialchars(stripslashes(trim($_POST['email']))): null;
            $cnpj   =  isset($_POST['cnpj']) ? htmlspecialchars(stripslashes(trim($_POST['cnpj']))): null;
            $whatsapp   =  isset($_POST['whatsapp']) ? htmlspecialchars(stripslashes(trim($_POST['whatsapp']))): null;
            $genero   =  isset($_POST['genero']) ? htmlspecialchars(stripslashes(trim($_POST['genero']))): null;
            $nascimento   =  isset($_POST['nascimento']) ? htmlspecialchars(stripslashes(trim($_POST['nascimento']))): null;
            $usuario   =  isset($_POST['usuario']) ? htmlspecialchars(stripslashes(trim($_POST['usuario']))): null;
			$senha   =  isset($_POST['senha']) ? htmlspecialchars(stripslashes(trim($_POST['senha']))): null;
			
			
			//tranforma do padrão nacional para internacional: 2019-01-17
            $data_internacional = implode("-",array_reverse(explode("/",$nascimento)));
            
            //gera a data atual
            $data_atual = date("Y-m-d");
			$idade = $data_atual - $data_internacional;
			
			if(usuarioModel::where('usuario', $usuario)->get()->count() > 0):
				$resp['msg']    = "usuário cadastrado";
                echo json_encode($resp);
                exit;
			elseif(usuarioModel::where('email', $email)->get()->count() > 0):
				$resp['msg']    = "email cadastrado";
                echo json_encode($resp);
                exit;
            /*elseif (strlen($u_cpf) != 14):
                $resp['msg']    = "cpf inválido";
                echo json_encode($resp);
                exit;*/
            elseif($idade < 18):    
                $resp['msg']    = "menor idade";
                echo json_encode($resp);
                exit;
			else:
			    if(is_null($cnpj) || strlen($cnpj) == 0):
        			$resp['msg']    = "cnpj branco";
                    echo json_encode($resp);
                    exit;
		        elseif(usuarioModel::where('cpf', $cnpj)->get()->count() > 0):
        			$resp['msg']    = "cnpj cadastrado";
                    echo json_encode($resp);
                    exit;
		        else:
        		    /*if(strlen($u_cpf) == 14){
        			    $volta['cpf']  = $cnpj;
        			    $volta['idioma']  = 'português';
        		    }*/
        		
        		    //Etapa 1: Cria um array com apenas os digitos numéricos, isso permite receber o cnpj em diferentes formatos como "00.000.000/0000-00", "00000000000000", "00 000 000 0000 00" etc...
        			$j=0;
        			for($i=0; $i<(strlen($cnpj)); $i++){
        			    if(is_numeric($cnpj[$i])){
        					$num[$j]=$cnpj[$i];
        					$j++;
        				}
        		    }
        			//Etapa 2: Conta os dígitos, um Cnpj válido possui 14 dígitos numéricos.
        			if(count($num)!=14){
        				$isCnpjValid=false;
        			}
        			//Etapa 3: O número 00000000000 embora não seja um cnpj real resultaria um cnpj válido após o calculo dos dígitos verificares e por isso precisa ser filtradas nesta etapa.
        			if ($num[0]==0 && $num[1]==0 && $num[2]==0 && $num[3]==0 && $num[4]==0 && $num[5]==0 && $num[6]==0 && $num[7]==0 && $num[8]==0 && $num[9]==0 && $num[10]==0 && $num[11]==0){
        				$isCnpjValid=false;
        			//Etapa 4: Calcula e compara o primeiro dígito verificador.    
        			}else{
        			    $j=5;
        				for($i=0; $i<4; $i++){
        					$multiplica[$i]=$num[$i]*$j;
        					$j--;
        				}
        				
        				$soma = array_sum($multiplica);
        				$j=9;
        				for($i=4; $i<12; $i++){
        					$multiplica[$i]=$num[$i]*$j;
        					$j--;
        				}
        				
        				$soma = array_sum($multiplica);	
        				$resto = $soma%11;			
        				if($resto<2){
        					$dg=0;
        				}else{
        					$dg=11-$resto;
        				}
        				
        				if($dg!=$num[12]){
        					$isCnpjValid=false;
        				} 
        			}
        			//Etapa 5: Calcula e compara o segundo dígito verificador.
        			if(!isset($isCnpjValid)){
        				$j=6;
        				for($i=0; $i<5; $i++){
        					$multiplica[$i]=$num[$i]*$j;
        					$j--;
        				}
        				
        				$soma = array_sum($multiplica);
        				$j=9;
        				for($i=5; $i<13; $i++){
        					$multiplica[$i]=$num[$i]*$j;
        					$j--;
        				}
        				
        				$soma = array_sum($multiplica);	
        				$resto = $soma%11;			
        				if($resto<2){
        					$dg=0;
        				}else{
        					$dg=11-$resto;
        				}
        				
        				if($dg!=$num[13]){
        					$isCnpjValid=false;
        				}else{
        					$isCnpjValid=true;
        				}
        			}
        			//Trecho usado para depurar erros.
        			/*
        			if($isCnpjValid==true){
        			    echo "<p><font color="GREEN">Cnpj é Válido</font></p>";
        			}
        			
        			if($isCnpjValid==false){
        				echo "<p><font color="RED">Cnpj Inválido</font></p>";
        			}
        			*/
        			//Etapa 6: Retorna o Resultado em um valor booleano.
        			//return $isCnpjValid;
        	    
        	        if($isCnpjValid == true){
        	            $patrocinador = 'cadastrese';
        	            $volta['tipo_franquia'] = $_SESSION['franquia'];
            	        $volta['cpf'] = $cnpj;
            	        $volta['email'] = $email;
                        $volta['usuario'] = $usuario;
                        $volta['patrocinador'] = $patrocinador;
                        $volta['nome'] = $nome;
                        $volta['nacionalidade']  = 'brasileiro';
                        $volta['genero']  = $genero;
                        $volta['whatsapp']  = $whatsapp;
                        $volta['acesso'] = 'Franqueado';
                        $volta['senha'] = md5($senha);
                        $volta['status_cadastro'] = 'Inativo';
                	    $volta['data_cadastro'] = date('Y-m-d H:i:s');
                	    //$volta['pais'] = $_POST['pais'];
                		$volta['documento_status'] = 'Pendente';
                
                        usuarioModel::insert($volta);
                                
                		//$us = usuarioModel::where('usuario_id', $value2->usuario_id)->get()[0];
                		//$nivel1 = $us->patrocinador;
                		//$n1 = usuarioModel::where('usuario', $nivel1)->get()[0];
                        				
                		$us2 = usuarioModel::where('usuario', $patrocinador)->get()[0];
                		$nivel2 = $us2->patrocinador;
                		$n2 = usuarioModel::where('usuario', $nivel2)->get()[0];
                        				
                		$us3 = usuarioModel::where('usuario', $us2->patrocinador)->get()[0];
                		$nivel3 = $us3->patrocinador;
                		$n3 = usuarioModel::where('usuario', $nivel3)->get()[0];
                        				 
                		$us4 = usuarioModel::where('usuario', $us3->patrocinador)->get()[0];
                		$nivel4 = $us4->patrocinador;
                		$n4 = usuarioModel::where('usuario', $nivel4)->get()[0];
                        												
                    	$us5 = usuarioModel::where('usuario', $us4->patrocinador)->get()[0];
                		$nivel5 = $us5->patrocinador;
                		$n5 = usuarioModel::where('usuario', $nivel5)->get()[0];
                        				 
                		$us6 = usuarioModel::where('usuario', $us5->patrocinador)->get()[0];
                		$nivel6 = $us6->patrocinador;
                		$n6 = usuarioModel::where('usuario', $nivel6)->get()[0];		 
                        		
                		$us7 = usuarioModel::where('usuario', $us6->patrocinador)->get()[0];
                		$nivel7 = $us7->patrocinador;
                		$n7 = usuarioModel::where('usuario', $nivel7)->get()[0];
                        		
                		$us8 = usuarioModel::where('usuario', $us7->patrocinador)->get()[0];
                		$nivel8 = $us8->patrocinador;
                		$n8 = usuarioModel::where('usuario', $nivel8)->get()[0];
                        				 
                        				 
                		usuarioModel::where('usuario', $usuario)->update(array('nivel2'=>$nivel2,'nivel3'=>$nivel3,'nivel4'=>$nivel4,'nivel5'=>$nivel5,'nivel6'=>$nivel6,'nivel7'=>$nivel7,'nivel8'=>$nivel8));	    
                        
                        //header("Refresh:2; url=../login");
                	    //$url = $this->router->pathFor('login');
                        		 
                		$resp['msg']    = "sucesso";
                        echo json_encode($resp);
                        exit;
        	        }else{
        	            $resp['msg']    = "cnpj inválido";
                        echo json_encode($resp);
                        exit;
        	        }
                endif;    
            endif;
		}

        return $this->view->render($res,'cliente/adquirir_franquia.html',array('baseurl'=>base_url ,'message'=> $message,'dados'=>$dados));
	}
	
	/**************************************************************/
	//FRANQUIAS
	
	function login_franquia($req,$res,$args){
	    $message = '';
		$now = date('Y-m-d H:i:s');
		
        //if(isset($_POST['entrar'])){
        if(isset($_POST['_csrf'])){	
            
			$usuario = $_POST['usuario'];
			$u_usuario = isset($_POST['usuario']) ? stripslashes(trim($_POST['usuario'])): '';
			$senha = md5($_POST['senha']);
			$u_senha = isset($_POST['senha']) ? stripslashes(trim($_POST['senha'])): '';
			
			if(usuarioModel::where('usuario',$u_usuario)->where('senha',md5($u_senha))->get()->count() > 0 ){
			    if(usuarioModel::where('usuario',$u_usuario)->where('senha',md5($u_senha))->where('acesso','Franqueado')->get()->count() > 0 ){
    			    $content = [
                        "secret" => "6LdKAocaAAAAAK3EaLJ122y1JRc8VgTv28ptTtf_",
                        "response" => $_POST["g-recaptcha-response"] ?? "",
                        "remoteip" => $_SERVER["REMOTE_ADDR"] ?? null,
                    ];
                    
                    $curl = curl_init("https://www.google.com/recaptcha/api/siteverify");
                    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
                    curl_setopt($curl, CURLOPT_POST, true);
                    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);
                    curl_setopt($curl, CURLOPT_POSTFIELDS, $content);
                    $validation = curl_exec($curl);
                    curl_close($curl);
                    
                    $response = json_decode($validation);
                    
                    if ($response->success) {
                        $usuario = usuarioModel::select('usuario_id','nome','ip')->where('usuario',$u_usuario)->where('senha',md5($u_senha))->get()[0];
                  
                        session_start();
            			$_SESSION['id'] = $usuario->usuario_id;
            			$_SESSION['Nome'] = $usuario->nome;
            				
            			usuarioModel::where('usuario_id', $usuario->usuario_id)->update(array('data_ultimo_login'=>$now,'ip'=>$_SERVER["REMOTE_ADDR"]));
            				
            			$resp['msg']    = "sucesso";
                        echo json_encode($resp);
                        exit;
                    }else{
                        $resp['msg']    = "captcha inválido";
                        echo json_encode($resp);
                        exit;
                    }
			    }else{
			        $resp['msg']    = "sem permissão";
                    echo json_encode($resp);
                    exit;
			    }
			}else{
                $resp['msg']    = "errado";
                echo json_encode($resp);
                exit;
			}
		}

		return $this->view->render($res,'cliente/login_franquia.html',array('baseurl'=>base_url ,'message'=> $message));
	}
	
	function escritorio_franquia($req,$res,$args)
	{
		$usuario = $_SESSION['id'];
        $message = '';
        $Dusuario = usuarioModel::where('usuario_id', $usuario)->get()[0];
        $dados['Nome'] = $Dusuario->nome;
        $dados['Usuario'] = $Dusuario->usuario;
        $dados['Usuario_id'] = $Dusuario->usuario_id;
        $dados['Email'] = $Dusuario->email;
        $dados['Foto'] = $Dusuario->foto;
        $dados['Ip'] = $Dusuario->ip;
        $dados['Acesso'] = $Dusuario->acesso;
        $dados['Genero'] = $Dusuario->genero;
		
		$sistema = sistemaModel::where('sistema_id',1)->get()[0];
        
		if($Dusuario->acesso != 'Franqueado'){
            unset($_SESSION['id']);
        	$url = $this->router->pathFor('login');
        	return $res->withStatus(200)->withHeader('Location', $url);
    	}
        
        
        $dados['Dias'] = floor((strtotime(date('Y-m-d H:i:s')) - strtotime($sistema->lancamento) ) / 86400) ;
		
		$bonus = bonusModel::where('patrocinador',$usuario)->sum('valor');
        $dados['Bonus'] = number_format($bonus,8,".","");
        
        $saquesb = saqueModel::where('usuario_id',$usuario)->where('tipo','Bônus')->where('status','!=','Rejeitado')->sum('valor');
        $bonus_disponivel = $bonus - $saquesb;
        $dados['Bonus_disponivel'] = number_format($bonus_disponivel,8,".","");
        
        
        
        /*$valid_mbk_c = curl_init();
		curl_setopt_array($valid_mbk_c, array(
		    CURLOPT_URL => "https://api.bitcointrade.com.br/v3/public/BRLBTC/ticker/",
		    CURLOPT_RETURNTRANSFER => true,
		    CURLOPT_ENCODING => "",
		    CURLOPT_MAXREDIRS => 10,
		    CURLOPT_TIMEOUT => 0,
		    CURLOPT_FOLLOWLOCATION => false,
		    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
		    CURLOPT_CUSTOMREQUEST => "GET",
		    CURLOPT_HTTPHEADER => array(
		        "Content-Type: application/json"
	        ),
	    ));

	    $valid_mbk_r = curl_exec($valid_mbk_c);
	    $valid_mbk_e = curl_error($valid_mbk_c);
	    curl_close($valid_mbk_c);
	    $valid_mbk_x = json_decode($valid_mbk_r, true);
        
        $dados['Btc_valor'] = $valid_mbk_x['data']['last'];
        
        
        $dados['Bitcoin_valor_real'] = number_format(1 / $valid_mbk_x['data']['last'],8,".","");
        $dados['Bitcoin_valor'] = number_format(1 / $valid_mbk_x['data']['last'],8,".","");*/
        
        
        $inv0 = 0;
        $inv = aporteModel::where('usuario_id',$usuario)->where('status','!=','Pendente')->where('status','!=','Aguardando')->get();
		foreach ($inv as $key => $value) {
		    $cotacao = $value->cotacao_bitcoin;
		    $real = $value->investimento_real;
		    
		    $invest += ($real / $cotacao);
        }
        
        $dados['Tinvestido'] = number_format($invest,8,".","");
		$ainvest = aporteModel::where('usuario_id',$usuario)->where('status','Ativo')->sum('investimento');
        $dados['Ainvestido'] = number_format($ainvest,8,".","");
		$dados['Indicados'] = usuarioModel::where('patrocinador',$Dusuario->usuario)->count();
		
		$dados['Indicados1'] = usuarioModel::where('patrocinador',$Dusuario->usuario)->get();
		foreach ($dados['Indicados1'] as $key => $value) {
		    $value->hora_cadastro = date("H:i:s", strtotime($value->data_cadastro));     
            $value->data_cadastro = date("d/m/Y", strtotime($value->data_cadastro));     
        }
        
        $ptu = pontosModel::where('usuario_id',$usuario)->whereNull('patrocinador')->sum('pontos');
		$ptp = pontosModel::where('patrocinador',$usuario)->sum('pontos');
        $dados['Pontos'] = $ptu + $ptp;
        

        
		$dados['Carteira'] = rendimentoModel::where('usuario_id',$usuario)->sum('valor');
		$investimento = aporteModel::where('usuario_id',$usuario)->sum('investimento');
        
        //echo "PORCENTAGEM: ".$porc."<br>";
		//echo "GANHOS TOTAIS: ".number_format($ganhos2,2,".","")."<br>";
		//echo "TODOS SAQUES: ".number_format($saquestodos,2,".","")."<br>";
		//echo "VALOR ESTIMADO: ".number_format($dados['Val_estimado0'],2,".","")."<br>";
		
		
		/***************************************************************/
		
		
		
		//$mes = date("Y-m-d 00:00:00");
		$h = date("Y-m-d 00:00:00");
		$hf = date("Y-m-d 23:59:59");
		$o = gmdate('Y-m-d 00:00:00', strtotime('-1 day',strtotime($h)));
		$o2 = gmdate('Y-m-d 23:59:59', strtotime('-1 day',strtotime($h)));
        $m = date("Y-m-01 00:00:00");
        
        $datamp = gmdate('d/m/Y',strtotime('-1 month',strtotime($h)));
        $datamp1 = str_replace("/", "-", $datamp);
        //$mp = date('Y-m-01 00:00:00', strtotime($datamp1));
        //$mpf = date('Y-m-t 23:59:59', strtotime($datamp1));
        $mp = gmdate('Y-m-01 00:00:00',strtotime('-1 month',strtotime($m)));
        $mpf = date('Y-m-t 23:59:59',strtotime('-1 month',strtotime($m)));
        
        //$mes_primeiro = date("m", strtotime($primeiro_inv->data_confirmacao));
        
        //echo "DATA DO MÊS PASSADO: ".$mp;
		
		
		$dados['Usuarios'] = usuarioModel::orderby('usuario_id','desc')->take(5)->get();
		foreach ($dados['Usuarios'] as $key => $value) {
		    $value->hora_cadastro = date("H:i:s", strtotime($value->data_cadastro)); 
			$value->data_cadastro = date("d/m/Y", strtotime($value->data_cadastro)); 
		}
		
        
        
        /*$cont_ip = ipModel::where('ip_permitido',$_SERVER["REMOTE_ADDR"])->get()->count();
			    
		if($cont_ip == 0){
	        unset($_SESSION['id']);
	       $url = $this->router->pathFor('login');
	       return $res->withStatus(200)->withHeader('Location', $url);
		}*/
        
        
        
		$dados['Saques'] = saqueModel::orderby('saque_id','desc')->get();
		foreach ($dados['Saques'] as $key => $value) {
		    $us = usuarioModel::where('usuario_id', $value->usuario_id)->get()[0];
		    $value->nome = $us->nome;
		    $value->usuario = $us->usuario;
		    
			$value->data_saque = date("d/m/Y H:i:s", strtotime($value->data_saque)); 
		}
		
		$dados['Investimentos'] = aporteModel::orderby('aporte_id','desc')->take(5)->get();
		//$dados['Investimentos'] = aporteModel::where('status','!=','Ativo')->where('status','!=','Finalizado')->orderby('aporte_id','desc')->take(5)->get();
		//$dados['Investimentos'] = aporteModel::where('status','!=','Ativo')->where('status','!=','Finalizado')->orderby('aporte_id','desc')->get();
		foreach ($dados['Investimentos'] as $key => $value) {
		    $us = usuarioModel::where('usuario_id', $value->usuario_id)->get()[0];
		    $value->nome = $us->nome;
		    $value->usuario = $us->usuario;
		    
			$value->hora_investimento = date("H:i:s", strtotime($value->data_investimento)); 
			$value->data_investimento = date("d/m/Y", strtotime($value->data_investimento)); 
			$value->data_confirmacao = date("d/m/Y H:i:s", strtotime($value->data_confirmacao)); 
			if($value->data_recebimento != ''){
    	        $value->data_recebimento = date("d/m/Y H:i:s", strtotime($value->data_recebimento));
            }else{
    	        $value->data_recebimento = '';
            }
		}
        		
        
		return $this->view->render($res,'cliente/escritorio_franquia.html',array('baseurl'=>base_url ,'dados'=>$dados,'message'=>$message));
	}

    function imagem($req,$res,$args){
		$message = '';
		$usuario = $_SESSION['id'];
		$Dusuario = usuarioModel::where('usuario_id', $usuario)->get()[0];
		$now = date('Y-m-d H:i:s');
		
        if($usuario == ''){
            $url = $this->router->pathFor('login');
		    return $res->withStatus(200)->withHeader('Location', $url);
        }

        $dados['Usuario'] = $Dusuario->usuario; 
		$dados['Foto'] = $Dusuario->foto; 
		$dados['Nome'] = $Dusuario->nome; 
		$dados['Patrocinador'] = $Dusuario->patrocinador; 
		$dados['Email'] = $Dusuario->email; 
		$dados['Cpf'] = $Dusuario->cpf; 
		$dados['Whatsapp'] = $Dusuario->whatsapp; 
		$dados['Cadastro'] = date("d/m/Y H:i:s", strtotime($Dusuario->data_cadastro));
		$dados['Acesso'] = $Dusuario->acesso;
		$dados['Status_cadastro'] = $Dusuario->status_cadastro;
		$dados['Genero'] = $Dusuario->genero;
		$dados['Nascimento'] = $Dusuario->nascimento;
		$dados['Estado_civil'] = $Dusuario->estado_civil;
		$dados['Ip'] = $Dusuario->ip;
	    $dados['Documento_status'] = $Dusuario->documento_status;
	    	
		$dados['Rua'] = $Dusuario->rua;
		$dados['Numero'] = $Dusuario->numero;
		$dados['Bairro'] = $Dusuario->bairro;
		$dados['Estado'] = $Dusuario->estado;
		$dados['Cidade'] = $Dusuario->cidade;
		$dados['Cep'] = $Dusuario->cep;
		$dados['Pais'] = $Dusuario->pais;
		
		$dados['Agencia'] = $Dusuario->agencia;
		$dados['Conta'] = $Dusuario->conta;
		$dados['Tipo'] = $Dusuario->tipo;
		$dados['Banco'] = $Dusuario->banco;
		$dados['Pessoa'] = $Dusuario->pessoa;
		
		
        if(isset($_POST['_csrfi'])):
            if(isset($_FILES)){
            	$foto = $_FILES["file"];
                        
                if (empty($foto["name"])) {
                    $resp['msg']    = "sem foto";
                    echo json_encode($resp);
                    exit;
                }else{
                 	//if (!empty($foto["name"])) {
                   	if(!preg_match("/^image\/(pjpeg|jpeg|png|gif|bmp)$/", $_FILES['file']["type"])){
              	   	    $resp['msg']    = "formato inválido";
                        echo json_encode($resp);
                        exit;
             		}else if($foto['size'] > 2097152){   
                		$resp['msg']    = "arquivo grande";
                        echo json_encode($resp);
                        exit;
             		}else{
    					preg_match("/\.(gif|bmp|png|jpg|jpeg){1}$/i", $_FILES['file']["name"], $ext);
                		$nome_imagem = md5(uniqid(time())) . "." . $ext[1];
                		$caminho_imagem = "perfil/" . $nome_imagem;
                		move_uploaded_file($_FILES['file']["tmp_name"], $caminho_imagem);
                            	
                        usuarioModel::where('usuario_id', $usuario)->update(array('foto'=>$nome_imagem));
            				                	
                        //header("Refresh:2");
                        
                        $resp['msg']    = "sucesso";
                        echo json_encode($resp);
                        exit;
             		}
                }
			}
		endif;
	
		return $this->view->render($res,'cliente/imagem.html',array('baseurl'=>base_url ,'message'=> $message,'dados'=>$dados));
	}	

    function sair($req,$res,$args){
	       unset($_SESSION['id']);
	       unset($_SESSION['admin_id']);
	       
	       $url = $this->router->pathFor('login');
	       return $res->withStatus(200)->withHeader('Location', $url);
    }
}